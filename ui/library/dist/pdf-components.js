!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U(require("react-pdf"),require("react")):"function"==typeof define&&define.amd?define(["react-pdf","react"],U):"object"==typeof exports?exports["@allenai/pdf-components"]=U(require("react-pdf"),require("react")):Q["@allenai/pdf-components"]=U(Q["react-pdf"],Q.React)}(this,(function(__WEBPACK_EXTERNAL_MODULE__323__,__WEBPACK_EXTERNAL_MODULE__888__){return(()=>{var __webpack_modules__={184:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCOztBQUVoQjtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLEtBQTZCO0FBQ2xDO0FBQ0E7QUFDQSxFQUFFLFVBQVUsSUFBNEU7QUFDeEY7QUFDQSxFQUFFLGlDQUFxQixFQUFFLG1DQUFFO0FBQzNCO0FBQ0EsR0FBRztBQUFBLGtHQUFDO0FBQ0osRUFBRSxNQUFNLEVBRU47QUFDRixDQUFDIiwiZmlsZSI6IjE4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n")},224:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ index)\n});\n\n// UNUSED EXPORTS: ArrowFlag, ArrowFlagBase, BoundingBox, ContextProvider, DEFAULT_ZOOM_SCALE, DocumentContext, DocumentWrapper, DownloadButton, HighlightOverlay, IconFlag, Outline, OutlineItem, Overlay, POSITION, PageNumberControl, PageRenderContext, PageWrapper, PercentFormatter, PrintButton, RENDER_TYPE, ScrollContext, SidePanel, Thumbnail, ThumbnailList, TransformContext, UiContext, ZoomInButton, ZoomOutButton, computeBoundingBoxStyle, computePageStyle, generatePageIdFromIndex, getPageHeight, getPageWidth, isSideways, rotateClockwise, rotateCounterClockwise, scaleRawBoundingBox, scrollToId, scrollToPdfPageIndex\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(184);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: external {"commonjs":"react","commonjs2":"react","amd":"react","root":"React"}\nvar external_commonjs_react_commonjs2_react_amd_react_root_React_ = __webpack_require__(888);\n;// CONCATENATED MODULE: ./src/utils/provider.ts\nfunction logProviderWarning(functionName, providerName) {\n    console.warn(`Unable to call ${functionName}. The ${providerName} Provider may not be set up correctly.`);\n}\n\n;// CONCATENATED MODULE: ./src/utils/rotate.ts\nvar PageRotation;\n(function (PageRotation) {\n    PageRotation[PageRotation["Rotate0"] = 0] = "Rotate0";\n    PageRotation[PageRotation["Rotate90"] = 90] = "Rotate90";\n    PageRotation[PageRotation["Rotate180"] = 180] = "Rotate180";\n    PageRotation[PageRotation["Rotate270"] = 270] = "Rotate270";\n})(PageRotation || (PageRotation = {}));\nfunction rotateClockwise(rotation) {\n    switch (rotation) {\n        case PageRotation.Rotate0:\n            return PageRotation.Rotate90;\n        case PageRotation.Rotate90:\n            return PageRotation.Rotate180;\n        case PageRotation.Rotate180:\n            return PageRotation.Rotate270;\n        default:\n            return PageRotation.Rotate0;\n    }\n}\nfunction rotateCounterClockwise(rotation) {\n    switch (rotation) {\n        case PageRotation.Rotate0:\n            return PageRotation.Rotate270;\n        case PageRotation.Rotate90:\n            return PageRotation.Rotate0;\n        case PageRotation.Rotate180:\n            return PageRotation.Rotate90;\n        default:\n            return PageRotation.Rotate180;\n    }\n}\n/**\n * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,\n * e.g. whether the page "is rotated sideways."\n */\nfunction isSideways(rotation) {\n    return rotation === PageRotation.Rotate90 || rotation === PageRotation.Rotate270;\n}\n\n;// CONCATENATED MODULE: ./src/utils/scroll.ts\n\n// Each page div is ID\'d according to page index\n// e.g. reader_pg_0, reader_pg_1, etc.\nconst PAGE_NAV_TARGET_ID_ROOT = \'reader_pg_\';\nconst PDF_HEIGHT_POINTS = 792;\nconst PDF_WIDTH_POINTS = 612;\nfunction generatePageIdFromIndex(pageIndex) {\n    return `${PAGE_NAV_TARGET_ID_ROOT}${pageIndex}`;\n}\nfunction scrollToId(id) {\n    const element = document.getElementById(id);\n    if (element) {\n        element.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'center\' });\n    }\n    else {\n        console.error(`Could not find scroll target with ID #${id}`);\n    }\n}\nfunction scrollToPdfPageIndex(pageIndex) {\n    scrollToId(generatePageIdFromIndex(pageIndex));\n}\n/**\n * Scroll PDF document to a specific position.\n * @param pageIndex The index of the page where the position locates at\n * @param leftPoints The horizontal distance between the origin and the position (in PDF coordinates)\n * @param bottomPoints The vertical distance between the origin and the position (in PDF coordinates)\n * @param rotation The rotation degree of the document\n */\nfunction scrollToPosition(pageIndex, leftPoints, bottomPoints, rotation = PageRotation.Rotate0) {\n    /*\n      Vertical scroll distance is calculated as\n      = total number of previous pages * page height including top/down margins\n      + the margin top of current page\n      + the distance from the page top to the specified position\n  \n      Notice that the scroll distance is measured in pixels,\n      so leftPoints/bottomPoints has to be transformed from points to pixels first.\n    */\n    const { width, height, marginTop, marginBottom, marginLeft, marginRight } = getPagePropertiesInPixels();\n    const heightWithMargins = height + marginTop + marginBottom;\n    // When a paper is rotated, its height and width would be switched automatically. However, leftPoints and bottomPoints remain the same.\n    let marginTopPixels = marginTop;\n    let bottomPixels = (height * bottomPoints) / PDF_HEIGHT_POINTS;\n    let leftPixels = (width * leftPoints) / PDF_WIDTH_POINTS;\n    if (rotation == PageRotation.Rotate90) {\n        marginTopPixels = marginLeft;\n        bottomPixels = (height * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\n        leftPixels = (width * bottomPoints) / PDF_HEIGHT_POINTS;\n    }\n    else if (rotation == PageRotation.Rotate180) {\n        marginTopPixels = marginBottom;\n        bottomPixels = (height * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\n        leftPixels = (width * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\n    }\n    else if (rotation == PageRotation.Rotate270) {\n        marginTopPixels = marginRight;\n        bottomPixels = (height * leftPoints) / PDF_WIDTH_POINTS;\n        leftPixels = (width * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\n    }\n    // Find page element\n    const pageId = generatePageIdFromIndex(pageIndex);\n    const pageIdElement = document.getElementById(pageId);\n    if (!pageIdElement) {\n        return;\n    }\n    // Find first scrollable parent\n    const parentElement = getScrollParent(pageIdElement);\n    if (!parentElement) {\n        return;\n    }\n    // Apply scroll\n    parentElement.scrollTo({\n        top: calculateTopPx({\n            heightWithMarginsInPx: heightWithMargins,\n            pageIndex: pageIndex,\n            marginTopPx: marginTopPixels,\n            heightPx: height,\n            bottomPx: bottomPixels,\n        }),\n        left: Math.floor(leftPixels),\n        behavior: \'smooth\',\n    });\n}\nfunction getScrollParent(node) {\n    const minScrollableHeight = 50; // used to check for a bug where Firefox gives inline containers a small scrollHeight when it shouldnt\n    if (typeof document === \'undefined\') {\n        return null;\n    }\n    if (!node || node.nodeName.toLowerCase() === \'body\') {\n        return document.documentElement;\n    }\n    if (node.scrollHeight - node.clientHeight > minScrollableHeight && !isOverflowIsHidden(node)) {\n        return node;\n    }\n    return getScrollParent(node.parentElement);\n}\nfunction isOverflowIsHidden(node) {\n    const style = getComputedStyle(node);\n    return (style.overflow.includes(\'hidden\') ||\n        style.overflowX.includes(\'hidden\') ||\n        style.overflowY.includes(\'hidden\'));\n}\nfunction calculateTopPx({ heightWithMarginsInPx, pageIndex, marginTopPx, heightPx, bottomPx, }) {\n    return Math.floor(heightWithMarginsInPx * pageIndex + marginTopPx + (heightPx - bottomPx));\n}\n/**\n * Get lengths, widths, and margins of a page.\n * @returns a PageProperties object\n */\nfunction getPagePropertiesInPixels() {\n    const firstPage = document.getElementById(generatePageIdFromIndex(0));\n    if (!firstPage) {\n        console.error(`Cannot get the first page of this document.`);\n        const emptyPageProperties = {\n            width: 0,\n            height: 0,\n            marginTop: 0,\n            marginBottom: 0,\n            marginLeft: 0,\n            marginRight: 0,\n        };\n        return emptyPageProperties;\n    }\n    const style = getComputedStyle(firstPage);\n    const pageProperties = {\n        width: parseInt(style.width),\n        height: parseInt(style.height),\n        marginTop: parseInt(style.marginTop),\n        marginBottom: parseInt(style.marginBottom),\n        marginLeft: parseInt(style.marginLeft),\n        marginRight: parseInt(style.marginRight),\n    };\n    return pageProperties;\n}\nfunction calculateTargetPosition({ scale, leftPoint, bottomPoint, pageDimensions, rotation = PageRotation.Rotate0, }) {\n    switch (rotation) {\n        default:\n        case PageRotation.Rotate0: {\n            const leftPx = (leftPoint / PDF_WIDTH_POINTS) * pageDimensions.width * scale;\n            const topPx = (1 - bottomPoint / PDF_HEIGHT_POINTS) * pageDimensions.height * scale;\n            return { leftPx, topPx };\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/context/DocumentContext.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst DocumentContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    numPages: 0,\n    numPagesLoaded: 0,\n    outline: [],\n    outlinePositions: null,\n    pageDimensions: { height: 0, width: 0 },\n    pdfDocProxy: undefined,\n    getOutlineTargets: opts => {\n        logProviderWarning(`getOutlineTargets(${JSON.stringify(opts)})`, \'DocumentContext\');\n        return [];\n    },\n    setNumPages: numPages => {\n        logProviderWarning(`setNumPages(${numPages})`, \'DocumentContext\');\n    },\n    setNumPagesLoaded: numPages => {\n        logProviderWarning(`setNumPagesLoaded(${numPages})`, \'DocumentContext\');\n    },\n    setOutline: outline => {\n        logProviderWarning(`setOutline(${outline})`, \'DocumentContext\');\n    },\n    setOutlinePositions: outline => {\n        logProviderWarning(`setOutlinePositions(${outline})`, \'DocumentContext\');\n    },\n    setPageDimensions: pageDimensions => {\n        logProviderWarning(`setPageDimensions(${pageDimensions})`, \'DocumentContext\');\n    },\n    setPdfDocProxy: pdfDocProxy => {\n        logProviderWarning(`setPdfDocProxy(${pdfDocProxy})`, \'DocumentContext\');\n    },\n});\nfunction useDocumentContextProps() {\n    const [numPages, setNumPages] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [numPagesLoaded, setNumPagesLoaded] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [outline, setOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [outlinePositions, setOutlinePositions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [pageDimensions, setPageDimensions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState({\n        height: 0,\n        width: 0,\n    });\n    const [pdfDocProxy, setPdfDocProxy] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState();\n    // Draw outline target into the pdf based on the args\n    const getOutlineTargets = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex, scale, rotation, pageDimensions, }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return [];\n        }\n        const positions = (outlinePositions === null || outlinePositions === void 0 ? void 0 : outlinePositions.get(pageNumber)) || [];\n        return positions.map(({ dest, leftPoint, bottomPoint }) => {\n            const { leftPx, topPx } = calculateTargetPosition({\n                scale,\n                rotation,\n                leftPoint,\n                bottomPoint,\n                pageDimensions,\n            });\n            return {\n                dest,\n                leftPx,\n                topPx,\n            };\n        });\n    }, [outlinePositions]);\n    return {\n        numPages,\n        numPagesLoaded,\n        outline,\n        outlinePositions,\n        pageDimensions,\n        pdfDocProxy,\n        getOutlineTargets,\n        setNumPages,\n        setNumPagesLoaded,\n        setOutline,\n        setOutlinePositions,\n        setPageDimensions: setPageDimensions,\n        setPdfDocProxy,\n    };\n}\nfunction buildOutlinePositions(pdfDocProxy, outline) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!outline) {\n            outline = yield pdfDocProxy.getOutline();\n        }\n        // Depth first search through outline items\n        const itemQueue = outline.slice();\n        const proms = [];\n        while (itemQueue.length > 0) {\n            const item = itemQueue.pop();\n            if (!item) {\n                continue; // Not able to process\n            }\n            const { dest, items } = item;\n            // Add child items to queue\n            if (Array.isArray(items)) {\n                itemQueue.push(...items);\n            }\n            // Fetch destinations for item\n            if (Array.isArray(dest)) {\n                proms.push(...dest.map(dest => getDestination(pdfDocProxy, dest)));\n            }\n            else if (typeof dest === \'string\') {\n                proms.push(getDestination(pdfDocProxy, dest));\n            }\n        }\n        // Collect results all at once, so we don\'t have to pay for the cost of\n        // queueing messages sent to the worker\n        const results = yield Promise.all(proms);\n        // Split results into pages\n        const map = new Map();\n        for (const result of results) {\n            if (!result) {\n                continue; // Filter out null\n            }\n            const { pageNumber } = result;\n            if (!map.has(pageNumber)) {\n                map.set(pageNumber, []);\n            }\n            (_a = map.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.push(result);\n        }\n        // Freeze objects so consumers cannot mutate\n        for (const pagePos of map.values()) {\n            for (const pos of pagePos) {\n                Object.freeze(pos);\n            }\n            Object.freeze(pagePos);\n        }\n        Object.freeze(map);\n        return map;\n    });\n}\nfunction getDestination(pdfDocProxy, dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const result = yield pdfDocProxy.getDestination(dest);\n        if (!result) {\n            return null;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [ref, _format, leftPoint, bottomPoint] = result;\n        const pageIndex = yield pdfDocProxy.getPageIndex(ref);\n        const pageNumber = pageIndex + 1;\n        return { pageNumber, dest, leftPoint, bottomPoint };\n    });\n}\n\n;// CONCATENATED MODULE: ./src/context/TransformContext.ts\n\n\n\nconst DEFAULT_ZOOM_SCALE = 1.0;\nconst TransformContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    pixelRatio: (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1,\n    rotation: PageRotation.Rotate0,\n    scale: 1,\n    zoomIncrementValue: 0.2,\n    setPixelRatio: pixelRatio => {\n        logProviderWarning(`setPixelRatio(${pixelRatio})`, \'TransformContext\');\n    },\n    setRotation: rotation => {\n        logProviderWarning(`setRotation(${rotation})`, \'TransformContext\');\n    },\n    setScale: scale => {\n        logProviderWarning(`setScale(${scale})`, \'TransformContext\');\n    },\n    setZoomIncrementValue: value => {\n        logProviderWarning(`setZoomIncrementValue(${value})`, \'TransformContext\');\n    },\n});\nfunction useTransformContextProps() {\n    const [pixelRatio, setPixelRatio] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState((typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1);\n    const [rotation, setRotation] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(PageRotation.Rotate0);\n    const [scale, setScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_ZOOM_SCALE);\n    const [zoomIncrementValue, setZoomIncrementValue] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0.2);\n    return {\n        pixelRatio,\n        rotation,\n        scale,\n        setPixelRatio,\n        setRotation,\n        setScale,\n        zoomIncrementValue,\n        setZoomIncrementValue,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/utils/style.ts\n\n// Computes the style for a bounding box, accounting for page roation and page scaling/zoom\nfunction computeBoundingBoxStyle(boundingBoxSize, pageDimensions, rotation, scale) {\n    const { top, left, height, width } = boundingBoxSize;\n    switch (rotation) {\n        case PageRotation.Rotate90:\n            return {\n                top: left * scale,\n                left: (pageDimensions.height - height - top) * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        case PageRotation.Rotate180:\n            return {\n                top: (pageDimensions.height - height - top) * scale,\n                left: (pageDimensions.width - width - left) * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n        case PageRotation.Rotate270:\n            return {\n                top: (pageDimensions.width - width - left) * scale,\n                left: top * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        default:\n            return {\n                top: top * scale,\n                left: left * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n    }\n}\n// Compute the style for a page, accounting for page rotation and page scaling/zoom\nfunction computePageStyle(pageDimensions, rotation, scale) {\n    return {\n        height: getPageHeight(pageDimensions, rotation) * scale,\n        width: getPageWidth(pageDimensions, rotation) * scale,\n        left: 0,\n        top: 0,\n    };\n}\n// Get page height accounting for page rotation- if the page is rotated on its side, its width becomes its height\nfunction getPageHeight(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.width : pageDimensions.height;\n}\n// Get page width accounting for page rotation- if the page is rotated on its side, its height becomes its width\nfunction getPageWidth(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.height : pageDimensions.width;\n}\n\n;// CONCATENATED MODULE: ./src/components/BoundingBox.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\nconst BoundingBox = (_a) => {\n    var { top, left, height, width, className, underlineClassName, id, isHighlighted, onClick, voiceOverLabel } = _a, extraProps = __rest(_a, ["top", "left", "height", "width", "className", "underlineClassName", "id", "isHighlighted", "onClick", "voiceOverLabel"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const boxSize = { top, left, height, width };\n    const componentClassName = classnames_default()(\'pdf-reader__overlay-bounding-box\', isHighlighted === true ? \'pdf-reader__overlay-bounding-box-highlighted\' : \'\', className);\n    const getBoundingBoxStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computeBoundingBoxStyle(boxSize, pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    const rotationClassName = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return `rotate${rotation}`;\n    }, [rotation]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_commonjs_react_commonjs2_react_amd_react_root_React_.Fragment, null,\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: `pdf-reader__overlay-bounding-box-underline ${underlineClassName || rotationClassName()}`, style: getBoundingBoxStyle() }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: id, className: `${componentClassName} ${rotationClassName()}`, style: getBoundingBoxStyle(), onClick: onClick, role: "button", tabIndex: 0, "aria-label": voiceOverLabel }, extraProps))));\n};\n\n// EXTERNAL MODULE: external "react-pdf"\nvar external_react_pdf_ = __webpack_require__(323);\n;// CONCATENATED MODULE: ./src/utils/ScrollDirectionDetector.ts\nvar ScrollDirection;\n(function (ScrollDirection) {\n    ScrollDirection["UP"] = "UP";\n    ScrollDirection["DOWN"] = "DOWN";\n})(ScrollDirection || (ScrollDirection = {}));\nclass ScrollDetector {\n    constructor(el, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold) {\n        this._onScroll = () => {\n            const currScrollTop = this._el.scrollTop;\n            if (this._isAtTop !== (currScrollTop === 0)) {\n                this._isAtTop = currScrollTop === 0;\n                this._setIsAtTop(currScrollTop === 0);\n            }\n            if (this._lastScrollTop === currScrollTop) {\n                return;\n            }\n            // Determine direction\n            const currScrollDirection = (() => {\n                if (currScrollTop <= 0) {\n                    return ScrollDirection.DOWN;\n                }\n                return this._lastScrollTop < currScrollTop ? ScrollDirection.DOWN : ScrollDirection.UP;\n            })();\n            // Update state, if changed\n            this._lastScrollTop = currScrollTop;\n            if (this._lastScrollDirection !== currScrollDirection) {\n                this._lastScrollDirection = currScrollDirection;\n                this._setScrollDirection(currScrollDirection);\n                this._lastScrollTopBeforeDirectionChange = currScrollTop;\n                this._isScrollThresholdReachedInDirection = null;\n                if (this._setScrollThresholdReachedInDirection && !this._isAtTop) {\n                    this._setScrollThresholdReachedInDirection(null);\n                }\n            }\n            else {\n                if (this._scrollThreshold && this._setScrollThresholdReachedInDirection) {\n                    const scrolledAmount = Math.abs(this._lastScrollTopBeforeDirectionChange - currScrollTop);\n                    if (scrolledAmount >= this._scrollThreshold) {\n                        this._isScrollThresholdReachedInDirection = this._lastScrollDirection;\n                        this._setScrollThresholdReachedInDirection(this._lastScrollDirection);\n                    }\n                }\n            }\n        };\n        this._el = el;\n        this._lastScrollTop = this._el.scrollTop;\n        this._lastScrollDirection = null;\n        this._setScrollDirection = setScrollDirection;\n        this._isAtTop = null;\n        this._setIsAtTop = setIsAtTop;\n        this._lastScrollTopBeforeDirectionChange = this._el.scrollTop;\n        this._scrollThreshold = scrollThreshold;\n        this._isScrollThresholdReachedInDirection = null;\n        this._setScrollThresholdReachedInDirection = setScrollThresholdReachedInDirection;\n    }\n    attachScrollListener() {\n        var _a, _b;\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\n            window.addEventListener(\'scroll\', this._onScroll, false);\n            return;\n        }\n        this._el.addEventListener(\'scroll\', this._onScroll, false);\n    }\n    detachScrollListener() {\n        var _a, _b;\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\n            window.removeEventListener(\'scroll\', this._onScroll, false);\n            return;\n        }\n        this._el.removeEventListener(\'scroll\', this._onScroll, false);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/VisibleEntriesDetector.ts\nconst DEFAULT_ROOT_MARGIN = \'50px\';\nconst DEFAULT_THRESHOLD = Array.from({ length: 101 }).map((_, i) => i / 100);\nclass VisibleEntriesDetector {\n    constructor({ root, thresHold, setVisibleEntries, onVisibleEntriesChange, }) {\n        var _a;\n        this._root = root;\n        this._lastVisibleEntries = new Map();\n        this._setVisibleEntries = setVisibleEntries;\n        this._onVisibleEntriesChange = onVisibleEntriesChange;\n        this._observer = new IntersectionObserver(entries => {\n            // Collect visible and hidden elements\n            const visibleEntries = entries.filter(entry => entry.isIntersecting);\n            const hiddenEntries = entries.filter(entry => !entry.isIntersecting);\n            // Determine what needs saved\n            const newVisibleEntries = this._onVisibleEntriesChange({\n                visibleEntries,\n                hiddenEntries,\n                lastEntries: this._lastVisibleEntries,\n            });\n            const frozenEntries = new Map(newVisibleEntries);\n            Object.freeze(frozenEntries);\n            this._lastVisibleEntries = frozenEntries;\n            this._setVisibleEntries(frozenEntries);\n        }, \n        // Default setting for intersection observer\n        {\n            root: ((_a = this._root.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \'html\' ? null : this._root,\n            rootMargin: DEFAULT_ROOT_MARGIN,\n            threshold: thresHold ? thresHold : DEFAULT_THRESHOLD,\n        });\n    }\n    observeNodes(selector) {\n        for (const node of this._root.querySelectorAll(selector)) {\n            this._observer.observe(node);\n        }\n    }\n    destroy() {\n        this._observer.disconnect();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/context/ScrollContext.ts\n\n\n\n\n\nconst OUTLINE_ATTRIBUTE = \'data-outline-target-dest\';\nconst OUTLINE_SELECTOR = \'.pdf-reader__page__outline-target\';\nconst PAGE_NUMBER_ATTRIBUTE = \'data-page-number\';\nconst PAGE_NUMBER_SELECTOR = `.pdf-reader__page[${PAGE_NUMBER_ATTRIBUTE}]`;\nconst DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD = 0.1;\nconst EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP = Object.freeze(new Map());\nconst DEFAULT_CONTEXT = {\n    scrollDirection: null,\n    visibleOutlineTargets: new Map(),\n    visiblePageRatios: new Map(),\n    isOutlineTargetVisible: opts => {\n        logProviderWarning(`isOutlineTargetVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\n        return false;\n    },\n    isPageVisible: opts => {\n        logProviderWarning(`isPageVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\n        return false;\n    },\n    resetScrollObservers: () => {\n        logProviderWarning(`resetScrollObservers()`, \'ScrollContext\');\n    },\n    scrollRoot: {},\n    setScrollRoot: (_el) => {\n        logProviderWarning(`setScrollRoot(...)`, \'ScrollContext\');\n    },\n    scrollToOutlineTarget: dest => {\n        logProviderWarning(`scrollToOutlineTarget(${dest})`, \'ScrollContext\');\n    },\n    setScrollThreshold: (scrollThreshold) => {\n        logProviderWarning(`setScrollThreshold(${scrollThreshold})`, \'ScrollContext\');\n    },\n    scrollToPage: opts => {\n        logProviderWarning(`scrollToPage(${JSON.stringify(opts)})`, \'ScrollContext\');\n    },\n    updateScrollPosition: zoomMultiplier => {\n        logProviderWarning(`updateScrollPosition(${JSON.stringify(zoomMultiplier)})`, \'ScrollContext\');\n    },\n    setIsOutlineClicked: opts => {\n        logProviderWarning(`setIsOutlineGetClicked(${JSON.stringify(opts)})`, \'ScrollContext\');\n    },\n    scrollThresholdReachedInDirection: null,\n    isAtTop: null,\n    isOutlineClicked: null,\n    pagesScrolledIntoView: new Map(),\n    setPageScrolledIntoViewThreshold: (threshold) => {\n        logProviderWarning(`pagesScrolledIntoView(${threshold})`, \'ScrollContext\');\n    },\n};\nconst ScrollContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext(DEFAULT_CONTEXT);\nfunction useScrollContextProps() {\n    // Node used for observing the scroll position\n    const [scrollRoot, setScrollRoot] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    // Determine scroll direction\n    const [scrollDirection, setScrollDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [scrollThreshold, setScrollThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [scrollThresholdReachedInDirection, setScrollThresholdReachedInDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isAtTop, setIsAtTop] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isOutlineClicked, setIsOutlineClicked] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [pageScrolledIntoViewThreshold, setPageScrolledIntoViewThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD);\n    const [pagesScrolledIntoView, setPagesScrolledIntoView] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const scrollElem = scrollRoot || document.documentElement;\n        if (!scrollElem) {\n            return;\n        }\n        let scrollDirectionDetector;\n        if (!scrollThreshold) {\n            // scroll threshold is optional\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop);\n        }\n        else {\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold);\n        }\n        scrollDirectionDetector.attachScrollListener();\n        return () => {\n            scrollDirectionDetector.detachScrollListener();\n        };\n    }, [scrollRoot, scrollThreshold]);\n    // Causes the IntersectionObservers to disconnect and be recreated (useful when DOM changes)\n    const [observerIndex, setObserverIndex] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const resetScrollObservers = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        setObserverIndex(observerIndex + 1);\n    }, [observerIndex]);\n    const [visibleOutlineTargets, setVisibleOutlineNodes] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\n        const map = new Map();\n        Object.freeze(map);\n        return map;\n    });\n    const [visiblePageRatios, setVisiblePageRatios] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\n    const isOutlineTargetVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        return visibleOutlineTargets.has(dest);\n    }, [visibleOutlineTargets]);\n    const scrollToOutlineTarget = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        var _a;\n        setIsOutlineClicked(true);\n        (_a = document\n            .querySelector(`[data-outline-target-dest="${dest}"]`)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\n    }, []);\n    const isPageVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return false;\n        }\n        return visiblePageRatios.has(pageNumber);\n    }, [visiblePageRatios]);\n    const scrollToPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageNumber === \'number\') {\n            pageIndex = pageNumber - 1;\n        }\n        if (typeof pageIndex !== \'number\') {\n            return;\n        }\n        (_a = document\n            .getElementById(generatePageIdFromIndex(pageIndex))) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\n    }, []);\n    // Watch outline nodes\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            setVisibleEntries: setVisibleOutlineNodes,\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\n                hiddenEntries.map(entry => lastEntries.delete(entry.target.getAttribute(OUTLINE_ATTRIBUTE)));\n                const newEntries = new Map(lastEntries);\n                visibleEntries.map(entry => newEntries.set(entry.target.getAttribute(OUTLINE_ATTRIBUTE), {\n                    ratio: entry.intersectionRatio,\n                    timestamp: entry.time,\n                }));\n                return newEntries;\n            },\n        });\n        detector.observeNodes(OUTLINE_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // Watch pages\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            setVisibleEntries: setVisiblePageRatios,\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\n                if (hiddenEntries.length) {\n                    const maxTime = Math.max(...hiddenEntries.map(e => e.time));\n                    const hiddenPageNums = hiddenEntries.map(e => { var _a; return ((_a = e.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\'; });\n                    // due to upper limit on how fast the Intersection Observer API can sample and how fast browsers can render (happens when users scroll fast)\n                    // sometimes entries will not be signaled as hidden, meaning they should be removed from lastEntries but weren\'t\n                    // so if an entry has a timestamp thats older then an entry we are currently removing, we can assume its "stale" and delete\n                    // more details about this issue here: https://stackoverflow.com/questions/61951380/intersection-observer-fails-sometimes-when-i-scroll-fast\n                    for (const [key, value] of lastEntries.entries()) {\n                        if (value.timestamp <= maxTime || hiddenPageNums.includes(String(key))) {\n                            lastEntries.delete(key);\n                        }\n                    }\n                }\n                const newEntries = new Map(lastEntries);\n                visibleEntries.map(entry => {\n                    var _a;\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), {\n                        ratio: entry.intersectionRatio,\n                        timestamp: entry.time,\n                    });\n                });\n                return newEntries;\n            },\n        });\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // map of pages at the moment they are scrolled into view, useful for tracking analytics such as page impressions\n    // different than the visiblePageRatios in that it only saves the ~initial~ point of when a page comes into view\n    // it doesn\'t track the live change in ratios as the page remains in view when scrolled\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            thresHold: pageScrolledIntoViewThreshold,\n            setVisibleEntries: setPagesScrolledIntoView,\n            onVisibleEntriesChange: ({ visibleEntries }) => {\n                const newEntries = new Map();\n                visibleEntries.map(entry => {\n                    var _a;\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), entry.intersectionRatio);\n                });\n                return newEntries;\n            },\n        });\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // calculates a new scroll position after zooming in/out so user doesnt lose their position\n    const updateScrollPosition = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((zoomMultiplier) => {\n        const root = scrollRoot || document.documentElement;\n        if (!root) {\n            return;\n        }\n        const newScrollTop = Math.floor(root.scrollTop * zoomMultiplier);\n        setTimeout(() => {\n            root.scrollTop = newScrollTop;\n        }, 0);\n    }, [scrollRoot]);\n    return {\n        isOutlineTargetVisible,\n        isPageVisible,\n        scrollDirection,\n        visibleOutlineTargets,\n        visiblePageRatios,\n        resetScrollObservers,\n        scrollRoot,\n        setScrollRoot,\n        scrollToOutlineTarget,\n        setScrollThreshold,\n        scrollToPage,\n        updateScrollPosition,\n        setIsOutlineClicked,\n        scrollThresholdReachedInDirection,\n        isAtTop,\n        isOutlineClicked,\n        pagesScrolledIntoView,\n        setPageScrolledIntoViewThreshold,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/context/UiContext.ts\n\n\nconst UiContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    errorMessage: null,\n    isLoading: false,\n    isShowingHighlightOverlay: false,\n    isShowingOutline: false,\n    isShowingTextHighlight: false,\n    isShowingThumbnail: false,\n    setErrorMessage: errorMessage => {\n        logProviderWarning(`setErrorMessage(${errorMessage})`, \'UiContext\');\n    },\n    setIsShowingOutline: isShowingOutline => {\n        logProviderWarning(`setIsShowingOutline(${isShowingOutline})`, \'UiContext\');\n    },\n    setIsLoading: isLoading => {\n        logProviderWarning(`setIsLoading(${isLoading})`, \'UiContext\');\n    },\n    setIsShowingHighlightOverlay: isShowingHighlightOverlay => {\n        logProviderWarning(`setIsShowingHighlightOverlay(${isShowingHighlightOverlay})`, \'UiContext\');\n    },\n    setIsShowingTextHighlight: isShowingTextHighlight => {\n        logProviderWarning(`setIsShowingTextHighlight(${isShowingTextHighlight})`, \'UiContext\');\n    },\n    setIsShowingThumbnail: isShowingThumbnail => {\n        logProviderWarning(`setIsShowingThumbnail(${isShowingThumbnail})`, \'UiContext\');\n    },\n});\nfunction useUiContextProps() {\n    const [errorMessage, setErrorMessage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isLoading, setIsLoading] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(true);\n    const [isShowingHighlightOverlay, setIsShowingHighlightOverlay] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingOutline, setIsShowingOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingTextHighlight, setIsShowingTextHighlight] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingThumbnail, setIsShowingThumbnail] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    return {\n        errorMessage,\n        isLoading,\n        isShowingHighlightOverlay,\n        isShowingOutline,\n        isShowingTextHighlight,\n        isShowingThumbnail,\n        setErrorMessage,\n        setIsLoading,\n        setIsShowingHighlightOverlay,\n        setIsShowingOutline,\n        setIsShowingTextHighlight,\n        setIsShowingThumbnail,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/utils/errorMessage.ts\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getErrorMessage(error) {\n    if (!error) {\n        return \'Unknown error\';\n    }\n    if (typeof error === \'string\') {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    if (typeof error.error === \'string\') {\n        return error.error;\n    }\n    return error.toString();\n}\n\n;// CONCATENATED MODULE: ./src/utils/pdfWorker.ts\n\n// Set PDFjs worker source or else PDF will not load when this library is imported as a package.\nfunction initPdfWorker() {\n    external_react_pdf_.pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${external_react_pdf_.pdfjs.version}/pdf.worker.min.js`;\n}\n\n;// CONCATENATED MODULE: ./src/utils/reader-utils.ts\nconst RENDER_TYPE = {\n    MULTI_CANVAS: \'multi-canvas\',\n    SINGLE_CANVAS: \'single-canvas\',\n};\nfunction getRenderMode(renderType) {\n    switch (renderType) {\n        case RENDER_TYPE.SINGLE_CANVAS:\n            return \'none\';\n        default:\n            return \'canvas\';\n    }\n}\nfunction getClassNameSuffixFromRenderType(renderType) {\n    switch (renderType) {\n        case RENDER_TYPE.SINGLE_CANVAS:\n            return \'single-canvas\';\n        default:\n            return \'multi-canvas\';\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/scale.ts\n// We assume 96 DPI for display\n// TODO: There are more accurate ways to do this, but this is what ScholarPhi does now\nconst DPI = 96;\n// PDF units are in 1/72nds of an inch\nconst USER_UNIT_DENOMINATOR = 72;\n/**\n * Given a PDFPageProxy, calculates the screen pixel size of the PDF page at 100% scale\n * @param page The PDFPageProxy to calculate size for\n * @returns Pixel size of a page at 100% scale assuming 96DPI display\n */\nfunction computePageDimensions(page) {\n    const [leftPx, topPx, rightPx, bottomPx] = page.view;\n    const PPI = (page.userUnit / USER_UNIT_DENOMINATOR) * DPI;\n    return {\n        height: (bottomPx - topPx) * PPI,\n        width: (rightPx - leftPx) * PPI,\n    };\n}\n\n;// CONCATENATED MODULE: ./src/components/types/destination.ts\n/**\n * This class is the definition of the first item when Destination is returned as an array.\n * It is created based on the same class in \'react-pdf\' library:\n * https://github.com/wojtekmaj/react-pdf/blob/ca4453f123af51e2faed39a8a62800901030459a/src/Ref.js\n */\nclass Ref {\n    constructor({ num, gen }) {\n        this.num = num;\n        this.gen = gen;\n    }\n    toString() {\n        return this.gen !== 0 ? `${this.num}R${this.gen}` : `${this.num}R`;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/DocumentWrapper.tsx\nvar DocumentWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nconst DocumentWrapper = (_a) => {\n    var { children, renderType } = _a, extraProps = DocumentWrapper_rest(_a, ["children", "renderType"]);\n    initPdfWorker();\n    const { pdfDocProxy, setNumPages, setNumPagesLoaded, setPageDimensions, setPdfDocProxy } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { resetScrollObservers, updateScrollPosition } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const { setErrorMessage, setIsLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\n    const [lastScale, setLastScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(1); // assuming the scale defaults to 100%\n    function getFirstPage(pdfDoc) {\n        // getPage uses 1-indexed pageNumber, not 0-indexed pageIndex\n        return pdfDoc.getPage(1);\n    }\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        resetScrollObservers();\n    }, []);\n    // after scale changes, update scroll position so the user stays looking at the same position of the paper\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (scale === lastScale) {\n            return;\n        }\n        const zoomMultiplier = scale / lastScale;\n        updateScrollPosition(zoomMultiplier);\n        setLastScale(scale);\n    }, [scale, updateScrollPosition]);\n    const onPdfLoadSuccess = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pdfDoc) => {\n        setNumPagesLoaded(0);\n        setNumPages(pdfDoc.numPages);\n        getFirstPage(pdfDoc)\n            .then(page => {\n            setPageDimensions(computePageDimensions(page));\n            setErrorMessage(null);\n        })\n            .catch(error => {\n            setErrorMessage(getErrorMessage(error));\n        })\n            .finally(() => {\n            setIsLoading(false);\n        });\n        if (!pdfDocProxy) {\n            setPdfDocProxy(pdfDoc);\n        }\n    }, []);\n    const onPdfLoadError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\n        setErrorMessage(getErrorMessage(error));\n        setIsLoading(false);\n    }, []);\n    const onItemClicked = (param) => {\n        if (!pdfDocProxy) {\n            return;\n        }\n        // Scroll to the destination of the item\n        pdfDocProxy.getDestination(param.dest).then(destArray => {\n            if (!destArray) {\n                return;\n            }\n            const [ref, , , bottomPoints] = destArray;\n            pdfDocProxy.getPageIndex(new Ref(ref)).then(refInfo => {\n                scrollToPosition(parseInt(refInfo.toString()), 0, bottomPoints, rotation);\n            });\n        });\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Document, Object.assign({ options: { cMapUrl: \'cmaps/\', cMapPacked: true }, onLoadError: onPdfLoadError, onLoadSuccess: onPdfLoadSuccess, externalLinkTarget: "_blank", renderMode: getRenderMode(renderType), \n        // @ts-ignore: the arguments should be { dest, pageIndex, pageNumber }\n        // @types/react-pdf hasn\'t updated the function signature\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d73eb652e0ba8f89395a0ef2ba69cf1e640ce5be/types/react-pdf/dist/Document.d.ts#L72\n        onItemClick: onItemClicked }, extraProps), children));\n};\n\n;// CONCATENATED MODULE: ./src/components/DownloadButton.tsx\nvar DownloadButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n/**\n * HTML anchor tag allows you to download a file from the same origin.\n * This is a workaround to download a file served from a different origin\n */\nconst DownloadButton = (_a) => {\n    var { pdfUrl, children, className } = _a, extraProps = DownloadButton_rest(_a, ["pdfUrl", "children", "className"]);\n    const [fetching, setFetching] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const download = () => {\n        setFetching(true);\n        fetch(pdfUrl)\n            .then(response => response.blob())\n            .then(blob => {\n            setFetching(false);\n            const blobURL = URL.createObjectURL(blob);\n            const a = document.createElement(\'a\');\n            a.href = blobURL;\n            a.download = pdfUrl.split(\'/\').pop() || pdfUrl;\n            document.body.appendChild(a);\n            a.click();\n        });\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ disabled: fetching, onClick: () => download(), "aria-label": "Download PDF", className: `pdf-reader__download-btn ${className}` }, extraProps), children ? children : \'Download\'));\n};\n\n;// CONCATENATED MODULE: ./src/components/HighlightOverlay.tsx\nvar HighlightOverlay_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst HighlightOverlay = (_a) => {\n    var { children, pageIndex } = _a, extraProps = HighlightOverlay_rest(_a, ["children", "pageIndex"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const maskId = `highlight-overlay-mask-${pageIndex}`;\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    const getUnmaskedArea = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((boundingBoxes) => {\n        const boxes = Array.isArray(boundingBoxes) ? boundingBoxes : [boundingBoxes];\n        return boxes.map((box, i) => {\n            const boxStyle = computeBoundingBoxStyle(box.props, pageDimensions, rotation, scale);\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: boxStyle, x: boxStyle.left, y: boxStyle.top, key: i, fill: "black" }));\n        });\n    }, [pageDimensions, rotation, scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__page-highlight-overlay", style: getPageStyle() }, extraProps),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { className: "page-mask", style: getPageStyle() },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("mask", { id: maskId },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white" }),\n                children && getUnmaskedArea(children)),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white", opacity: "0.6", mask: `url(#${maskId})` }))));\n};\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlagBase.tsx\nvar ArrowFlagBase_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\nconst POSITION = {\n    LEFT: \'LEFT\',\n    RIGHT: \'RIGHT\',\n};\nconst DEFAULT_ORIGIN_TOP_PX = 0;\nconst DEFAULT_FLAG_WIDTH_PX = 75;\nconst DEFAULT_FLAG_HEIGHT_PX = 20;\nconst DEFAULT_TAIL_LENGTH_PX = 40;\nconst DEFAULT_TAIL_WIDTH_PX = 7;\nconst ArrowFlagBase = (_a) => {\n    var { className, label, flagWidth, originTop, position = POSITION.LEFT, tailLength, tailWidgth } = _a, extraProps = ArrowFlagBase_rest(_a, ["className", "label", "flagWidth", "originTop", "position", "tailLength", "tailWidgth"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    // function for scaling bounding boxes based on current document states\n    const computeSize = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((box) => computeBoundingBoxStyle(box, pageDimensions, rotation, scale), [pageDimensions, rotation, scale, originTop]);\n    // bounding box of the flag\n    const flagSize = {\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\n        left: 0,\n        height: DEFAULT_FLAG_HEIGHT_PX,\n        width: flagWidth || DEFAULT_FLAG_WIDTH_PX,\n    };\n    // bounding box of the tail\n    const tailSize = {\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\n        left: 0,\n        height: tailLength || DEFAULT_TAIL_LENGTH_PX,\n        width: tailWidgth || DEFAULT_TAIL_WIDTH_PX,\n    };\n    const computedFlagSize = computeSize(flagSize);\n    const computedTailSize = computeSize(tailSize);\n    const tailPosition = {\n        top: computedTailSize.top,\n        left: position === POSITION.LEFT ? -computedTailSize.width : pageDimensions.width * scale,\n        height: computedTailSize.height,\n        width: computedTailSize.width,\n    };\n    const renderFlag = () => {\n        const { top, width, height } = computedFlagSize;\n        const flagPosition = {\n            top,\n            height,\n            width,\n            left: position === POSITION.LEFT\n                ? -computedTailSize.width\n                : tailPosition.left + tailPosition.width - width + 1,\n        };\n        const labelPosition = position === POSITION.LEFT ? \'47%\' : \'53%\';\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__flag", style: flagPosition },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(IconFlag, { className: "pdf-reader__arrow-flag-base__flag-icon", headerPosition: position },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("text", { x: labelPosition, y: "54%", dominantBaseline: "middle", textAnchor: "middle", className: "pdf-reader__arrow-flag-base__flag-label" }, label))));\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag-base\', className) }, extraProps),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__tail", style: tailPosition }),\n        label && renderFlag()));\n};\n\n;// CONCATENATED MODULE: ./src/components/icon/IconFlag.tsx\n\n\nconst IconFlag = ({ children, className, headerPosition = POSITION.LEFT, }) => {\n    if (headerPosition == POSITION.LEFT) {\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 75 22", className: className },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M64.5203 20.8331L64.52 20.8334C64.0669 21.2535 63.4743 21.491 62.8565 21.5H3C2.33696 21.5 1.70107 21.2366 1.23223 20.7678C0.763392 20.2989 0.5 19.663 0.5 19V3C0.5 2.33696 0.763392 1.70107 1.23223 1.23223C1.70107 0.763391 2.33696 0.5 3 0.5H62.7765C63.3943 0.508999 63.9869 0.746454 64.44 1.16662L64.4403 1.16688L73.0803 9.16688L73.0802 9.16694L73.0869 9.17284C73.3436 9.40224 73.5502 9.6822 73.6937 9.99518C73.8372 10.3082 73.9145 10.6474 73.9207 10.9916C73.927 11.3359 73.862 11.6777 73.73 11.9957C73.5986 12.3123 73.4035 12.5984 73.1568 12.8364C73.1557 12.8374 73.1546 12.8385 73.1535 12.8395L64.5203 20.8331Z" }),\n            children));\n    }\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 75 22", className: className },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M9.90061 1.16688L9.90088 1.16662C10.354 0.746447 10.9466 0.508993 11.5644 0.499998L71.4209 0.500004C72.0839 0.500004 72.7198 0.763395 73.1887 1.23223C73.6575 1.70107 73.9209 2.33696 73.9209 3L73.9209 19C73.9209 19.663 73.6575 20.2989 73.1887 20.7678C72.7198 21.2366 72.0839 21.5 71.4209 21.5L11.6444 21.5C11.0266 21.491 10.434 21.2535 9.98088 20.8334L9.98061 20.8331L1.34061 12.8331L1.34066 12.8331L1.33405 12.8272C1.07732 12.5977 0.870728 12.3178 0.727235 12.0048C0.583749 11.6918 0.506448 11.3526 0.500192 11.0084C0.493936 10.6641 0.558854 10.3223 0.690866 10.0043C0.822305 9.68773 1.01744 9.40156 1.26415 9.1636C1.26522 9.16256 1.26631 9.16152 1.26738 9.16048L9.90061 1.16688Z" }),\n        children));\n};\n\n;// CONCATENATED MODULE: ./src/components/types/boundingBox.ts\n// Calculate a bounding box\'s pixel coordinates from the raw bounding box\'s coorditate ratios scaled to the page size\nfunction scaleRawBoundingBox(boundingBoxRaw, pageHeight, pageWidth) {\n    const boxScaled = {\n        page: boundingBoxRaw.page,\n        top: boundingBoxRaw.top * pageHeight,\n        left: boundingBoxRaw.left * pageWidth,\n        height: boundingBoxRaw.height * pageHeight,\n        width: boundingBoxRaw.width * pageWidth,\n    };\n    return boxScaled;\n}\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlag.tsx\nvar ArrowFlag_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\nconst CENTER_LINE = 0.5;\nconst LINE_HEIGHT_MULTIPLIER = 1.5;\nconst ArrowFlag = (_a) => {\n    var { boundingBoxes, className, label } = _a, extraProps = ArrowFlag_rest(_a, ["boundingBoxes", "className", "label"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const convertRatioToPx = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((rawBoundingBox) => scaleRawBoundingBox(rawBoundingBox, pageDimensions.height, pageDimensions.width), [pageDimensions]);\n    if (boundingBoxes.length == 0)\n        return null;\n    // If any bounding boxes span over the center line, we know that either the paper is\n    // single-column or a mix of single-column and two-column. In such case, bounding\n    // boxes will not be divided so as to guarantee only 1 flag is rendered on the left side.\n    const hasWideBox = boundingBoxes.some(({ left, width }) => left < CENTER_LINE && left + width >= CENTER_LINE);\n    let leftBoundingBoxes = boundingBoxes, rightBoundingBoxes = [];\n    if (!hasWideBox) {\n        leftBoundingBoxes = boundingBoxes.filter(({ left }) => left < CENTER_LINE);\n        rightBoundingBoxes = boundingBoxes.filter(({ left }) => left >= CENTER_LINE);\n    }\n    // To handle a special case where the previous bounding box is on the right while\n    // the later is on the left. In such case, there are only 2 bounding boxes.\n    // The vertical distance between the two boxes is used to differentiate whether this case\n    // happens on a single-column paper or a two-column paper. If it\'s the previous, then\n    // the whole flag should appear on the left. Both bounding boxes will be categorized\n    // as leftBoundingBoxes. Otherwise, the tail wrapping still applies.\n    if (leftBoundingBoxes.length === 1 && rightBoundingBoxes.length === 1) {\n        // If the vertical difference between the two boxes is smaller then 1.5 times line height,\n        // the paper is categorized as single-column. Both bounding boxes are set to leftBoundingBoxes.\n        // ArrowFlag will appear on the left\n        if (Math.abs(rightBoundingBoxes[0].top - leftBoundingBoxes[0].top) <\n            LINE_HEIGHT_MULTIPLIER * rightBoundingBoxes[0].height) {\n            leftBoundingBoxes = boundingBoxes;\n            rightBoundingBoxes = [];\n        }\n    }\n    // Sort bounding boxes by their top positions\n    leftBoundingBoxes.sort((first, second) => first.top - second.top);\n    rightBoundingBoxes.sort((first, second) => first.top - second.top);\n    const renderArrowFlagBase = (boxes, position, showLabel) => {\n        if (boxes.length == 0)\n            return null;\n        const firstBox = convertRatioToPx(boxes[0]), lastBox = convertRatioToPx(boxes[boxes.length - 1]);\n        const props = {\n            label: showLabel ? label : undefined,\n            tailLength: lastBox.top + lastBox.height - firstBox.top,\n            originTop: firstBox.top,\n            position,\n        };\n        return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ArrowFlagBase, Object.assign({}, props));\n    };\n    const hasLeftFlag = leftBoundingBoxes.length > 0;\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag\', className) }, extraProps),\n        renderArrowFlagBase(leftBoundingBoxes, POSITION.LEFT, hasLeftFlag),\n        renderArrowFlagBase(rightBoundingBoxes, POSITION.RIGHT, !hasLeftFlag)));\n};\n\n;// CONCATENATED MODULE: ./src/components/outline/OutlineItem.tsx\n\n\n\nconst OutlineItem = ({ items, onClick }) => {\n    const { isOutlineTargetVisible } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    if (!items || !items.length) {\n        return null;\n    }\n    function renderItem(item) {\n        var _a;\n        const clickHandler = (event) => {\n            event.preventDefault();\n            if (onClick) {\n                onClick(item.dest);\n            }\n        };\n        // If an item has sub titles, render <OutlineItem />\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: ((_a = item.dest) === null || _a === void 0 ? void 0 : _a.toString()) || item.title, className: classnames_default()(\'reader__outline-item\', {\n                \'reader__outline-item--target-visible\': isOutlineTargetVisible(item.dest),\n            }) },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { href: "#", onClick: clickHandler, "data-test-id": "reader-outline-item" }, item.title),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: item.items, onClick: onClick })));\n    }\n    return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "reader__outline-items" }, items.map(item => renderItem(item)));\n};\n\n;// CONCATENATED MODULE: ./src/components/outline/Outline.tsx\nvar Outline_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst Outline = (_a) => {\n    var extraProps = Outline_rest(_a, []);\n    const { outline, pdfDocProxy, setOutline, setOutlinePositions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { scrollToOutlineTarget, resetScrollObservers } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (outline) {\n            return;\n        }\n        if (!pdfDocProxy) {\n            return;\n        }\n        pdfDocProxy\n            .getOutline()\n            .then((outlineArray) => {\n            setOutline(outlineArray);\n            return buildOutlinePositions(pdfDocProxy, outlineArray);\n        })\n            .then(outlinePositions => {\n            setOutlinePositions(outlinePositions);\n        })\n            .then(() => {\n            resetScrollObservers();\n        });\n    }, [outline]);\n    const clickHandler = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        if (!dest) {\n            return;\n        }\n        scrollToOutlineTarget(dest);\n        return;\n    }, []);\n    if (!pdfDocProxy) {\n        return null;\n    }\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "reader__outline" }, extraProps), !!outline && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: outline, onClick: clickHandler })));\n};\n\n;// CONCATENATED MODULE: ./src/components/Overlay.tsx\nvar Overlay_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst Overlay = (_a) => {\n    var { children } = _a, extraProps = Overlay_rest(_a, ["children"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const getOverlayStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__overlay", style: getOverlayStyle() }, extraProps), children));\n};\n\n;// CONCATENATED MODULE: ./src/utils/MaxVisibleElement.ts\nfunction getMaxVisibleElement(visibleElements) {\n    let maxVisibleKey = null;\n    let maxRatio = 0;\n    for (const [visibleKey, { ratio }] of visibleElements) {\n        if (maxRatio < ratio) {\n            maxVisibleKey = visibleKey;\n            maxRatio = ratio;\n        }\n    }\n    return maxVisibleKey;\n}\n\n;// CONCATENATED MODULE: ./src/components/PageNumberControl.tsx\n\n\n\n\n\nconst DELAY_SCROLL_TIME_OUT_MS = 1000;\nconst PageNumberControl = ({ className }) => {\n    const delayTimerRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef();\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const [minPage, setMinPage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [userInput, setUserInput] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(\'0\');\n    // Initialize page control element\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (numPages != 0) {\n            setMinPage(1);\n        }\n    }, [numPages]);\n    // Everytime we scroll through the page this useEffect\n    // will trigger and set current page based on our current\n    // scroll position\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (visiblePageRatios.size !== 0) {\n            const maxVisiblePageNumber = getMaxVisibleElement(visiblePageRatios);\n            if (maxVisiblePageNumber) {\n                setUserInput(maxVisiblePageNumber.toString());\n            }\n        }\n    }, [visiblePageRatios]);\n    const onPageNumberChange = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        const { value } = event.currentTarget;\n        // Decimal case\n        if (!Number.isInteger(value)) {\n            setUserInput(parseInt(value, 10).toString());\n        }\n        setUserInput(value);\n        if (delayTimerRef.current) {\n            clearTimeout(delayTimerRef.current);\n        }\n        // After user input the page that they want to scroll to\n        // our ref will start setting a delay around 1s before scroll\n        // to the position that user desire\n        const newPageNumber = parseInt(value, 10);\n        if (newPageNumber >= minPage && newPageNumber <= numPages) {\n            delayTimerRef.current = setTimeout(() => {\n                scrollToPage({ pageNumber: newPageNumber });\n            }, DELAY_SCROLL_TIME_OUT_MS);\n        }\n    }, [minPage, numPages, scrollToPage]);\n    const handleBlur = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        if (delayTimerRef.current) {\n            clearTimeout(delayTimerRef.current);\n        }\n        const pageNumber = parseInt(userInput, 10);\n        if (Number.isNaN(pageNumber)) {\n            return;\n        }\n        delayTimerRef.current = setTimeout(() => {\n            scrollToPage({ pageNumber: pageNumber });\n        }, DELAY_SCROLL_TIME_OUT_MS);\n    }, [userInput, scrollToPage]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page-number-control\', className) },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { "aria-label": "Current Page", className: "pdf-reader__page-number-control__current-page", type: "number", name: "currentPage", value: userInput, onChange: onPageNumberChange, onBlur: handleBlur }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { className: "pdf-reader__page-number-control__separator " }, "/"),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { "aria-label": "Total Pages", className: "pdf-reader__page-number-control__total-pages" }, numPages)));\n};\n\n;// CONCATENATED MODULE: ./src/context/PageRenderContext.ts\nvar PageRenderContext_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nconst PageRenderContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    pageRenderStates: new Map(),\n    getObjectURLForPage: args => {\n        logProviderWarning(`getObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return null;\n    },\n    isBuildingObjectURLForPage: args => {\n        logProviderWarning(`isBuildingObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return false;\n    },\n    isFinishedBuildingAllPagesObjectURLs: () => {\n        logProviderWarning(`isFinishedBuildingAllPagesObjectURLs()`, \'PageRenderContext\');\n        return false;\n    },\n    buildObjectURLForPage: args => {\n        logProviderWarning(`buildObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return Promise.resolve(\'\');\n    },\n});\nfunction usePageRenderContextProps({ pdfDocProxy, pixelRatio, scale, visiblePageRatios, }) {\n    const [pageRenderStates, _setPageRenderStates] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\n        const map = new Map();\n        Object.freeze(map);\n        return map;\n    });\n    // Because rendering a page is async, we will lose the current pageRenderStates\n    // This ref trick allows the latest to be accessible when the objectURL is ready\n    const pageRenderStatesRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(pageRenderStates);\n    const setPageRenderStates = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pageRenderStates) => {\n        pageRenderStatesRef.current = pageRenderStates;\n        _setPageRenderStates(pageRenderStates);\n    }, [pageRenderStatesRef]);\n    const isBuildingObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return false;\n        }\n        const state = pageRenderStates.get(pageNumber);\n        if (!state) {\n            return false;\n        }\n        return !state.objectURL;\n    }, [pageRenderStates]);\n    const isFinishedBuildingAllPagesObjectURLs = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        var _a;\n        if (!pdfDocProxy)\n            return false;\n        for (let pageNumber = 1; pageNumber <= pdfDocProxy.numPages; pageNumber++) {\n            if (!((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL)) {\n                return false;\n            }\n        }\n        return true;\n    }, [pdfDocProxy, pageRenderStates]);\n    const getObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return null;\n        }\n        return ((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL) || null;\n    }, [pageRenderStates]);\n    const buildObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            throw new Error(\'prop "pageNumber" is not a number\');\n        }\n        if (!pdfDocProxy) {\n            throw new Error(\'cannot build a page until a "pdfDocProxy" is set on DocumentContext\');\n        }\n        // Don\'t need to start another task if already rendered\n        const existingPromise = (_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.promise;\n        if (existingPromise) {\n            return existingPromise;\n        }\n        const promise = buildPageObjectURL({\n            pageNumber,\n            pdfDocProxy,\n            pixelRatio,\n            scale,\n            promiseTimestamp: flushTimestamp,\n        });\n        const renderState = {\n            promise,\n            objectURL: null,\n        };\n        promise.then(objectURL => {\n            if (!objectURL)\n                return;\n            renderState.objectURL = objectURL;\n            const newPageRenderStates = new Map(pageRenderStatesRef.current);\n            Object.freeze(newPageRenderStates);\n            setPageRenderStates(newPageRenderStates);\n        });\n        const newPageRenderStates = new Map(pageRenderStatesRef.current);\n        newPageRenderStates.set(pageNumber, renderState);\n        Object.freeze(newPageRenderStates);\n        setPageRenderStates(newPageRenderStates);\n        return promise;\n    }, [pageRenderStates, pdfDocProxy, scale]);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const visiblePages = [...visiblePageRatios.keys()];\n        if (!pdfDocProxy || [...pageRenderStates.keys()].length === pdfDocProxy.numPages) {\n            return;\n        }\n        const priorityQueue = getPriorityQueue(visiblePages, pdfDocProxy.numPages);\n        for (const pageNumber of priorityQueue) {\n            buildObjectURLForPage({ pageNumber });\n        }\n    }, [pageRenderStates, pdfDocProxy, visiblePageRatios]);\n    // Flush page render states when scale changes\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        // Clean memory of old generated images\n        for (const [, renderState] of pageRenderStatesRef.current) {\n            if (renderState.objectURL) {\n                URL.revokeObjectURL(renderState.objectURL);\n            }\n        }\n        // if current async promises dont have this timestamp, then we flush them\n        flushTimestamp = new Date().getTime();\n        // Clear all page render states, so pages can rebuild images\n        const newPageRenderStates = new Map();\n        Object.freeze(newPageRenderStates);\n        setPageRenderStates(newPageRenderStates);\n    }, [scale, pixelRatio]);\n    return {\n        pageRenderStates,\n        getObjectURLForPage,\n        isBuildingObjectURLForPage,\n        isFinishedBuildingAllPagesObjectURLs,\n        buildObjectURLForPage,\n    };\n}\nfunction getNeighboringPages(pages, numTotalPages) {\n    return pages.length === 0\n        ? []\n        : [Math.max(1, pages[0] - 1), Math.min(numTotalPages, pages[pages.length - 1] + 1)];\n}\nfunction getPriorityQueue(visiblePages, numPages) {\n    const visiblePagesNeighbors = getNeighboringPages(visiblePages, numPages);\n    const allPages = Array.from({ length: numPages }, (_, i) => i + 1);\n    const priorityQueue = new Set([...visiblePages, ...visiblePagesNeighbors, ...allPages]); // put into set to remove duplicats\n    return Array.from(priorityQueue); // convert set to array\n}\n// This boost causes the rendered image to be scaled up by this amount\nconst SCALE_BOOST = 2;\n// Generate an object url for a given page, rendered in a shared canvas\nfunction buildPageObjectURL({ pageNumber, pdfDocProxy, pixelRatio = (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 0, scale = 1, imageType = \'image/png\', imageQuality = 1.0, promiseTimestamp, }) {\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\n        const pageProxy = yield pdfDocProxy.getPage(pageNumber);\n        const blob = yield useRenderCanvas((canvas) => PageRenderContext_awaiter(this, void 0, void 0, function* () {\n            if (promiseTimestamp !== flushTimestamp) {\n                return promiseTimestamp; // flush stale promise\n            }\n            // Render page in a canvas\n            const viewport = pageProxy.getViewport({ scale: scale * pixelRatio * SCALE_BOOST });\n            canvas.height = viewport.height;\n            canvas.width = viewport.width;\n            const canvasContext = canvas.getContext(\'2d\');\n            if (!canvasContext) {\n                throw new Error(\'canvas was unable to get a context\');\n            }\n            const renderTask = pageProxy.render({\n                canvasContext,\n                viewport,\n                intent: \'print\', // immediately render pages on inactive pages\n            });\n            yield renderTask.promise;\n            yield new Promise(resolve => setTimeout(resolve, 16));\n            // Fetch a blob for an image of the canvas\n            return new Promise((resolve, reject) => {\n                try {\n                    canvas.toBlob(blob => resolve(blob), imageType, imageQuality);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }));\n        if (typeof blob === \'number\') {\n            return \'\';\n        }\n        // Convert blob image to object url\n        if (!blob) {\n            throw new Error(\'unable to create image from page\');\n        }\n        return URL.createObjectURL(blob);\n    });\n}\nlet renderCanvas = null;\n// Get or create a shared canvas for rendering pages in\nfunction getRenderCanvas() {\n    if (!renderCanvas) {\n        renderCanvas = document.createElement(\'canvas\');\n    }\n    return renderCanvas;\n}\nlet flushTimestamp = new Date().getTime();\nlet nextCanvasUse = Promise.resolve();\n// Use the shared canvas to render a page, using promises to create a queue\nfunction useRenderCanvas(callback) {\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        let resolve = (_value) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        let reject = (_reason) => { };\n        const prom = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        nextCanvasUse = nextCanvasUse.then(() => callback(getRenderCanvas()).then(resolve, reject));\n        const result = yield prom;\n        yield new Promise(res => setTimeout(res, 16)); // Give some time between renders\n        return result;\n    });\n}\n\n;// CONCATENATED MODULE: ./src/components/PageWrapper.tsx\nvar PageWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\nconst PageWrapper = (_a) => {\n    var { children, error, loading, loadingContentForBuildingImage, noData, pageIndex, renderType } = _a, extraProps = PageWrapper_rest(_a, ["children", "error", "loading", "loadingContentForBuildingImage", "noData", "pageIndex", "renderType"]);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const { pageDimensions, getOutlineTargets, setNumPagesLoaded } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { getObjectURLForPage, isBuildingObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\n    const { isLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\n    const objectURLForPage = getObjectURLForPage({ pageIndex });\n    const isBuildingPageImage = isBuildingObjectURLForPage({ pageIndex });\n    // Don\'t display until we have page size data\n    // TODO: Handle this nicer so we display either the loading or error treatment\n    if (!pageDimensions) {\n        return null;\n    }\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        const styles = computePageStyle(pageDimensions, rotation, scale);\n        if (objectURLForPage) {\n            styles.backgroundImage = `url(${objectURLForPage})`;\n        }\n        return styles;\n    }, [pageDimensions, rotation, scale, objectURLForPage]);\n    const getWidth = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return getPageWidth(pageDimensions, rotation);\n    }, [pageDimensions, rotation]);\n    const outlineTargets = getOutlineTargets({\n        pageIndex,\n        scale,\n        rotation,\n        pageDimensions,\n    });\n    const markPageAsLoaded = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        setNumPagesLoaded(prevNumPagesLoaded => prevNumPagesLoaded + 1);\n    }, []);\n    // Width needs to be set to prevent the outermost Page div from extending to fit the parent,\n    // and mis-aligning the text layer.\n    // TODO: Can we CSS this to auto-shrink?\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: generatePageIdFromIndex(pageIndex), className: classnames_default()(\'pdf-reader__page\', { \'pdf-reader__page--has-page-image\': objectURLForPage }, { \'pdf-reader__page--no-page-image\': !objectURLForPage }, `pdf-reader__page--render-type-${getClassNameSuffixFromRenderType(renderType)}`, { \'pdf-reader__is-building-page-image\': isBuildingPageImage }), "data-page-number": pageIndex + 1, style: getPageStyle() }, extraProps),\n        children,\n        isBuildingPageImage && !isLoading && (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page\', {\n                \'pdf-reader__page--is-loading-image\': isBuildingPageImage,\n            }) }, loadingContentForBuildingImage)),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Page, { width: getWidth(), error: error, loading: loading, noData: noData, pageIndex: pageIndex, scale: scale, rotate: rotation, renderAnnotationLayer: true, onGetTextSuccess: markPageAsLoaded }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__page__outline-targets" }, outlineTargets.map(({ dest, leftPx, topPx }) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { key: dest, className: "pdf-reader__page__outline-target", "data-outline-target-dest": dest, "data-test-id": "pdf-reader__page__outline-target", style: { left: leftPx + \'px\', top: topPx + \'px\' } }))))));\n};\n\n;// CONCATENATED MODULE: ./src/components/PrintButton.tsx\nvar PrintButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n/**\n * HTML anchor tag allows you to download a file from the same origin.\n * This is a workaround to download a file served from a different origin\n */\nconst PrintButton = (_a) => {\n    var { children, className } = _a, extraProps = PrintButton_rest(_a, ["children", "className"]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ onClick: () => onClickPrint(), "aria-label": "Print PDF", className: `pdf-reader__print-btn ${className}` }, extraProps), children ? children : \'Print\'));\n};\nfunction onClickPrint() {\n    window.print();\n}\n\n;// CONCATENATED MODULE: ./src/utils/util.ts\n// This function returns min or max if value exceeds the range, otherwise\n// the original value is returned\nconst bandPassFilter = (value, min, max) => {\n    return Math.min(Math.max(value, min), max);\n};\n\n;// CONCATENATED MODULE: ./src/components/SidePanel.tsx\nvar SidePanel_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst DEFAULT_MIN_WIDTH_PX = 300;\nconst DEFAULT_MAX_WIDTH_PX = 700;\nconst SidePanel = (_a) => {\n    var { minWidthPx = DEFAULT_MIN_WIDTH_PX, maxWidthPx = DEFAULT_MAX_WIDTH_PX, className, children, header, content, footer, dragHandlePosition, closeButton, isVisible = true, onClose } = _a, extraProps = SidePanel_rest(_a, ["minWidthPx", "maxWidthPx", "className", "children", "header", "content", "footer", "dragHandlePosition", "closeButton", "isVisible", "onClose"]);\n    // The overlay is used to catch mouse up events over iframe contents\n    // so the mouseup events will not be missed if the click is released over\n    // the iframe and the event listeners will fail to be removed\n    const [isOverlayVisible, setIsOverlayVisible] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [panelWidth, setPanelWidth] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(minWidthPx);\n    const sidePanelRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\n    const dragHandleRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\n    const renderCloseButton = () => {\n        if (typeof closeButton === \'boolean\') {\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", { className: "pdf-reader__side-panel-close-button", onClick: onClose }, "x"));\n        }\n        return closeButton;\n    };\n    const renderDragHandle = () => {\n        const isDragHandleOnLeft = dragHandlePosition === \'left\';\n        const isDragHandleOnRight = dragHandlePosition === \'right\';\n        if (!isDragHandleOnLeft && !isDragHandleOnRight) {\n            return null;\n        }\n        const onMouseMove = (mouseMoveEvent) => {\n            if (!sidePanelRef || !sidePanelRef.current) {\n                return;\n            }\n            const newWidth = dragHandlePosition === \'left\'\n                ? sidePanelRef.current.getBoundingClientRect().right - mouseMoveEvent.pageX\n                : mouseMoveEvent.pageX - sidePanelRef.current.getBoundingClientRect().left;\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\n        };\n        const onMouseUp = () => {\n            // drop opacity styling on drag handle\n            if (dragHandleRef && dragHandleRef.current) {\n                dragHandleRef.current.removeAttribute(\'style\');\n            }\n            setIsOverlayVisible(false);\n            document.body.removeEventListener(\'mousemove\', onMouseMove);\n        };\n        const onDraggingHandle = () => {\n            // prevent flashing when the mouse hovers outside the resize zone\n            if (dragHandleRef && dragHandleRef.current) {\n                dragHandleRef.current.style.opacity = \'1\';\n            }\n            setIsOverlayVisible(true);\n            document.body.addEventListener(\'mousemove\', onMouseMove);\n            document.body.addEventListener(\'mouseup\', onMouseUp, { once: true });\n        };\n        const onChangePanelWidth = (event) => {\n            const newWidth = parseInt(event.currentTarget.value);\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\n        };\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__resize-zone\', {\n                \'pdf-reader__resize-zone--left\': isDragHandleOnLeft,\n                \'pdf-reader__resize-zone--right\': isDragHandleOnRight,\n            }) },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { className: "pdf-reader__drag-handle__assistive-input", type: "range", min: minWidthPx, max: maxWidthPx, step: "5", value: panelWidth, onChange: onChangePanelWidth }),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { ref: dragHandleRef, role: "slider", "aria-valuenow": panelWidth, tabIndex: -1, onMouseDown: onDraggingHandle, className: "pdf-reader__drag-handle" },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__drag-handle__inner" }))));\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ ref: sidePanelRef, style: { width: panelWidth }, className: classnames_default()(\'pdf-reader__side-panel\', { \'pdf-reader__side-panel--hidden\': !isVisible }, className) }, extraProps),\n        renderDragHandle(),\n        closeButton && renderCloseButton(),\n        header && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("h2", { className: "pdf-reader__side-panel-title" }, header),\n        content && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-content" }, content),\n        footer && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-footer" }, footer),\n        children,\n        isOverlayVisible && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-overlay" })));\n};\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/Thumbnail.tsx\n\n\n\n\n\nconst Thumbnail = ({ pageNumber }) => {\n    const { getObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\n    const { isPageVisible, scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const [maxVisiblePageNumber, setMaxVisiblePageNumber] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const objectURL = getObjectURLForPage({ pageNumber });\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (visiblePageRatios.size !== 0) {\n            const max = getMaxVisibleElement(visiblePageRatios);\n            if (max) {\n                setMaxVisiblePageNumber(max.toString());\n            }\n        }\n    }, [visiblePageRatios]);\n    const isThumbnailVisible = maxVisiblePageNumber &&\n        parseInt(maxVisiblePageNumber) === pageNumber &&\n        isPageVisible({ pageNumber });\n    const onClick = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(event => {\n        event.preventDefault();\n        scrollToPage({ pageNumber });\n    }, [pageNumber, scrollToPage]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { "aria-label": `scroll to page ${pageNumber}`, href: `#${pageNumber}`, onClick: onClick, className: classnames_default()(\'pdf-reader__thumbnail\', { \'pdf-reader__thumbnail--no-image\': !objectURL }, { \'pdf-reader__thumbnail--is-visible\': isThumbnailVisible }), "data-page-number": pageNumber, "data-test-id": "thumbnail-link" }, !!objectURL && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("img", { className: "pdf-reader__thumbnail-image", src: objectURL })));\n};\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/ThumbnailList.tsx\n\n\n\nconst ThumbnailList = () => {\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__thumbnail-list-wrapper" },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "pdf-reader__thumbnail-list" }, Array.from({ length: numPages }).map((_, pageIndex) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: pageIndex + 1, className: "pdf-reader__thumbnail-list__item" },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(Thumbnail, { pageNumber: pageIndex + 1 })))))));\n};\n\n;// CONCATENATED MODULE: ./src/utils/format.ts\nconst PercentFormatter = new Intl.NumberFormat(\'en-US\', {\n    style: \'percent\',\n    maximumSignificantDigits: 3,\n});\n\n;// CONCATENATED MODULE: ./src/components/ZoomInButton.tsx\nvar ZoomInButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst MAX_ZOOM_IN_SCALE = 500;\nconst ZoomInButton = (_a) => {\n    var { className, children, onZoom } = _a, extraProps = ZoomInButton_rest(_a, ["className", "children", "onZoom"]);\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const handleZoomIn = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const newScaleValue = scale + zoomIncrementValue;\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\n        if (zoomScale <= MAX_ZOOM_IN_SCALE) {\n            if (onZoom) {\n                onZoom(newScaleValue);\n            }\n            setScale(newScaleValue);\n        }\n    }, [scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-in ${className}`, onClick: handleZoomIn }, extraProps), children ? children : \'+\'));\n};\n\n;// CONCATENATED MODULE: ./src/components/ZoomOutButton.tsx\nvar ZoomOutButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst MIN_ZOOM_OUT_SCALE = 20;\nconst ZoomOutButton = (_a) => {\n    var { className, children, onZoom } = _a, extraProps = ZoomOutButton_rest(_a, ["className", "children", "onZoom"]);\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const handleZoomOut = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const newScaleValue = scale - zoomIncrementValue;\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\n        if (zoomScale >= MIN_ZOOM_OUT_SCALE) {\n            if (onZoom) {\n                onZoom(newScaleValue);\n            }\n            setScale(newScaleValue);\n        }\n    }, [scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-out ${className}`, onClick: handleZoomOut }, extraProps), children ? children : \'-\'));\n};\n\n;// CONCATENATED MODULE: ./src/context/ContextProvider.tsx\n\n\n\n\n\n\nconst ContextProvider = ({ children }) => {\n    const documentProps = useDocumentContextProps();\n    const transformProps = useTransformContextProps();\n    const uiProps = useUiContextProps();\n    const scrollProps = useScrollContextProps();\n    const pageRenderProps = usePageRenderContextProps({\n        pdfDocProxy: documentProps.pdfDocProxy,\n        pixelRatio: transformProps.pixelRatio,\n        scale: transformProps.scale,\n        visiblePageRatios: scrollProps.visiblePageRatios,\n    });\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(DocumentContext.Provider, { value: documentProps },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(TransformContext.Provider, { value: transformProps },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(UiContext.Provider, { value: uiProps },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ScrollContext.Provider, { value: scrollProps },\n                    external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(PageRenderContext.Provider, { value: pageRenderProps }, children))))));\n};\n\n;// CONCATENATED MODULE: ./index.ts\n/*\n * PDF Component Library exports\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const index = ({\n    BoundingBox: BoundingBox,\n    computeBoundingBoxStyle: computeBoundingBoxStyle,\n    computePageStyle: computePageStyle,\n    ContextProvider: ContextProvider,\n    DEFAULT_ZOOM_SCALE: DEFAULT_ZOOM_SCALE,\n    DocumentContext: DocumentContext,\n    DocumentWrapper: DocumentWrapper,\n    DownloadButton: DownloadButton,\n    ArrowFlag: ArrowFlag,\n    ArrowFlagBase: ArrowFlagBase,\n    PrintButton: PrintButton,\n    generatePageIdFromIndex: generatePageIdFromIndex,\n    getPageHeight: getPageHeight,\n    getPageWidth: getPageWidth,\n    HighlightOverlay: HighlightOverlay,\n    IconFlag: IconFlag,\n    isSideways: isSideways,\n    Outline: Outline,\n    OutlineItem: OutlineItem,\n    Overlay: Overlay,\n    PageNumberControl: PageNumberControl,\n    PageRenderContext: PageRenderContext,\n    PageRotation: PageRotation,\n    PageWrapper: PageWrapper,\n    POSITION: POSITION,\n    SidePanel: SidePanel,\n    PercentFormatter: PercentFormatter,\n    RENDER_TYPE: RENDER_TYPE,\n    rotateClockwise: rotateClockwise,\n    rotateCounterClockwise: rotateCounterClockwise,\n    scaleRawBoundingBox: scaleRawBoundingBox,\n    scrollToId: scrollToId,\n    scrollToPdfPageIndex: scrollToPdfPageIndex,\n    Thumbnail: Thumbnail,\n    ThumbnailList: ThumbnailList,\n    ScrollContext: ScrollContext,\n    TransformContext: TransformContext,\n    UiContext: UiContext,\n    ZoomInButton: ZoomInButton,\n    ZoomOutButton: ZoomOutButton,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy91dGlscy9wcm92aWRlci50cz84NWFhIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3JvdGF0ZS50cz9jZGJiIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3Njcm9sbC50cz83YjA1Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0LnRzPzJmMDMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0LnRzP2JlNjQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvc3R5bGUudHM/ZTMxYiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL0JvdW5kaW5nQm94LnRzeD81NmNmIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL1Njcm9sbERpcmVjdGlvbkRldGVjdG9yLnRzP2FjZTYiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvVmlzaWJsZUVudHJpZXNEZXRlY3Rvci50cz9mZjZiIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvU2Nyb2xsQ29udGV4dC50cz9jZjkxIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvVWlDb250ZXh0LnRzPzZiYjMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvZXJyb3JNZXNzYWdlLnRzPzMwYTUiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvcGRmV29ya2VyLnRzP2E1ZGUiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvcmVhZGVyLXV0aWxzLnRzPzBlNDkiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvc2NhbGUudHM/YTAwNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3R5cGVzL2Rlc3RpbmF0aW9uLnRzP2IxYTMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9Eb2N1bWVudFdyYXBwZXIudHN4PzUyMDQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9Eb3dubG9hZEJ1dHRvbi50c3g/ZTIzNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL0hpZ2hsaWdodE92ZXJsYXkudHN4PzIyMWEiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9tYXJrZXIvQXJyb3dGbGFnQmFzZS50c3g/NTlhYyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL2ljb24vSWNvbkZsYWcudHN4P2RiZGQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveC50cz84NjEwIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvbWFya2VyL0Fycm93RmxhZy50c3g/YjZlYSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL291dGxpbmUvT3V0bGluZUl0ZW0udHN4PzZhNzMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9vdXRsaW5lL091dGxpbmUudHN4PzMzY2EiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9PdmVybGF5LnRzeD9lOWYzIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL01heFZpc2libGVFbGVtZW50LnRzPzM5YzkiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QYWdlTnVtYmVyQ29udHJvbC50c3g/NzkwYyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb250ZXh0L1BhZ2VSZW5kZXJDb250ZXh0LnRzP2YwN2MiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QYWdlV3JhcHBlci50c3g/YzljNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1ByaW50QnV0dG9uLnRzeD8xNzM5Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3V0aWwudHM/NmRkYiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1NpZGVQYW5lbC50c3g/YmU2OCIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbHMvVGh1bWJuYWlsLnRzeD85MjA3Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvdGh1bWJuYWlscy9UaHVtYm5haWxMaXN0LnRzeD81Y2YwIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL2Zvcm1hdC50cz8yZDhjIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvWm9vbUluQnV0dG9uLnRzeD84NmI5Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvWm9vbU91dEJ1dHRvbi50c3g/NmJmMyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb250ZXh0L0NvbnRleHRQcm92aWRlci50c3g/YmM4YiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL2luZGV4LnRzP2E5NTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBTyxTQUFTLGtCQUFrQixDQUFDLFlBQW9CLEVBQUUsWUFBb0I7SUFDM0UsT0FBTyxDQUFDLElBQUksQ0FDVixrQkFBa0IsWUFBWSxTQUFTLFlBQVksd0NBQXdDLENBQzVGLENBQUM7QUFDSixDQUFDOzs7QUNKRCxJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdEIscURBQVc7SUFDWCx3REFBYTtJQUNiLDJEQUFlO0lBQ2YsMkRBQWU7QUFDakIsQ0FBQyxFQUxXLFlBQVksS0FBWixZQUFZLFFBS3ZCO0FBRU0sU0FBUyxlQUFlLENBQUMsUUFBc0I7SUFDcEQsUUFBUSxRQUFRLEVBQUU7UUFDaEIsS0FBSyxZQUFZLENBQUMsT0FBTztZQUN2QixPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDL0IsS0FBSyxZQUFZLENBQUMsUUFBUTtZQUN4QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDaEMsS0FBSyxZQUFZLENBQUMsU0FBUztZQUN6QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDaEM7WUFDRSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUM7S0FDL0I7QUFDSCxDQUFDO0FBRU0sU0FBUyxzQkFBc0IsQ0FBQyxRQUFzQjtJQUMzRCxRQUFRLFFBQVEsRUFBRTtRQUNoQixLQUFLLFlBQVksQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxLQUFL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LElBQUMsS0FBSyxFQUFFLGVBQWUsSUFDL0MsUUFBUSxDQUNrQixDQUNOLENBQ04sQ0FDSyxDQUNILENBQzVCLENBQUM7QUFDSixDQUFDLENBQUM7OztBQ3JDRjs7R0FFRztBQUV3QjtBQUUyRDtBQUNZO0FBQ0g7QUFJcEQ7QUFDZTtBQUNJO0FBQ2dDO0FBQ25DO0FBQ1E7QUFDTztBQUNIO0FBQzBCO0FBQ1g7QUFDTjtBQUNkO0FBQ1E7QUFROUI7QUFJaUI7QUFDRTtBQUNnQztBQUNiO0FBQ007QUFDWjtBQUtwQztBQUN3QjtBQUNWO0FBQ0M7QUFNM0I7QUFDbUU7QUFNcEU7QUF3RXpCO0FBRUYsNENBQWU7SUFDYixXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixlQUFlO0lBQ2YsY0FBYztJQUNkLFNBQVM7SUFDVCxhQUFhO0lBQ2IsV0FBVztJQUNYLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2IsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLG9CQUFvQjtJQUNwQixTQUFTO0lBQ1QsYUFBYTtJQUNiLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsU0FBUztJQUNULFlBQVk7SUFDWixhQUFhO0NBQ2QsRUFBQyIsImZpbGUiOiIyMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbG9nUHJvdmlkZXJXYXJuaW5nKGZ1bmN0aW9uTmFtZTogc3RyaW5nLCBwcm92aWRlck5hbWU6IHN0cmluZyk6IHZvaWQge1xuICBjb25zb2xlLndhcm4oXG4gICAgYFVuYWJsZSB0byBjYWxsICR7ZnVuY3Rpb25OYW1lfS4gVGhlICR7cHJvdmlkZXJOYW1lfSBQcm92aWRlciBtYXkgbm90IGJlIHNldCB1cCBjb3JyZWN0bHkuYFxuICApO1xufVxuIiwiZXhwb3J0IGVudW0gUGFnZVJvdGF0aW9uIHtcbiAgUm90YXRlMCA9IDAsXG4gIFJvdGF0ZTkwID0gOTAsXG4gIFJvdGF0ZTE4MCA9IDE4MCxcbiAgUm90YXRlMjcwID0gMjcwLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQ2xvY2t3aXNlKHJvdGF0aW9uOiBQYWdlUm90YXRpb24pOiBQYWdlUm90YXRpb24ge1xuICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlMDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlOTA7XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlOTA6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTE4MDtcbiAgICBjYXNlIFBhZ2VSb3RhdGlvbi5Sb3RhdGUxODA6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTI3MDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFBhZ2VSb3RhdGlvbi5Sb3RhdGUwO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVDb3VudGVyQ2xvY2t3aXNlKHJvdGF0aW9uOiBQYWdlUm90YXRpb24pOiBQYWdlUm90YXRpb24ge1xuICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlMDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlMjcwO1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTkwOlxuICAgICAgcmV0dXJuIFBhZ2VSb3RhdGlvbi5Sb3RhdGUwO1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTE4MDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlOTA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlMTgwO1xuICB9XG59XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciB0aGUgcGFnZSBpcyByb3RhdGVkIDkwIGRlZ3JlZXMgY2xvY2t3aXNlIG9yIGNvdW50ZXJjbG9ja3dpc2UgZnJvbSB6ZXJvLFxuICogZS5nLiB3aGV0aGVyIHRoZSBwYWdlIFwiaXMgcm90YXRlZCBzaWRld2F5cy5cIlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTaWRld2F5cyhyb3RhdGlvbjogUGFnZVJvdGF0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiByb3RhdGlvbiA9PT0gUGFnZVJvdGF0aW9uLlJvdGF0ZTkwIHx8IHJvdGF0aW9uID09PSBQYWdlUm90YXRpb24uUm90YXRlMjcwO1xufVxuIiwiaW1wb3J0IHsgRGltZW5zaW9ucyB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvYm91bmRpbmdCb3gnO1xuaW1wb3J0IHsgUGFnZVByb3BlcnRpZXMgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3BhZ2UnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3V0aWxzJztcbmltcG9ydCB7IFBhZ2VSb3RhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3JvdGF0ZSc7XG5cbi8vIEVhY2ggcGFnZSBkaXYgaXMgSUQnZCBhY2NvcmRpbmcgdG8gcGFnZSBpbmRleFxuLy8gZS5nLiByZWFkZXJfcGdfMCwgcmVhZGVyX3BnXzEsIGV0Yy5cbmV4cG9ydCBjb25zdCBQQUdFX05BVl9UQVJHRVRfSURfUk9PVCA9ICdyZWFkZXJfcGdfJztcblxuY29uc3QgUERGX0hFSUdIVF9QT0lOVFMgPSA3OTI7XG5jb25zdCBQREZfV0lEVEhfUE9JTlRTID0gNjEyO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgocGFnZUluZGV4OiBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7UEFHRV9OQVZfVEFSR0VUX0lEX1JPT1R9JHtwYWdlSW5kZXh9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFRvSWQoaWQ6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICBpZiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnLCBpbmxpbmU6ICdjZW50ZXInIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBmaW5kIHNjcm9sbCB0YXJnZXQgd2l0aCBJRCAjJHtpZH1gKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsVG9QZGZQYWdlSW5kZXgocGFnZUluZGV4OiBudW1iZXIgfCBzdHJpbmcpOiB2b2lkIHtcbiAgc2Nyb2xsVG9JZChnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleChwYWdlSW5kZXgpKTtcbn1cblxuLyoqXG4gKiBTY3JvbGwgUERGIGRvY3VtZW50IHRvIGEgc3BlY2lmaWMgcG9zaXRpb24uXG4gKiBAcGFyYW0gcGFnZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgcGFnZSB3aGVyZSB0aGUgcG9zaXRpb24gbG9jYXRlcyBhdFxuICogQHBhcmFtIGxlZnRQb2ludHMgVGhlIGhvcml6b250YWwgZGlzdGFuY2UgYmV0d2VlbiB0aGUgb3JpZ2luIGFuZCB0aGUgcG9zaXRpb24gKGluIFBERiBjb29yZGluYXRlcylcbiAqIEBwYXJhbSBib3R0b21Qb2ludHMgVGhlIHZlcnRpY2FsIGRpc3RhbmNlIGJldHdlZW4gdGhlIG9yaWdpbiBhbmQgdGhlIHBvc2l0aW9uIChpbiBQREYgY29vcmRpbmF0ZXMpXG4gKiBAcGFyYW0gcm90YXRpb24gVGhlIHJvdGF0aW9uIGRlZ3JlZSBvZiB0aGUgZG9jdW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24oXG4gIHBhZ2VJbmRleDogbnVtYmVyLFxuICBsZWZ0UG9pbnRzOiBudW1iZXIsXG4gIGJvdHRvbVBvaW50czogbnVtYmVyLFxuICByb3RhdGlvbjogUGFnZVJvdGF0aW9uID0gUGFnZVJvdGF0aW9uLlJvdGF0ZTBcbik6IHZvaWQge1xuICAvKlxuICAgIFZlcnRpY2FsIHNjcm9sbCBkaXN0YW5jZSBpcyBjYWxjdWxhdGVkIGFzXG4gICAgPSB0b3RhbCBudW1iZXIgb2YgcHJldmlvdXMgcGFnZXMgKiBwYWdlIGhlaWdodCBpbmNsdWRpbmcgdG9wL2Rvd24gbWFyZ2luc1xuICAgICsgdGhlIG1hcmdpbiB0b3Agb2YgY3VycmVudCBwYWdlXG4gICAgKyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgcGFnZSB0b3AgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuXG4gICAgTm90aWNlIHRoYXQgdGhlIHNjcm9sbCBkaXN0YW5jZSBpcyBtZWFzdXJlZCBpbiBwaXhlbHMsXG4gICAgc28gbGVmdFBvaW50cy9ib3R0b21Qb2ludHMgaGFzIHRvIGJlIHRyYW5zZm9ybWVkIGZyb20gcG9pbnRzIHRvIHBpeGVscyBmaXJzdC5cbiAgKi9cblxuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIG1hcmdpblRvcCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0LCBtYXJnaW5SaWdodCB9ID1cbiAgICBnZXRQYWdlUHJvcGVydGllc0luUGl4ZWxzKCk7XG4gIGNvbnN0IGhlaWdodFdpdGhNYXJnaW5zID0gaGVpZ2h0ICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuXG4gIC8vIFdoZW4gYSBwYXBlciBpcyByb3RhdGVkLCBpdHMgaGVpZ2h0IGFuZCB3aWR0aCB3b3VsZCBiZSBzd2l0Y2hlZCBhdXRvbWF0aWNhbGx5LiBIb3dldmVyLCBsZWZ0UG9pbnRzIGFuZCBib3R0b21Qb2ludHMgcmVtYWluIHRoZSBzYW1lLlxuICBsZXQgbWFyZ2luVG9wUGl4ZWxzID0gbWFyZ2luVG9wO1xuICBsZXQgYm90dG9tUGl4ZWxzID0gKGhlaWdodCAqIGJvdHRvbVBvaW50cykgLyBQREZfSEVJR0hUX1BPSU5UUztcbiAgbGV0IGxlZnRQaXhlbHMgPSAod2lkdGggKiBsZWZ0UG9pbnRzKSAvIFBERl9XSURUSF9QT0lOVFM7XG5cbiAgaWYgKHJvdGF0aW9uID09IFBhZ2VSb3RhdGlvbi5Sb3RhdGU5MCkge1xuICAgIG1hcmdpblRvcFBpeGVscyA9IG1hcmdpbkxlZnQ7XG4gICAgYm90dG9tUGl4ZWxzID0gKGhlaWdodCAqIChQREZfV0lEVEhfUE9JTlRTIC0gbGVmdFBvaW50cykpIC8gUERGX1dJRFRIX1BPSU5UUztcbiAgICBsZWZ0UGl4ZWxzID0gKHdpZHRoICogYm90dG9tUG9pbnRzKSAvIFBERl9IRUlHSFRfUE9JTlRTO1xuICB9IGVsc2UgaWYgKHJvdGF0aW9uID09IFBhZ2VSb3RhdGlvbi5Sb3RhdGUxODApIHtcbiAgICBtYXJnaW5Ub3BQaXhlbHMgPSBtYXJnaW5Cb3R0b207XG4gICAgYm90dG9tUGl4ZWxzID0gKGhlaWdodCAqIChQREZfSEVJR0hUX1BPSU5UUyAtIGJvdHRvbVBvaW50cykpIC8gUERGX0hFSUdIVF9QT0lOVFM7XG4gICAgbGVmdFBpeGVscyA9ICh3aWR0aCAqIChQREZfV0lEVEhfUE9JTlRTIC0gbGVmdFBvaW50cykpIC8gUERGX1dJRFRIX1BPSU5UUztcbiAgfSBlbHNlIGlmIChyb3RhdGlvbiA9PSBQYWdlUm90YXRpb24uUm90YXRlMjcwKSB7XG4gICAgbWFyZ2luVG9wUGl4ZWxzID0gbWFyZ2luUmlnaHQ7XG4gICAgYm90dG9tUGl4ZWxzID0gKGhlaWdodCAqIGxlZnRQb2ludHMpIC8gUERGX1dJRFRIX1BPSU5UUztcbiAgICBsZWZ0UGl4ZWxzID0gKHdpZHRoICogKFBERl9IRUlHSFRfUE9JTlRTIC0gYm90dG9tUG9pbnRzKSkgLyBQREZfSEVJR0hUX1BPSU5UUztcbiAgfVxuXG4gIC8vIEZpbmQgcGFnZSBlbGVtZW50XG4gIGNvbnN0IHBhZ2VJZCA9IGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4KHBhZ2VJbmRleCk7XG4gIGNvbnN0IHBhZ2VJZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYWdlSWQpO1xuICBpZiAoIXBhZ2VJZEVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGZpcnN0IHNjcm9sbGFibGUgcGFyZW50XG4gIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocGFnZUlkRWxlbWVudCk7XG4gIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEFwcGx5IHNjcm9sbFxuICBwYXJlbnRFbGVtZW50LnNjcm9sbFRvKHtcbiAgICB0b3A6IGNhbGN1bGF0ZVRvcFB4KHtcbiAgICAgIGhlaWdodFdpdGhNYXJnaW5zSW5QeDogaGVpZ2h0V2l0aE1hcmdpbnMsXG4gICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleCxcbiAgICAgIG1hcmdpblRvcFB4OiBtYXJnaW5Ub3BQaXhlbHMsXG4gICAgICBoZWlnaHRQeDogaGVpZ2h0LFxuICAgICAgYm90dG9tUHg6IGJvdHRvbVBpeGVscyxcbiAgICB9KSxcbiAgICBsZWZ0OiBNYXRoLmZsb29yKGxlZnRQaXhlbHMpLFxuICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZTogSFRNTEVsZW1lbnQpOiBOdWxsYWJsZTxIVE1MRWxlbWVudD4ge1xuICBjb25zdCBtaW5TY3JvbGxhYmxlSGVpZ2h0ID0gNTA7IC8vIHVzZWQgdG8gY2hlY2sgZm9yIGEgYnVnIHdoZXJlIEZpcmVmb3ggZ2l2ZXMgaW5saW5lIGNvbnRhaW5lcnMgYSBzbWFsbCBzY3JvbGxIZWlnaHQgd2hlbiBpdCBzaG91bGRudFxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghbm9kZSB8fCBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5Jykge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgaWYgKG5vZGUuc2Nyb2xsSGVpZ2h0IC0gbm9kZS5jbGllbnRIZWlnaHQgPiBtaW5TY3JvbGxhYmxlSGVpZ2h0ICYmICFpc092ZXJmbG93SXNIaWRkZW4obm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KG5vZGUucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dJc0hpZGRlbihub2RlOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIHJldHVybiAoXG4gICAgc3R5bGUub3ZlcmZsb3cuaW5jbHVkZXMoJ2hpZGRlbicpIHx8XG4gICAgc3R5bGUub3ZlcmZsb3dYLmluY2x1ZGVzKCdoaWRkZW4nKSB8fFxuICAgIHN0eWxlLm92ZXJmbG93WS5pbmNsdWRlcygnaGlkZGVuJylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVRvcFB4KHtcbiAgaGVpZ2h0V2l0aE1hcmdpbnNJblB4LFxuICBwYWdlSW5kZXgsXG4gIG1hcmdpblRvcFB4LFxuICBoZWlnaHRQeCxcbiAgYm90dG9tUHgsXG59OiB7XG4gIGhlaWdodFdpdGhNYXJnaW5zSW5QeDogbnVtYmVyO1xuICBwYWdlSW5kZXg6IG51bWJlcjtcbiAgbWFyZ2luVG9wUHg6IG51bWJlcjtcbiAgaGVpZ2h0UHg6IG51bWJlcjtcbiAgYm90dG9tUHg6IG51bWJlcjtcbn0pOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihoZWlnaHRXaXRoTWFyZ2luc0luUHggKiBwYWdlSW5kZXggKyBtYXJnaW5Ub3BQeCArIChoZWlnaHRQeCAtIGJvdHRvbVB4KSk7XG59XG5cbi8qKlxuICogR2V0IGxlbmd0aHMsIHdpZHRocywgYW5kIG1hcmdpbnMgb2YgYSBwYWdlLlxuICogQHJldHVybnMgYSBQYWdlUHJvcGVydGllcyBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2VQcm9wZXJ0aWVzSW5QaXhlbHMoKTogUGFnZVByb3BlcnRpZXMge1xuICBjb25zdCBmaXJzdFBhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleCgwKSk7XG4gIGlmICghZmlyc3RQYWdlKSB7XG4gICAgY29uc29sZS5lcnJvcihgQ2Fubm90IGdldCB0aGUgZmlyc3QgcGFnZSBvZiB0aGlzIGRvY3VtZW50LmApO1xuICAgIGNvbnN0IGVtcHR5UGFnZVByb3BlcnRpZXM6IFBhZ2VQcm9wZXJ0aWVzID0ge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgbWFyZ2luUmlnaHQ6IDAsXG4gICAgfTtcbiAgICByZXR1cm4gZW1wdHlQYWdlUHJvcGVydGllcztcbiAgfVxuXG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShmaXJzdFBhZ2UgYXMgRWxlbWVudCk7XG4gIGNvbnN0IHBhZ2VQcm9wZXJ0aWVzOiBQYWdlUHJvcGVydGllcyA9IHtcbiAgICB3aWR0aDogcGFyc2VJbnQoc3R5bGUud2lkdGgpLFxuICAgIGhlaWdodDogcGFyc2VJbnQoc3R5bGUuaGVpZ2h0KSxcbiAgICBtYXJnaW5Ub3A6IHBhcnNlSW50KHN0eWxlLm1hcmdpblRvcCksXG4gICAgbWFyZ2luQm90dG9tOiBwYXJzZUludChzdHlsZS5tYXJnaW5Cb3R0b20pLFxuICAgIG1hcmdpbkxlZnQ6IHBhcnNlSW50KHN0eWxlLm1hcmdpbkxlZnQpLFxuICAgIG1hcmdpblJpZ2h0OiBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodCksXG4gIH07XG5cbiAgcmV0dXJuIHBhZ2VQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlVGFyZ2V0UG9zaXRpb24oe1xuICBzY2FsZSxcbiAgbGVmdFBvaW50LFxuICBib3R0b21Qb2ludCxcbiAgcGFnZURpbWVuc2lvbnMsXG4gIHJvdGF0aW9uID0gUGFnZVJvdGF0aW9uLlJvdGF0ZTAsXG59OiB7XG4gIHNjYWxlOiBudW1iZXI7XG4gIGxlZnRQb2ludDogbnVtYmVyO1xuICBib3R0b21Qb2ludDogbnVtYmVyO1xuICBwYWdlRGltZW5zaW9uczogRGltZW5zaW9ucztcbiAgcm90YXRpb246IFBhZ2VSb3RhdGlvbjtcbn0pOiB7IGxlZnRQeDogbnVtYmVyOyB0b3BQeDogbnVtYmVyIH0ge1xuICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgZGVmYXVsdDpcbiAgICBjYXNlIFBhZ2VSb3RhdGlvbi5Sb3RhdGUwOiB7XG4gICAgICBjb25zdCBsZWZ0UHggPSAobGVmdFBvaW50IC8gUERGX1dJRFRIX1BPSU5UUykgKiBwYWdlRGltZW5zaW9ucy53aWR0aCAqIHNjYWxlO1xuICAgICAgY29uc3QgdG9wUHggPSAoMSAtIGJvdHRvbVBvaW50IC8gUERGX0hFSUdIVF9QT0lOVFMpICogcGFnZURpbWVuc2lvbnMuaGVpZ2h0ICogc2NhbGU7XG4gICAgICByZXR1cm4geyBsZWZ0UHgsIHRvcFB4IH07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwZGZqcyB9IGZyb20gJ3JlYWN0LXBkZic7XG5cbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL2JvdW5kaW5nQm94JztcbmltcG9ydCB7XG4gIE91dGxpbmVOb2RlLFxuICBPdXRsaW5lUG9zaXRpb24sXG4gIE91dGxpbmVQb3NpdGlvbnNCeVBhZ2VOdW1iZXJNYXAsXG4gIE91dGxpbmVUYXJnZXQsXG4gIE91dGxpbmVUYXJnZXRBcmdzLFxufSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL291dGxpbmUnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3V0aWxzJztcbmltcG9ydCB7IGxvZ1Byb3ZpZGVyV2FybmluZyB9IGZyb20gJy4uL3V0aWxzL3Byb3ZpZGVyJztcbmltcG9ydCB7IGNhbGN1bGF0ZVRhcmdldFBvc2l0aW9uIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsJztcblxuZXhwb3J0IGludGVyZmFjZSBJRG9jdW1lbnRDb250ZXh0IHtcbiAgbnVtUGFnZXM6IG51bWJlcjtcbiAgbnVtUGFnZXNMb2FkZWQ6IG51bWJlcjtcbiAgb3V0bGluZTogTnVsbGFibGU8QXJyYXk8T3V0bGluZU5vZGU+PjtcbiAgb3V0bGluZVBvc2l0aW9uczogTnVsbGFibGU8T3V0bGluZVBvc2l0aW9uc0J5UGFnZU51bWJlck1hcD47XG4gIHBhZ2VEaW1lbnNpb25zOiBEaW1lbnNpb25zOyAvLyBTY2FsZWQgYXQgMTAwJVxuICBwZGZEb2NQcm94eT86IHBkZmpzLlBERkRvY3VtZW50UHJveHk7XG4gIGdldE91dGxpbmVUYXJnZXRzOiAob3B0czogT3V0bGluZVRhcmdldEFyZ3MpID0+IE91dGxpbmVUYXJnZXRbXTtcbiAgc2V0TnVtUGFnZXM6IChudW1QYWdlczogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXROdW1QYWdlc0xvYWRlZDogKG51bVBhZ2VzTG9hZGVkOiBudW1iZXIgfCAoKHByZXZOdW1QYWdlc0xvYWRlZDogbnVtYmVyKSA9PiBudW1iZXIpKSA9PiB2b2lkO1xuICBzZXRPdXRsaW5lOiAob3V0bGluZTogTnVsbGFibGU8QXJyYXk8T3V0bGluZU5vZGU+PikgPT4gdm9pZDtcbiAgc2V0T3V0bGluZVBvc2l0aW9uczogKG91dGxpbmVQb3NpdGlvbnM6IE51bGxhYmxlPE91dGxpbmVQb3NpdGlvbnNCeVBhZ2VOdW1iZXJNYXA+KSA9PiB2b2lkO1xuICBzZXRQYWdlRGltZW5zaW9uczogKHBhZ2VEaW1lbnNpb25zOiBEaW1lbnNpb25zKSA9PiB2b2lkO1xuICBzZXRQZGZEb2NQcm94eTogKHBkZkRvY1Byb3h5OiBwZGZqcy5QREZEb2N1bWVudFByb3h5KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJRG9jdW1lbnRDb250ZXh0Pih7XG4gIG51bVBhZ2VzOiAwLFxuICBudW1QYWdlc0xvYWRlZDogMCxcbiAgb3V0bGluZTogW10sXG4gIG91dGxpbmVQb3NpdGlvbnM6IG51bGwsXG4gIHBhZ2VEaW1lbnNpb25zOiB7IGhlaWdodDogMCwgd2lkdGg6IDAgfSxcbiAgcGRmRG9jUHJveHk6IHVuZGVmaW5lZCxcbiAgZ2V0T3V0bGluZVRhcmdldHM6IG9wdHMgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgZ2V0T3V0bGluZVRhcmdldHMoJHtKU09OLnN0cmluZ2lmeShvcHRzKX0pYCwgJ0RvY3VtZW50Q29udGV4dCcpO1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgc2V0TnVtUGFnZXM6IG51bVBhZ2VzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldE51bVBhZ2VzKCR7bnVtUGFnZXN9KWAsICdEb2N1bWVudENvbnRleHQnKTtcbiAgfSxcbiAgc2V0TnVtUGFnZXNMb2FkZWQ6IG51bVBhZ2VzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldE51bVBhZ2VzTG9hZGVkKCR7bnVtUGFnZXN9KWAsICdEb2N1bWVudENvbnRleHQnKTtcbiAgfSxcbiAgc2V0T3V0bGluZTogb3V0bGluZSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRPdXRsaW5lKCR7b3V0bGluZX0pYCwgJ0RvY3VtZW50Q29udGV4dCcpO1xuICB9LFxuICBzZXRPdXRsaW5lUG9zaXRpb25zOiBvdXRsaW5lID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldE91dGxpbmVQb3NpdGlvbnMoJHtvdXRsaW5lfSlgLCAnRG9jdW1lbnRDb250ZXh0Jyk7XG4gIH0sXG4gIHNldFBhZ2VEaW1lbnNpb25zOiBwYWdlRGltZW5zaW9ucyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRQYWdlRGltZW5zaW9ucygke3BhZ2VEaW1lbnNpb25zfSlgLCAnRG9jdW1lbnRDb250ZXh0Jyk7XG4gIH0sXG4gIHNldFBkZkRvY1Byb3h5OiBwZGZEb2NQcm94eSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRQZGZEb2NQcm94eSgke3BkZkRvY1Byb3h5fSlgLCAnRG9jdW1lbnRDb250ZXh0Jyk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURvY3VtZW50Q29udGV4dFByb3BzKCk6IElEb2N1bWVudENvbnRleHQge1xuICBjb25zdCBbbnVtUGFnZXMsIHNldE51bVBhZ2VzXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtudW1QYWdlc0xvYWRlZCwgc2V0TnVtUGFnZXNMb2FkZWRdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW291dGxpbmUsIHNldE91dGxpbmVdID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8QXJyYXk8T3V0bGluZU5vZGU+Pj4obnVsbCk7XG4gIGNvbnN0IFtvdXRsaW5lUG9zaXRpb25zLCBzZXRPdXRsaW5lUG9zaXRpb25zXSA9XG4gICAgUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8T3V0bGluZVBvc2l0aW9uc0J5UGFnZU51bWJlck1hcD4+KG51bGwpO1xuICBjb25zdCBbcGFnZURpbWVuc2lvbnMsIHNldFBhZ2VEaW1lbnNpb25zXSA9IFJlYWN0LnVzZVN0YXRlPERpbWVuc2lvbnM+KHtcbiAgICBoZWlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gIH0pO1xuICBjb25zdCBbcGRmRG9jUHJveHksIHNldFBkZkRvY1Byb3h5XSA9IFJlYWN0LnVzZVN0YXRlPHBkZmpzLlBERkRvY3VtZW50UHJveHk+KCk7XG5cbiAgLy8gRHJhdyBvdXRsaW5lIHRhcmdldCBpbnRvIHRoZSBwZGYgYmFzZWQgb24gdGhlIGFyZ3NcbiAgY29uc3QgZ2V0T3V0bGluZVRhcmdldHMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoe1xuICAgICAgcGFnZU51bWJlcixcbiAgICAgIHBhZ2VJbmRleCxcbiAgICAgIHNjYWxlLFxuICAgICAgcm90YXRpb24sXG4gICAgICBwYWdlRGltZW5zaW9ucyxcbiAgICB9OiBPdXRsaW5lVGFyZ2V0QXJncyk6IE91dGxpbmVUYXJnZXRbXSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhZ2VJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFnZU51bWJlciA9IHBhZ2VJbmRleCArIDE7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG91dGxpbmVQb3NpdGlvbnM/LmdldChwYWdlTnVtYmVyKSB8fCBbXTtcbiAgICAgIHJldHVybiBwb3NpdGlvbnMubWFwKCh7IGRlc3QsIGxlZnRQb2ludCwgYm90dG9tUG9pbnQgfSkgPT4ge1xuICAgICAgICBjb25zdCB7IGxlZnRQeCwgdG9wUHggfSA9IGNhbGN1bGF0ZVRhcmdldFBvc2l0aW9uKHtcbiAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICBsZWZ0UG9pbnQsXG4gICAgICAgICAgYm90dG9tUG9pbnQsXG4gICAgICAgICAgcGFnZURpbWVuc2lvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRlc3QsXG4gICAgICAgICAgbGVmdFB4LFxuICAgICAgICAgIHRvcFB4LFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbb3V0bGluZVBvc2l0aW9uc11cbiAgKTtcblxuICByZXR1cm4ge1xuICAgIG51bVBhZ2VzLFxuICAgIG51bVBhZ2VzTG9hZGVkLFxuICAgIG91dGxpbmUsXG4gICAgb3V0bGluZVBvc2l0aW9ucyxcbiAgICBwYWdlRGltZW5zaW9ucyxcbiAgICBwZGZEb2NQcm94eSxcbiAgICBnZXRPdXRsaW5lVGFyZ2V0cyxcbiAgICBzZXROdW1QYWdlcyxcbiAgICBzZXROdW1QYWdlc0xvYWRlZCxcbiAgICBzZXRPdXRsaW5lLFxuICAgIHNldE91dGxpbmVQb3NpdGlvbnMsXG4gICAgc2V0UGFnZURpbWVuc2lvbnM6IHNldFBhZ2VEaW1lbnNpb25zLFxuICAgIHNldFBkZkRvY1Byb3h5LFxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRPdXRsaW5lUG9zaXRpb25zKFxuICBwZGZEb2NQcm94eTogcGRmanMuUERGRG9jdW1lbnRQcm94eSxcbiAgb3V0bGluZT86IE91dGxpbmVOb2RlW11cbik6IFByb21pc2U8T3V0bGluZVBvc2l0aW9uc0J5UGFnZU51bWJlck1hcD4ge1xuICBpZiAoIW91dGxpbmUpIHtcbiAgICBvdXRsaW5lID0gYXdhaXQgcGRmRG9jUHJveHkuZ2V0T3V0bGluZSgpO1xuICB9XG5cbiAgLy8gRGVwdGggZmlyc3Qgc2VhcmNoIHRocm91Z2ggb3V0bGluZSBpdGVtc1xuICBjb25zdCBpdGVtUXVldWUgPSBvdXRsaW5lLnNsaWNlKCk7XG4gIGNvbnN0IHByb21zOiBQcm9taXNlPE51bGxhYmxlPE91dGxpbmVQb3NpdGlvbj4+W10gPSBbXTtcbiAgd2hpbGUgKGl0ZW1RdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1RdWV1ZS5wb3AoKTtcbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBOb3QgYWJsZSB0byBwcm9jZXNzXG4gICAgfVxuICAgIGNvbnN0IHsgZGVzdCwgaXRlbXMgfSA9IGl0ZW07XG5cbiAgICAvLyBBZGQgY2hpbGQgaXRlbXMgdG8gcXVldWVcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgIGl0ZW1RdWV1ZS5wdXNoKC4uLml0ZW1zKTtcbiAgICB9XG5cbiAgICAvLyBGZXRjaCBkZXN0aW5hdGlvbnMgZm9yIGl0ZW1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZXN0KSkge1xuICAgICAgcHJvbXMucHVzaCguLi5kZXN0Lm1hcChkZXN0ID0+IGdldERlc3RpbmF0aW9uKHBkZkRvY1Byb3h5LCBkZXN0KSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcm9tcy5wdXNoKGdldERlc3RpbmF0aW9uKHBkZkRvY1Byb3h5LCBkZXN0KSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29sbGVjdCByZXN1bHRzIGFsbCBhdCBvbmNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHBheSBmb3IgdGhlIGNvc3Qgb2ZcbiAgLy8gcXVldWVpbmcgbWVzc2FnZXMgc2VudCB0byB0aGUgd29ya2VyXG4gIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9tcyk7XG5cbiAgLy8gU3BsaXQgcmVzdWx0cyBpbnRvIHBhZ2VzXG4gIGNvbnN0IG1hcCA9IG5ldyBNYXA8bnVtYmVyLCBPdXRsaW5lUG9zaXRpb25bXT4oKTtcbiAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICBjb250aW51ZTsgLy8gRmlsdGVyIG91dCBudWxsXG4gICAgfVxuICAgIGNvbnN0IHsgcGFnZU51bWJlciB9ID0gcmVzdWx0O1xuICAgIGlmICghbWFwLmhhcyhwYWdlTnVtYmVyKSkge1xuICAgICAgbWFwLnNldChwYWdlTnVtYmVyLCBbXSk7XG4gICAgfVxuICAgIG1hcC5nZXQocGFnZU51bWJlcik/LnB1c2gocmVzdWx0KTtcbiAgfVxuXG4gIC8vIEZyZWV6ZSBvYmplY3RzIHNvIGNvbnN1bWVycyBjYW5ub3QgbXV0YXRlXG4gIGZvciAoY29uc3QgcGFnZVBvcyBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICBmb3IgKGNvbnN0IHBvcyBvZiBwYWdlUG9zKSB7XG4gICAgICBPYmplY3QuZnJlZXplKHBvcyk7XG4gICAgfVxuICAgIE9iamVjdC5mcmVlemUocGFnZVBvcyk7XG4gIH1cbiAgT2JqZWN0LmZyZWV6ZShtYXApO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERlc3RpbmF0aW9uKFxuICBwZGZEb2NQcm94eTogcGRmanMuUERGRG9jdW1lbnRQcm94eSxcbiAgZGVzdDogc3RyaW5nXG4pOiBQcm9taXNlPE51bGxhYmxlPE91dGxpbmVQb3NpdGlvbj4+IHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGRmRG9jUHJveHkuZ2V0RGVzdGluYXRpb24oZGVzdCk7XG4gIGlmICghcmVzdWx0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGNvbnN0IFtyZWYsIF9mb3JtYXQsIGxlZnRQb2ludCwgYm90dG9tUG9pbnRdID0gcmVzdWx0O1xuICBjb25zdCBwYWdlSW5kZXggPSBhd2FpdCBwZGZEb2NQcm94eS5nZXRQYWdlSW5kZXgocmVmKTtcbiAgY29uc3QgcGFnZU51bWJlciA9IHBhZ2VJbmRleCArIDE7XG4gIHJldHVybiB7IHBhZ2VOdW1iZXIsIGRlc3QsIGxlZnRQb2ludCwgYm90dG9tUG9pbnQgfTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgbG9nUHJvdmlkZXJXYXJuaW5nIH0gZnJvbSAnLi4vdXRpbHMvcHJvdmlkZXInO1xuaW1wb3J0IHsgUGFnZVJvdGF0aW9uIH0gZnJvbSAnLi4vdXRpbHMvcm90YXRlJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfWk9PTV9TQ0FMRSA9IDEuMDtcbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zZm9ybUNvbnRleHQge1xuICBwaXhlbFJhdGlvOiBudW1iZXI7XG4gIHJvdGF0aW9uOiBQYWdlUm90YXRpb247XG4gIHNjYWxlOiBudW1iZXI7XG4gIHpvb21JbmNyZW1lbnRWYWx1ZTogbnVtYmVyO1xuICBzZXRQaXhlbFJhdGlvOiAoZGV2aWNlUGl4ZWxSYXRpbzogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXRSb3RhdGlvbjogKHJvdGF0aW9uOiBQYWdlUm90YXRpb24pID0+IHZvaWQ7XG4gIHNldFNjYWxlOiAoc2NhbGU6IG51bWJlcikgPT4gdm9pZDtcbiAgc2V0Wm9vbUluY3JlbWVudFZhbHVlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IFRyYW5zZm9ybUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PElUcmFuc2Zvcm1Db250ZXh0Pih7XG4gIHBpeGVsUmF0aW86ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDogbnVsbCkgfHwgMSxcbiAgcm90YXRpb246IFBhZ2VSb3RhdGlvbi5Sb3RhdGUwLFxuICBzY2FsZTogMSxcbiAgem9vbUluY3JlbWVudFZhbHVlOiAwLjIsXG4gIHNldFBpeGVsUmF0aW86IHBpeGVsUmF0aW8gPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0UGl4ZWxSYXRpbygke3BpeGVsUmF0aW99KWAsICdUcmFuc2Zvcm1Db250ZXh0Jyk7XG4gIH0sXG4gIHNldFJvdGF0aW9uOiByb3RhdGlvbiA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRSb3RhdGlvbigke3JvdGF0aW9ufSlgLCAnVHJhbnNmb3JtQ29udGV4dCcpO1xuICB9LFxuICBzZXRTY2FsZTogc2NhbGUgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0U2NhbGUoJHtzY2FsZX0pYCwgJ1RyYW5zZm9ybUNvbnRleHQnKTtcbiAgfSxcbiAgc2V0Wm9vbUluY3JlbWVudFZhbHVlOiB2YWx1ZSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRab29tSW5jcmVtZW50VmFsdWUoJHt2YWx1ZX0pYCwgJ1RyYW5zZm9ybUNvbnRleHQnKTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVHJhbnNmb3JtQ29udGV4dFByb3BzKCk6IElUcmFuc2Zvcm1Db250ZXh0IHtcbiAgY29uc3QgW3BpeGVsUmF0aW8sIHNldFBpeGVsUmF0aW9dID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA6IG51bGwpIHx8IDFcbiAgKTtcbiAgY29uc3QgW3JvdGF0aW9uLCBzZXRSb3RhdGlvbl0gPSBSZWFjdC51c2VTdGF0ZTxQYWdlUm90YXRpb24+KFBhZ2VSb3RhdGlvbi5Sb3RhdGUwKTtcbiAgY29uc3QgW3NjYWxlLCBzZXRTY2FsZV0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KERFRkFVTFRfWk9PTV9TQ0FMRSk7XG4gIGNvbnN0IFt6b29tSW5jcmVtZW50VmFsdWUsIHNldFpvb21JbmNyZW1lbnRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDAuMik7XG5cbiAgcmV0dXJuIHtcbiAgICBwaXhlbFJhdGlvLFxuICAgIHJvdGF0aW9uLFxuICAgIHNjYWxlLFxuICAgIHNldFBpeGVsUmF0aW8sXG4gICAgc2V0Um90YXRpb24sXG4gICAgc2V0U2NhbGUsXG4gICAgem9vbUluY3JlbWVudFZhbHVlLFxuICAgIHNldFpvb21JbmNyZW1lbnRWYWx1ZSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IERpbWVuc2lvbnMsIFNpemUgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL2JvdW5kaW5nQm94JztcbmltcG9ydCB7IGlzU2lkZXdheXMsIFBhZ2VSb3RhdGlvbiB9IGZyb20gJy4vcm90YXRlJztcblxuLy8gQ29tcHV0ZXMgdGhlIHN0eWxlIGZvciBhIGJvdW5kaW5nIGJveCwgYWNjb3VudGluZyBmb3IgcGFnZSByb2F0aW9uIGFuZCBwYWdlIHNjYWxpbmcvem9vbVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlKFxuICBib3VuZGluZ0JveFNpemU6IFNpemUsXG4gIHBhZ2VEaW1lbnNpb25zOiBEaW1lbnNpb25zLFxuICByb3RhdGlvbjogUGFnZVJvdGF0aW9uLFxuICBzY2FsZTogbnVtYmVyXG4pOiBTaXplIHtcbiAgY29uc3QgeyB0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGggfSA9IGJvdW5kaW5nQm94U2l6ZTtcblxuICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlOTA6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IGxlZnQgKiBzY2FsZSxcbiAgICAgICAgbGVmdDogKHBhZ2VEaW1lbnNpb25zLmhlaWdodCAtIGhlaWdodCAtIHRvcCkgKiBzY2FsZSxcbiAgICAgICAgaGVpZ2h0OiB3aWR0aCAqIHNjYWxlLFxuICAgICAgICB3aWR0aDogaGVpZ2h0ICogc2NhbGUsXG4gICAgICB9O1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTE4MDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogKHBhZ2VEaW1lbnNpb25zLmhlaWdodCAtIGhlaWdodCAtIHRvcCkgKiBzY2FsZSxcbiAgICAgICAgbGVmdDogKHBhZ2VEaW1lbnNpb25zLndpZHRoIC0gd2lkdGggLSBsZWZ0KSAqIHNjYWxlLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCAqIHNjYWxlLFxuICAgICAgICB3aWR0aDogd2lkdGggKiBzY2FsZSxcbiAgICAgIH07XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlMjcwOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAocGFnZURpbWVuc2lvbnMud2lkdGggLSB3aWR0aCAtIGxlZnQpICogc2NhbGUsXG4gICAgICAgIGxlZnQ6IHRvcCAqIHNjYWxlLFxuICAgICAgICBoZWlnaHQ6IHdpZHRoICogc2NhbGUsXG4gICAgICAgIHdpZHRoOiBoZWlnaHQgKiBzY2FsZSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wICogc2NhbGUsXG4gICAgICAgIGxlZnQ6IGxlZnQgKiBzY2FsZSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiBzY2FsZSxcbiAgICAgICAgd2lkdGg6IHdpZHRoICogc2NhbGUsXG4gICAgICB9O1xuICB9XG59XG5cbi8vIENvbXB1dGUgdGhlIHN0eWxlIGZvciBhIHBhZ2UsIGFjY291bnRpbmcgZm9yIHBhZ2Ugcm90YXRpb24gYW5kIHBhZ2Ugc2NhbGluZy96b29tXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVBhZ2VTdHlsZShcbiAgcGFnZURpbWVuc2lvbnM6IERpbWVuc2lvbnMsXG4gIHJvdGF0aW9uOiBQYWdlUm90YXRpb24sXG4gIHNjYWxlOiBudW1iZXJcbik6IFNpemUge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0UGFnZUhlaWdodChwYWdlRGltZW5zaW9ucywgcm90YXRpb24pICogc2NhbGUsXG4gICAgd2lkdGg6IGdldFBhZ2VXaWR0aChwYWdlRGltZW5zaW9ucywgcm90YXRpb24pICogc2NhbGUsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gIH07XG59XG5cbi8vIEdldCBwYWdlIGhlaWdodCBhY2NvdW50aW5nIGZvciBwYWdlIHJvdGF0aW9uLSBpZiB0aGUgcGFnZSBpcyByb3RhdGVkIG9uIGl0cyBzaWRlLCBpdHMgd2lkdGggYmVjb21lcyBpdHMgaGVpZ2h0XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnZUhlaWdodChwYWdlRGltZW5zaW9uczogRGltZW5zaW9ucywgcm90YXRpb246IFBhZ2VSb3RhdGlvbik6IG51bWJlciB7XG4gIHJldHVybiBpc1NpZGV3YXlzKHJvdGF0aW9uKSA/IHBhZ2VEaW1lbnNpb25zLndpZHRoIDogcGFnZURpbWVuc2lvbnMuaGVpZ2h0O1xufVxuXG4vLyBHZXQgcGFnZSB3aWR0aCBhY2NvdW50aW5nIGZvciBwYWdlIHJvdGF0aW9uLSBpZiB0aGUgcGFnZSBpcyByb3RhdGVkIG9uIGl0cyBzaWRlLCBpdHMgaGVpZ2h0IGJlY29tZXMgaXRzIHdpZHRoXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnZVdpZHRoKHBhZ2VEaW1lbnNpb25zOiBEaW1lbnNpb25zLCByb3RhdGlvbjogUGFnZVJvdGF0aW9uKTogbnVtYmVyIHtcbiAgcmV0dXJuIGlzU2lkZXdheXMocm90YXRpb24pID8gcGFnZURpbWVuc2lvbnMuaGVpZ2h0IDogcGFnZURpbWVuc2lvbnMud2lkdGg7XG59XG4iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBjb21wdXRlQm91bmRpbmdCb3hTdHlsZSB9IGZyb20gJy4uL3V0aWxzL3N0eWxlJztcbmltcG9ydCB7IEJvdW5kaW5nQm94IGFzIEJvdW5kaW5nQm94VHlwZSB9IGZyb20gJy4vdHlwZXMvYm91bmRpbmdCb3gnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB1bmRlcmxpbmVDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGlkPzogc3RyaW5nO1xuICBpc0hpZ2hsaWdodGVkPzogYm9vbGVhbjtcbiAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gIHZvaWNlT3ZlckxhYmVsPzogc3RyaW5nO1xufSAmIEJvdW5kaW5nQm94VHlwZTtcblxuZXhwb3J0IGNvbnN0IEJvdW5kaW5nQm94OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICB0b3AsXG4gIGxlZnQsXG4gIGhlaWdodCxcbiAgd2lkdGgsXG4gIGNsYXNzTmFtZSxcbiAgdW5kZXJsaW5lQ2xhc3NOYW1lLFxuICBpZCxcbiAgaXNIaWdobGlnaHRlZCxcbiAgb25DbGljayxcbiAgdm9pY2VPdmVyTGFiZWwsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcGFnZURpbWVuc2lvbnMgfSA9IFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgeyByb3RhdGlvbiwgc2NhbGUgfSA9IFJlYWN0LnVzZUNvbnRleHQoVHJhbnNmb3JtQ29udGV4dCk7XG4gIGNvbnN0IGJveFNpemUgPSB7IHRvcCwgbGVmdCwgaGVpZ2h0LCB3aWR0aCB9O1xuICBjb25zdCBjb21wb25lbnRDbGFzc05hbWUgPSBjbGFzc05hbWVzKFxuICAgICdwZGYtcmVhZGVyX19vdmVybGF5LWJvdW5kaW5nLWJveCcsXG4gICAgaXNIaWdobGlnaHRlZCA9PT0gdHJ1ZSA/ICdwZGYtcmVhZGVyX19vdmVybGF5LWJvdW5kaW5nLWJveC1oaWdobGlnaHRlZCcgOiAnJyxcbiAgICBjbGFzc05hbWVcbiAgKTtcblxuICBjb25zdCBnZXRCb3VuZGluZ0JveFN0eWxlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShib3hTaXplLCBwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlKTtcbiAgfSwgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdKTtcblxuICBjb25zdCByb3RhdGlvbkNsYXNzTmFtZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gYHJvdGF0ZSR7cm90YXRpb259YDtcbiAgfSwgW3JvdGF0aW9uXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YHBkZi1yZWFkZXJfX292ZXJsYXktYm91bmRpbmctYm94LXVuZGVybGluZSAke1xuICAgICAgICAgIHVuZGVybGluZUNsYXNzTmFtZSB8fCByb3RhdGlvbkNsYXNzTmFtZSgpXG4gICAgICAgIH1gfVxuICAgICAgICBzdHlsZT17Z2V0Qm91bmRpbmdCb3hTdHlsZSgpfVxuICAgICAgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9e2lkfVxuICAgICAgICBjbGFzc05hbWU9e2Ake2NvbXBvbmVudENsYXNzTmFtZX0gJHtyb3RhdGlvbkNsYXNzTmFtZSgpfWB9XG4gICAgICAgIHN0eWxlPXtnZXRCb3VuZGluZ0JveFN0eWxlKCl9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgYXJpYS1sYWJlbD17dm9pY2VPdmVyTGFiZWx9XG4gICAgICAgIHsuLi5leHRyYVByb3BzfVxuICAgICAgLz5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufTtcbiIsImltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5cbmV4cG9ydCBlbnVtIFNjcm9sbERpcmVjdGlvbiB7XG4gIFVQID0gJ1VQJyxcbiAgRE9XTiA9ICdET1dOJyxcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcm9sbERldGVjdG9yIHtcbiAgX2xhc3RTY3JvbGxUb3A6IG51bWJlcjtcbiAgX2xhc3RTY3JvbGxEaXJlY3Rpb246IE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj47XG4gIF9lbDogRWxlbWVudDtcbiAgX3NldFNjcm9sbERpcmVjdGlvbjogKHNjcm9sbERpcmVjdGlvbjogU2Nyb2xsRGlyZWN0aW9uKSA9PiBhbnk7XG4gIF9sYXN0U2Nyb2xsVG9wQmVmb3JlRGlyZWN0aW9uQ2hhbmdlOiBudW1iZXI7XG4gIF9zY3JvbGxUaHJlc2hvbGQ/OiBudW1iZXI7XG4gIF9pc1Njcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbjogTnVsbGFibGU8U2Nyb2xsRGlyZWN0aW9uPjtcbiAgX3NldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbj86IChzY3JvbGxEaXJlY3Rpb246IE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj4pID0+IGFueTtcbiAgX2lzQXRUb3A6IE51bGxhYmxlPGJvb2xlYW4+O1xuICBfc2V0SXNBdFRvcDogKGlzQXRUb3A6IGJvb2xlYW4pID0+IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbDogRWxlbWVudCxcbiAgICBzZXRTY3JvbGxEaXJlY3Rpb246IChzY3JvbGxEaXJlY3Rpb246IFNjcm9sbERpcmVjdGlvbikgPT4gYW55LFxuICAgIHNldElzQXRUb3A6IChpc0F0VG9wOiBib29sZWFuKSA9PiBhbnksXG4gICAgc2V0U2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uPzogKHNjcm9sbERpcmVjdGlvbjogTnVsbGFibGU8U2Nyb2xsRGlyZWN0aW9uPikgPT4gYW55LFxuICAgIHNjcm9sbFRocmVzaG9sZD86IG51bWJlclxuICApIHtcbiAgICB0aGlzLl9lbCA9IGVsO1xuICAgIHRoaXMuX2xhc3RTY3JvbGxUb3AgPSB0aGlzLl9lbC5zY3JvbGxUb3A7XG4gICAgdGhpcy5fbGFzdFNjcm9sbERpcmVjdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fc2V0U2Nyb2xsRGlyZWN0aW9uID0gc2V0U2Nyb2xsRGlyZWN0aW9uO1xuICAgIHRoaXMuX2lzQXRUb3AgPSBudWxsO1xuICAgIHRoaXMuX3NldElzQXRUb3AgPSBzZXRJc0F0VG9wO1xuICAgIHRoaXMuX2xhc3RTY3JvbGxUb3BCZWZvcmVEaXJlY3Rpb25DaGFuZ2UgPSB0aGlzLl9lbC5zY3JvbGxUb3A7XG4gICAgdGhpcy5fc2Nyb2xsVGhyZXNob2xkID0gc2Nyb2xsVGhyZXNob2xkO1xuXG4gICAgdGhpcy5faXNTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuX3NldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbiA9IHNldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbjtcbiAgfVxuXG4gIGF0dGFjaFNjcm9sbExpc3RlbmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9lbD8udGFnTmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwsIGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwsIGZhbHNlKTtcbiAgfVxuXG4gIGRldGFjaFNjcm9sbExpc3RlbmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9lbD8udGFnTmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwsIGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwsIGZhbHNlKTtcbiAgfVxuXG4gIF9vblNjcm9sbCA9ICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBjdXJyU2Nyb2xsVG9wID0gdGhpcy5fZWwuc2Nyb2xsVG9wO1xuICAgIGlmICh0aGlzLl9pc0F0VG9wICE9PSAoY3VyclNjcm9sbFRvcCA9PT0gMCkpIHtcbiAgICAgIHRoaXMuX2lzQXRUb3AgPSBjdXJyU2Nyb2xsVG9wID09PSAwO1xuICAgICAgdGhpcy5fc2V0SXNBdFRvcChjdXJyU2Nyb2xsVG9wID09PSAwKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xhc3RTY3JvbGxUb3AgPT09IGN1cnJTY3JvbGxUb3ApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgZGlyZWN0aW9uXG4gICAgY29uc3QgY3VyclNjcm9sbERpcmVjdGlvbiA9ICgoKSA9PiB7XG4gICAgICBpZiAoY3VyclNjcm9sbFRvcCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBTY3JvbGxEaXJlY3Rpb24uRE9XTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9sYXN0U2Nyb2xsVG9wIDwgY3VyclNjcm9sbFRvcCA/IFNjcm9sbERpcmVjdGlvbi5ET1dOIDogU2Nyb2xsRGlyZWN0aW9uLlVQO1xuICAgIH0pKCk7XG5cbiAgICAvLyBVcGRhdGUgc3RhdGUsIGlmIGNoYW5nZWRcbiAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wID0gY3VyclNjcm9sbFRvcDtcbiAgICBpZiAodGhpcy5fbGFzdFNjcm9sbERpcmVjdGlvbiAhPT0gY3VyclNjcm9sbERpcmVjdGlvbikge1xuICAgICAgdGhpcy5fbGFzdFNjcm9sbERpcmVjdGlvbiA9IGN1cnJTY3JvbGxEaXJlY3Rpb247XG4gICAgICB0aGlzLl9zZXRTY3JvbGxEaXJlY3Rpb24oY3VyclNjcm9sbERpcmVjdGlvbik7XG5cbiAgICAgIHRoaXMuX2xhc3RTY3JvbGxUb3BCZWZvcmVEaXJlY3Rpb25DaGFuZ2UgPSBjdXJyU2Nyb2xsVG9wO1xuICAgICAgdGhpcy5faXNTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24gPSBudWxsO1xuICAgICAgaWYgKHRoaXMuX3NldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbiAmJiAhdGhpcy5faXNBdFRvcCkge1xuICAgICAgICB0aGlzLl9zZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24obnVsbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9zY3JvbGxUaHJlc2hvbGQgJiYgdGhpcy5fc2V0U2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGVkQW1vdW50ID0gTWF0aC5hYnModGhpcy5fbGFzdFNjcm9sbFRvcEJlZm9yZURpcmVjdGlvbkNoYW5nZSAtIGN1cnJTY3JvbGxUb3ApO1xuICAgICAgICBpZiAoc2Nyb2xsZWRBbW91bnQgPj0gdGhpcy5fc2Nyb2xsVGhyZXNob2xkKSB7XG4gICAgICAgICAgdGhpcy5faXNTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24gPSB0aGlzLl9sYXN0U2Nyb2xsRGlyZWN0aW9uO1xuICAgICAgICAgIHRoaXMuX3NldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbih0aGlzLl9sYXN0U2Nyb2xsRGlyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImNvbnN0IERFRkFVTFRfUk9PVF9NQVJHSU4gPSAnNTBweCc7XG5jb25zdCBERUZBVUxUX1RIUkVTSE9MRCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMSB9KS5tYXAoKF8sIGkpID0+IGkgLyAxMDApO1xuXG5leHBvcnQgdHlwZSBTZXRWaXNpYmxlRW50cmllc0NhbGxiYWNrPFRFbnRyeT4gPSAoXG4gIHZpc2libGU6IE1hcDxURW50cnksIFZpc2libGVFbnRyeURldGFpbFR5cGU+XG4pID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBvblZpc2libGVFbnRyaWVzQ2hhbmdlQ2FsbGJhY2s8VEVudHJ5PiA9IChhcmdzOiB7XG4gIHZpc2libGVFbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W107XG4gIGhpZGRlbkVudHJpZXM6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXTtcbiAgbGFzdEVudHJpZXM6IE1hcDxURW50cnksIFZpc2libGVFbnRyeURldGFpbFR5cGU+O1xufSkgPT4gTWFwPFRFbnRyeSwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT47XG5cbmV4cG9ydCB0eXBlIFZpc2libGVFbnRyeURldGFpbFR5cGUgPSB7XG4gIHJhdGlvOiBudW1iZXI7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzaWJsZUVudHJpZXNEZXRlY3RvcjxURW50cnk+IHtcbiAgX3Jvb3Q6IEVsZW1lbnQ7XG4gIF9vYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4gIF9sYXN0VmlzaWJsZUVudHJpZXM6IE1hcDxURW50cnksIFZpc2libGVFbnRyeURldGFpbFR5cGU+O1xuICBfc2V0VmlzaWJsZUVudHJpZXM6IFNldFZpc2libGVFbnRyaWVzQ2FsbGJhY2s8VEVudHJ5PjtcbiAgX29uVmlzaWJsZUVudHJpZXNDaGFuZ2U6IG9uVmlzaWJsZUVudHJpZXNDaGFuZ2VDYWxsYmFjazxURW50cnk+O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICByb290LFxuICAgIHRocmVzSG9sZCxcbiAgICBzZXRWaXNpYmxlRW50cmllcyxcbiAgICBvblZpc2libGVFbnRyaWVzQ2hhbmdlLFxuICB9OiB7XG4gICAgcm9vdDogRWxlbWVudDtcbiAgICB0aHJlc0hvbGQ/OiBudW1iZXIgfCBBcnJheTxudW1iZXI+O1xuICAgIHNldFZpc2libGVFbnRyaWVzOiBTZXRWaXNpYmxlRW50cmllc0NhbGxiYWNrPFRFbnRyeT47XG4gICAgb25WaXNpYmxlRW50cmllc0NoYW5nZTogb25WaXNpYmxlRW50cmllc0NoYW5nZUNhbGxiYWNrPFRFbnRyeT47XG4gIH0pIHtcbiAgICB0aGlzLl9yb290ID0gcm9vdDtcbiAgICB0aGlzLl9sYXN0VmlzaWJsZUVudHJpZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc2V0VmlzaWJsZUVudHJpZXMgPSBzZXRWaXNpYmxlRW50cmllcztcbiAgICB0aGlzLl9vblZpc2libGVFbnRyaWVzQ2hhbmdlID0gb25WaXNpYmxlRW50cmllc0NoYW5nZTtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcbiAgICAgIGVudHJpZXMgPT4ge1xuICAgICAgICAvLyBDb2xsZWN0IHZpc2libGUgYW5kIGhpZGRlbiBlbGVtZW50c1xuICAgICAgICBjb25zdCB2aXNpYmxlRW50cmllcyA9IGVudHJpZXMuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzSW50ZXJzZWN0aW5nKTtcbiAgICAgICAgY29uc3QgaGlkZGVuRW50cmllcyA9IGVudHJpZXMuZmlsdGVyKGVudHJ5ID0+ICFlbnRyeS5pc0ludGVyc2VjdGluZyk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoYXQgbmVlZHMgc2F2ZWRcbiAgICAgICAgY29uc3QgbmV3VmlzaWJsZUVudHJpZXMgPSB0aGlzLl9vblZpc2libGVFbnRyaWVzQ2hhbmdlKHtcbiAgICAgICAgICB2aXNpYmxlRW50cmllcyxcbiAgICAgICAgICBoaWRkZW5FbnRyaWVzLFxuICAgICAgICAgIGxhc3RFbnRyaWVzOiB0aGlzLl9sYXN0VmlzaWJsZUVudHJpZXMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZyb3plbkVudHJpZXMgPSBuZXcgTWFwKG5ld1Zpc2libGVFbnRyaWVzKTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShmcm96ZW5FbnRyaWVzKTtcbiAgICAgICAgdGhpcy5fbGFzdFZpc2libGVFbnRyaWVzID0gZnJvemVuRW50cmllcztcbiAgICAgICAgdGhpcy5fc2V0VmlzaWJsZUVudHJpZXMoZnJvemVuRW50cmllcyk7XG4gICAgICB9LFxuXG4gICAgICAvLyBEZWZhdWx0IHNldHRpbmcgZm9yIGludGVyc2VjdGlvbiBvYnNlcnZlclxuICAgICAge1xuICAgICAgICByb290OiB0aGlzLl9yb290LnRhZ05hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJyA/IG51bGwgOiB0aGlzLl9yb290LFxuICAgICAgICByb290TWFyZ2luOiBERUZBVUxUX1JPT1RfTUFSR0lOLFxuICAgICAgICB0aHJlc2hvbGQ6IHRocmVzSG9sZCA/IHRocmVzSG9sZCA6IERFRkFVTFRfVEhSRVNIT0xELFxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBvYnNlcnZlTm9kZXMoc2VsZWN0b3I6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLl9yb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IE5vZGVEZXN0aW5hdGlvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvb3V0bGluZSc7XG5pbXBvcnQgeyBQYWdlTnVtYmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9wYWdlJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBsb2dQcm92aWRlcldhcm5pbmcgfSBmcm9tICcuLi91dGlscy9wcm92aWRlcic7XG5pbXBvcnQgeyBnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleCB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbCc7XG5pbXBvcnQgU2Nyb2xsRGV0ZWN0b3IsIHsgU2Nyb2xsRGlyZWN0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3InO1xuaW1wb3J0IFZpc2libGVFbnRyaWVzRGV0ZWN0b3IsIHsgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZSB9IGZyb20gJy4uL3V0aWxzL1Zpc2libGVFbnRyaWVzRGV0ZWN0b3InO1xuXG5jb25zdCBPVVRMSU5FX0FUVFJJQlVURSA9ICdkYXRhLW91dGxpbmUtdGFyZ2V0LWRlc3QnO1xuXG5jb25zdCBPVVRMSU5FX1NFTEVDVE9SID0gJy5wZGYtcmVhZGVyX19wYWdlX19vdXRsaW5lLXRhcmdldCc7XG5cbmNvbnN0IFBBR0VfTlVNQkVSX0FUVFJJQlVURSA9ICdkYXRhLXBhZ2UtbnVtYmVyJztcblxuY29uc3QgUEFHRV9OVU1CRVJfU0VMRUNUT1IgPSBgLnBkZi1yZWFkZXJfX3BhZ2VbJHtQQUdFX05VTUJFUl9BVFRSSUJVVEV9XWA7XG5cbmNvbnN0IERFRkFVTFRfUEFHRV9TQ1JPTExFRF9JTlRPX1ZJRVdfVEhSRVNIT0xEID0gMC4xO1xuXG5jb25zdCBFTVBUWV9OVU1CRVJfVE9fVklTSUJMRV9FTlRSWV9ERVRBSUxfTUFQID0gT2JqZWN0LmZyZWV6ZShcbiAgbmV3IE1hcDxudW1iZXIsIFZpc2libGVFbnRyeURldGFpbFR5cGU+KClcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNjcm9sbENvbnRleHQge1xuICBpc091dGxpbmVUYXJnZXRWaXNpYmxlOiAoZGVzdDogTm9kZURlc3RpbmF0aW9uKSA9PiBib29sZWFuO1xuICBpc1BhZ2VWaXNpYmxlOiAocGFnZU51bWJlcjogUGFnZU51bWJlcikgPT4gYm9vbGVhbjtcbiAgc2Nyb2xsRGlyZWN0aW9uOiBOdWxsYWJsZTxTY3JvbGxEaXJlY3Rpb24+O1xuICB2aXNpYmxlT3V0bGluZVRhcmdldHM6IE1hcDxOb2RlRGVzdGluYXRpb24sIFZpc2libGVFbnRyeURldGFpbFR5cGU+OyAvLyBtYXBwaW5nIG5vZGUgZGVzdGluYXRpb24gd2l0aCB0aGVpciBpbnRlcnNlY3Rpb24gcmF0aW9cbiAgdmlzaWJsZVBhZ2VSYXRpb3M6IE1hcDxudW1iZXIsIFZpc2libGVFbnRyeURldGFpbFR5cGU+OyAvLyBtYXBwaW5nIHBhZ2UgbnVtYmVyIHdpdGggdGhlaXIgaW50ZXJzZWN0aW9uIHJhdGlvXG4gIHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzOiAoKSA9PiB2b2lkO1xuICBzY3JvbGxSb290OiBOdWxsYWJsZTxIVE1MRWxlbWVudD47XG4gIHNldFNjcm9sbFJvb3Q6IChyb290OiBOdWxsYWJsZTxIVE1MRWxlbWVudD4pID0+IHZvaWQ7XG4gIHNjcm9sbFRvT3V0bGluZVRhcmdldDogKGRlc3Q6IE5vZGVEZXN0aW5hdGlvbikgPT4gdm9pZDtcbiAgc2V0U2Nyb2xsVGhyZXNob2xkOiAoc2Nyb2xsVGhyZXNob2xkOiBOdWxsYWJsZTxudW1iZXI+KSA9PiB2b2lkO1xuICBzY3JvbGxUb1BhZ2U6IChwYWdlTnVtYmVyOiBQYWdlTnVtYmVyKSA9PiB2b2lkO1xuICB1cGRhdGVTY3JvbGxQb3NpdGlvbjogKHpvb21NdWx0aXBsaWVyOiBudW1iZXIpID0+IHZvaWQ7XG4gIHNldElzT3V0bGluZUNsaWNrZWQ6IChpc091dGxpbmVHZXRDbGlja2VkOiBib29sZWFuKSA9PiB2b2lkO1xuICBzY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb246IE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj47XG4gIGlzQXRUb3A6IE51bGxhYmxlPGJvb2xlYW4+O1xuICBpc091dGxpbmVDbGlja2VkOiBOdWxsYWJsZTxib29sZWFuPjtcbiAgcGFnZXNTY3JvbGxlZEludG9WaWV3OiBNYXA8bnVtYmVyLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjsgLy8gbWFwcGluZyBwYWdlIG51bWJlciB3aXRoIHRoZWlyIGludGVyc2VjdGlvbiByYXRpb1xuICBzZXRQYWdlU2Nyb2xsZWRJbnRvVmlld1RocmVzaG9sZDogKHRocmVzaG9sZDogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5jb25zdCBERUZBVUxUX0NPTlRFWFQ6IElTY3JvbGxDb250ZXh0ID0ge1xuICBzY3JvbGxEaXJlY3Rpb246IG51bGwsXG4gIHZpc2libGVPdXRsaW5lVGFyZ2V0czogbmV3IE1hcCgpLFxuICB2aXNpYmxlUGFnZVJhdGlvczogbmV3IE1hcCgpLFxuICBpc091dGxpbmVUYXJnZXRWaXNpYmxlOiBvcHRzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGlzT3V0bGluZVRhcmdldFZpc2libGUoJHtKU09OLnN0cmluZ2lmeShvcHRzKX0pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzUGFnZVZpc2libGU6IG9wdHMgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgaXNQYWdlVmlzaWJsZSgke0pTT04uc3RyaW5naWZ5KG9wdHMpfSlgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcmVzZXRTY3JvbGxPYnNlcnZlcnM6ICgpID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzKClgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICB9LFxuICBzY3JvbGxSb290OiA8SFRNTEVsZW1lbnQ+e30sXG4gIHNldFNjcm9sbFJvb3Q6IChfZWw6IE51bGxhYmxlPEhUTUxFbGVtZW50PikgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0U2Nyb2xsUm9vdCguLi4pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgfSxcbiAgc2Nyb2xsVG9PdXRsaW5lVGFyZ2V0OiBkZXN0ID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNjcm9sbFRvT3V0bGluZVRhcmdldCgke2Rlc3R9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG4gIHNldFNjcm9sbFRocmVzaG9sZDogKHNjcm9sbFRocmVzaG9sZDogTnVsbGFibGU8bnVtYmVyPikgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0U2Nyb2xsVGhyZXNob2xkKCR7c2Nyb2xsVGhyZXNob2xkfSlgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICB9LFxuICBzY3JvbGxUb1BhZ2U6IG9wdHMgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2Nyb2xsVG9QYWdlKCR7SlNPTi5zdHJpbmdpZnkob3B0cyl9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uOiB6b29tTXVsdGlwbGllciA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGB1cGRhdGVTY3JvbGxQb3NpdGlvbigke0pTT04uc3RyaW5naWZ5KHpvb21NdWx0aXBsaWVyKX0pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgfSxcbiAgc2V0SXNPdXRsaW5lQ2xpY2tlZDogb3B0cyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRJc091dGxpbmVHZXRDbGlja2VkKCR7SlNPTi5zdHJpbmdpZnkob3B0cyl9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG4gIHNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbjogbnVsbCxcbiAgaXNBdFRvcDogbnVsbCxcbiAgaXNPdXRsaW5lQ2xpY2tlZDogbnVsbCxcbiAgcGFnZXNTY3JvbGxlZEludG9WaWV3OiBuZXcgTWFwKCksXG4gIHNldFBhZ2VTY3JvbGxlZEludG9WaWV3VGhyZXNob2xkOiAodGhyZXNob2xkOiBudW1iZXIpID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHBhZ2VzU2Nyb2xsZWRJbnRvVmlldygke3RocmVzaG9sZH0pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBTY3JvbGxDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJU2Nyb2xsQ29udGV4dD4oREVGQVVMVF9DT05URVhUKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbENvbnRleHRQcm9wcygpOiBJU2Nyb2xsQ29udGV4dCB7XG4gIC8vIE5vZGUgdXNlZCBmb3Igb2JzZXJ2aW5nIHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgY29uc3QgW3Njcm9sbFJvb3QsIHNldFNjcm9sbFJvb3RdID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8SFRNTEVsZW1lbnQ+PihudWxsKTtcblxuICAvLyBEZXRlcm1pbmUgc2Nyb2xsIGRpcmVjdGlvblxuICBjb25zdCBbc2Nyb2xsRGlyZWN0aW9uLCBzZXRTY3JvbGxEaXJlY3Rpb25dID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8U2Nyb2xsRGlyZWN0aW9uPj4obnVsbCk7XG4gIGNvbnN0IFtzY3JvbGxUaHJlc2hvbGQsIHNldFNjcm9sbFRocmVzaG9sZF0gPSBSZWFjdC51c2VTdGF0ZTxOdWxsYWJsZTxudW1iZXI+PihudWxsKTtcbiAgY29uc3QgW3Njcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbiwgc2V0U2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uXSA9XG4gICAgUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8U2Nyb2xsRGlyZWN0aW9uPj4obnVsbCk7XG4gIGNvbnN0IFtpc0F0VG9wLCBzZXRJc0F0VG9wXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPGJvb2xlYW4+PihudWxsKTtcbiAgY29uc3QgW2lzT3V0bGluZUNsaWNrZWQsIHNldElzT3V0bGluZUNsaWNrZWRdID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8Ym9vbGVhbj4+KG51bGwpO1xuXG4gIGNvbnN0IFtwYWdlU2Nyb2xsZWRJbnRvVmlld1RocmVzaG9sZCwgc2V0UGFnZVNjcm9sbGVkSW50b1ZpZXdUaHJlc2hvbGRdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgREVGQVVMVF9QQUdFX1NDUk9MTEVEX0lOVE9fVklFV19USFJFU0hPTERcbiAgKTtcblxuICBjb25zdCBbcGFnZXNTY3JvbGxlZEludG9WaWV3LCBzZXRQYWdlc1Njcm9sbGVkSW50b1ZpZXddID0gUmVhY3QudXNlU3RhdGU8XG4gICAgTWFwPG51bWJlciwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT5cbiAgPigoKSA9PiBFTVBUWV9OVU1CRVJfVE9fVklTSUJMRV9FTlRSWV9ERVRBSUxfTUFQKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHNjcm9sbEVsZW0gPSBzY3JvbGxSb290IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoIXNjcm9sbEVsZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3I6IFNjcm9sbERldGVjdG9yO1xuICAgIGlmICghc2Nyb2xsVGhyZXNob2xkKSB7XG4gICAgICAvLyBzY3JvbGwgdGhyZXNob2xkIGlzIG9wdGlvbmFsXG4gICAgICBzY3JvbGxEaXJlY3Rpb25EZXRlY3RvciA9IG5ldyBTY3JvbGxEZXRlY3RvcihzY3JvbGxFbGVtLCBzZXRTY3JvbGxEaXJlY3Rpb24sIHNldElzQXRUb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JvbGxEaXJlY3Rpb25EZXRlY3RvciA9IG5ldyBTY3JvbGxEZXRlY3RvcihcbiAgICAgICAgc2Nyb2xsRWxlbSxcbiAgICAgICAgc2V0U2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICBzZXRJc0F0VG9wLFxuICAgICAgICBzZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24sXG4gICAgICAgIHNjcm9sbFRocmVzaG9sZFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBzY3JvbGxEaXJlY3Rpb25EZXRlY3Rvci5hdHRhY2hTY3JvbGxMaXN0ZW5lcigpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzY3JvbGxEaXJlY3Rpb25EZXRlY3Rvci5kZXRhY2hTY3JvbGxMaXN0ZW5lcigpO1xuICAgIH07XG4gIH0sIFtzY3JvbGxSb290LCBzY3JvbGxUaHJlc2hvbGRdKTtcblxuICAvLyBDYXVzZXMgdGhlIEludGVyc2VjdGlvbk9ic2VydmVycyB0byBkaXNjb25uZWN0IGFuZCBiZSByZWNyZWF0ZWQgKHVzZWZ1bCB3aGVuIERPTSBjaGFuZ2VzKVxuICBjb25zdCBbb2JzZXJ2ZXJJbmRleCwgc2V0T2JzZXJ2ZXJJbmRleF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcbiAgY29uc3QgcmVzZXRTY3JvbGxPYnNlcnZlcnMgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0T2JzZXJ2ZXJJbmRleChvYnNlcnZlckluZGV4ICsgMSk7XG4gIH0sIFtvYnNlcnZlckluZGV4XSk7XG5cbiAgY29uc3QgW3Zpc2libGVPdXRsaW5lVGFyZ2V0cywgc2V0VmlzaWJsZU91dGxpbmVOb2Rlc10gPSBSZWFjdC51c2VTdGF0ZTxcbiAgICBNYXA8Tm9kZURlc3RpbmF0aW9uLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPlxuICA+KCgpID0+IHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwPE5vZGVEZXN0aW5hdGlvbiwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT4oKTtcbiAgICBPYmplY3QuZnJlZXplKG1hcCk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfSk7XG5cbiAgY29uc3QgW3Zpc2libGVQYWdlUmF0aW9zLCBzZXRWaXNpYmxlUGFnZVJhdGlvc10gPSBSZWFjdC51c2VTdGF0ZTxcbiAgICBNYXA8bnVtYmVyLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPlxuICA+KCgpID0+IEVNUFRZX05VTUJFUl9UT19WSVNJQkxFX0VOVFJZX0RFVEFJTF9NQVApO1xuXG4gIGNvbnN0IGlzT3V0bGluZVRhcmdldFZpc2libGUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZGVzdDogTm9kZURlc3RpbmF0aW9uKTogYm9vbGVhbiA9PiB7XG4gICAgICByZXR1cm4gdmlzaWJsZU91dGxpbmVUYXJnZXRzLmhhcyhkZXN0KTtcbiAgICB9LFxuICAgIFt2aXNpYmxlT3V0bGluZVRhcmdldHNdXG4gICk7XG5cbiAgY29uc3Qgc2Nyb2xsVG9PdXRsaW5lVGFyZ2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soKGRlc3Q6IE5vZGVEZXN0aW5hdGlvbik6IHZvaWQgPT4ge1xuICAgIHNldElzT3V0bGluZUNsaWNrZWQodHJ1ZSk7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1vdXRsaW5lLXRhcmdldC1kZXN0PVwiJHtkZXN0fVwiXWApXG4gICAgICA/LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaXNQYWdlVmlzaWJsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh7IHBhZ2VOdW1iZXIsIHBhZ2VJbmRleCB9OiBQYWdlTnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhZ2VJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFnZU51bWJlciA9IHBhZ2VJbmRleCArIDE7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2aXNpYmxlUGFnZVJhdGlvcy5oYXMocGFnZU51bWJlcik7XG4gICAgfSxcbiAgICBbdmlzaWJsZVBhZ2VSYXRpb3NdXG4gICk7XG5cbiAgY29uc3Qgc2Nyb2xsVG9QYWdlID0gUmVhY3QudXNlQ2FsbGJhY2soKHsgcGFnZU51bWJlciwgcGFnZUluZGV4IH06IFBhZ2VOdW1iZXIpOiB2b2lkID0+IHtcbiAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICBwYWdlSW5kZXggPSBwYWdlTnVtYmVyIC0gMTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRvY3VtZW50XG4gICAgICAuZ2V0RWxlbWVudEJ5SWQoZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgocGFnZUluZGV4KSlcbiAgICAgID8uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gIH0sIFtdKTtcblxuICAvLyBXYXRjaCBvdXRsaW5lIG5vZGVzXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgcm9vdCA9IHNjcm9sbFJvb3QgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNvbnN0IGRldGVjdG9yID0gbmV3IFZpc2libGVFbnRyaWVzRGV0ZWN0b3I8Tm9kZURlc3RpbmF0aW9uPih7XG4gICAgICByb290OiByb290LFxuICAgICAgc2V0VmlzaWJsZUVudHJpZXM6IHNldFZpc2libGVPdXRsaW5lTm9kZXMsXG4gICAgICBvblZpc2libGVFbnRyaWVzQ2hhbmdlOiAoeyB2aXNpYmxlRW50cmllcywgaGlkZGVuRW50cmllcywgbGFzdEVudHJpZXMgfSkgPT4ge1xuICAgICAgICBoaWRkZW5FbnRyaWVzLm1hcChlbnRyeSA9PlxuICAgICAgICAgIGxhc3RFbnRyaWVzLmRlbGV0ZShlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKE9VVExJTkVfQVRUUklCVVRFKSlcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3RW50cmllcyA9IG5ldyBNYXAobGFzdEVudHJpZXMpO1xuICAgICAgICB2aXNpYmxlRW50cmllcy5tYXAoZW50cnkgPT5cbiAgICAgICAgICBuZXdFbnRyaWVzLnNldChlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKE9VVExJTkVfQVRUUklCVVRFKSwge1xuICAgICAgICAgICAgcmF0aW86IGVudHJ5LmludGVyc2VjdGlvblJhdGlvLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBlbnRyeS50aW1lLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBuZXdFbnRyaWVzO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBkZXRlY3Rvci5vYnNlcnZlTm9kZXMoT1VUTElORV9TRUxFQ1RPUik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRldGVjdG9yLmRlc3Ryb3koKTtcbiAgICB9O1xuICB9LCBbc2Nyb2xsUm9vdCwgb2JzZXJ2ZXJJbmRleF0pO1xuXG4gIC8vIFdhdGNoIHBhZ2VzXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgcm9vdCA9IHNjcm9sbFJvb3QgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNvbnN0IGRldGVjdG9yID0gbmV3IFZpc2libGVFbnRyaWVzRGV0ZWN0b3I8bnVtYmVyPih7XG4gICAgICByb290OiByb290LFxuICAgICAgc2V0VmlzaWJsZUVudHJpZXM6IHNldFZpc2libGVQYWdlUmF0aW9zLFxuICAgICAgb25WaXNpYmxlRW50cmllc0NoYW5nZTogKHsgdmlzaWJsZUVudHJpZXMsIGhpZGRlbkVudHJpZXMsIGxhc3RFbnRyaWVzIH0pID0+IHtcbiAgICAgICAgaWYgKGhpZGRlbkVudHJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgbWF4VGltZSA9IE1hdGgubWF4KC4uLmhpZGRlbkVudHJpZXMubWFwKGUgPT4gZS50aW1lKSk7XG4gICAgICAgICAgY29uc3QgaGlkZGVuUGFnZU51bXMgPSBoaWRkZW5FbnRyaWVzLm1hcChcbiAgICAgICAgICAgIGUgPT4gZS50YXJnZXQ/LmdldEF0dHJpYnV0ZShQQUdFX05VTUJFUl9BVFRSSUJVVEUpIHx8ICcnXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIGR1ZSB0byB1cHBlciBsaW1pdCBvbiBob3cgZmFzdCB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyIEFQSSBjYW4gc2FtcGxlIGFuZCBob3cgZmFzdCBicm93c2VycyBjYW4gcmVuZGVyIChoYXBwZW5zIHdoZW4gdXNlcnMgc2Nyb2xsIGZhc3QpXG4gICAgICAgICAgLy8gc29tZXRpbWVzIGVudHJpZXMgd2lsbCBub3QgYmUgc2lnbmFsZWQgYXMgaGlkZGVuLCBtZWFuaW5nIHRoZXkgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBsYXN0RW50cmllcyBidXQgd2VyZW4ndFxuICAgICAgICAgIC8vIHNvIGlmIGFuIGVudHJ5IGhhcyBhIHRpbWVzdGFtcCB0aGF0cyBvbGRlciB0aGVuIGFuIGVudHJ5IHdlIGFyZSBjdXJyZW50bHkgcmVtb3ZpbmcsIHdlIGNhbiBhc3N1bWUgaXRzIFwic3RhbGVcIiBhbmQgZGVsZXRlXG4gICAgICAgICAgLy8gbW9yZSBkZXRhaWxzIGFib3V0IHRoaXMgaXNzdWUgaGVyZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjE5NTEzODAvaW50ZXJzZWN0aW9uLW9ic2VydmVyLWZhaWxzLXNvbWV0aW1lcy13aGVuLWktc2Nyb2xsLWZhc3RcblxuICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGxhc3RFbnRyaWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnRpbWVzdGFtcCA8PSBtYXhUaW1lIHx8IGhpZGRlblBhZ2VOdW1zLmluY2x1ZGVzKFN0cmluZyhrZXkpKSkge1xuICAgICAgICAgICAgICBsYXN0RW50cmllcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3RW50cmllcyA9IG5ldyBNYXAobGFzdEVudHJpZXMpO1xuICAgICAgICB2aXNpYmxlRW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICAgIG5ld0VudHJpZXMuc2V0KHBhcnNlSW50KGVudHJ5LnRhcmdldD8uZ2V0QXR0cmlidXRlKFBBR0VfTlVNQkVSX0FUVFJJQlVURSkgfHwgJycsIDEwKSwge1xuICAgICAgICAgICAgcmF0aW86IGVudHJ5LmludGVyc2VjdGlvblJhdGlvLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBlbnRyeS50aW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld0VudHJpZXM7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGRldGVjdG9yLm9ic2VydmVOb2RlcyhQQUdFX05VTUJFUl9TRUxFQ1RPUik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRldGVjdG9yLmRlc3Ryb3koKTtcbiAgICB9O1xuICB9LCBbc2Nyb2xsUm9vdCwgb2JzZXJ2ZXJJbmRleF0pO1xuXG4gIC8vIG1hcCBvZiBwYWdlcyBhdCB0aGUgbW9tZW50IHRoZXkgYXJlIHNjcm9sbGVkIGludG8gdmlldywgdXNlZnVsIGZvciB0cmFja2luZyBhbmFseXRpY3Mgc3VjaCBhcyBwYWdlIGltcHJlc3Npb25zXG4gIC8vIGRpZmZlcmVudCB0aGFuIHRoZSB2aXNpYmxlUGFnZVJhdGlvcyBpbiB0aGF0IGl0IG9ubHkgc2F2ZXMgdGhlIH5pbml0aWFsfiBwb2ludCBvZiB3aGVuIGEgcGFnZSBjb21lcyBpbnRvIHZpZXdcbiAgLy8gaXQgZG9lc24ndCB0cmFjayB0aGUgbGl2ZSBjaGFuZ2UgaW4gcmF0aW9zIGFzIHRoZSBwYWdlIHJlbWFpbnMgaW4gdmlldyB3aGVuIHNjcm9sbGVkXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgcm9vdCA9IHNjcm9sbFJvb3QgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNvbnN0IGRldGVjdG9yID0gbmV3IFZpc2libGVFbnRyaWVzRGV0ZWN0b3I8bnVtYmVyPih7XG4gICAgICByb290OiByb290LFxuICAgICAgdGhyZXNIb2xkOiBwYWdlU2Nyb2xsZWRJbnRvVmlld1RocmVzaG9sZCxcbiAgICAgIHNldFZpc2libGVFbnRyaWVzOiBzZXRQYWdlc1Njcm9sbGVkSW50b1ZpZXcsXG4gICAgICBvblZpc2libGVFbnRyaWVzQ2hhbmdlOiAoeyB2aXNpYmxlRW50cmllcyB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0VudHJpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZpc2libGVFbnRyaWVzLm1hcChlbnRyeSA9PiB7XG4gICAgICAgICAgbmV3RW50cmllcy5zZXQoXG4gICAgICAgICAgICBwYXJzZUludChlbnRyeS50YXJnZXQ/LmdldEF0dHJpYnV0ZShQQUdFX05VTUJFUl9BVFRSSUJVVEUpIHx8ICcnLCAxMCksXG4gICAgICAgICAgICBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpb1xuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3RW50cmllcztcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgZGV0ZWN0b3Iub2JzZXJ2ZU5vZGVzKFBBR0VfTlVNQkVSX1NFTEVDVE9SKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGV0ZWN0b3IuZGVzdHJveSgpO1xuICAgIH07XG4gIH0sIFtzY3JvbGxSb290LCBvYnNlcnZlckluZGV4XSk7XG5cbiAgLy8gY2FsY3VsYXRlcyBhIG5ldyBzY3JvbGwgcG9zaXRpb24gYWZ0ZXIgem9vbWluZyBpbi9vdXQgc28gdXNlciBkb2VzbnQgbG9zZSB0aGVpciBwb3NpdGlvblxuICBjb25zdCB1cGRhdGVTY3JvbGxQb3NpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh6b29tTXVsdGlwbGllcjogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCByb290ID0gc2Nyb2xsUm9vdCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3U2Nyb2xsVG9wID0gTWF0aC5mbG9vcihyb290LnNjcm9sbFRvcCAqIHpvb21NdWx0aXBsaWVyKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByb290LnNjcm9sbFRvcCA9IG5ld1Njcm9sbFRvcDtcbiAgICAgIH0sIDApO1xuICAgIH0sXG4gICAgW3Njcm9sbFJvb3RdXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc091dGxpbmVUYXJnZXRWaXNpYmxlLFxuICAgIGlzUGFnZVZpc2libGUsXG4gICAgc2Nyb2xsRGlyZWN0aW9uLFxuICAgIHZpc2libGVPdXRsaW5lVGFyZ2V0cyxcbiAgICB2aXNpYmxlUGFnZVJhdGlvcyxcbiAgICByZXNldFNjcm9sbE9ic2VydmVycyxcbiAgICBzY3JvbGxSb290LFxuICAgIHNldFNjcm9sbFJvb3QsXG4gICAgc2Nyb2xsVG9PdXRsaW5lVGFyZ2V0LFxuICAgIHNldFNjcm9sbFRocmVzaG9sZCxcbiAgICBzY3JvbGxUb1BhZ2UsXG4gICAgdXBkYXRlU2Nyb2xsUG9zaXRpb24sXG4gICAgc2V0SXNPdXRsaW5lQ2xpY2tlZCxcbiAgICBzY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24sXG4gICAgaXNBdFRvcCxcbiAgICBpc091dGxpbmVDbGlja2VkLFxuICAgIHBhZ2VzU2Nyb2xsZWRJbnRvVmlldyxcbiAgICBzZXRQYWdlU2Nyb2xsZWRJbnRvVmlld1RocmVzaG9sZCxcbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3V0aWxzJztcbmltcG9ydCB7IGxvZ1Byb3ZpZGVyV2FybmluZyB9IGZyb20gJy4uL3V0aWxzL3Byb3ZpZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBJVWlDb250ZXh0IHtcbiAgZXJyb3JNZXNzYWdlOiBOdWxsYWJsZTxzdHJpbmc+O1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGlzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXk6IGJvb2xlYW47XG4gIGlzU2hvd2luZ091dGxpbmU6IGJvb2xlYW47XG4gIGlzU2hvd2luZ1RleHRIaWdobGlnaHQ6IGJvb2xlYW47XG4gIGlzU2hvd2luZ1RodW1ibmFpbDogYm9vbGVhbjtcbiAgc2V0RXJyb3JNZXNzYWdlOiAoZXJyb3JNZXNzYWdlOiBOdWxsYWJsZTxzdHJpbmc+KSA9PiB2b2lkO1xuICBzZXRJc0xvYWRpbmc6IChpc0xvYWRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHNldElzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXk6IChpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5OiBib29sZWFuKSA9PiB2b2lkO1xuICBzZXRJc1Nob3dpbmdPdXRsaW5lOiAoaXNTaG93aW5nT3V0bGluZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0SXNTaG93aW5nVGV4dEhpZ2hsaWdodDogKGlzU2hvd2luZ1RleHRIaWdobGlnaHQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHNldElzU2hvd2luZ1RodW1ibmFpbDogKGlzU2hvd2luZ1RodW1ibmFpbDogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IFVpQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SVVpQ29udGV4dD4oe1xuICBlcnJvck1lc3NhZ2U6IG51bGwsXG4gIGlzTG9hZGluZzogZmFsc2UsXG4gIGlzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXk6IGZhbHNlLFxuICBpc1Nob3dpbmdPdXRsaW5lOiBmYWxzZSxcbiAgaXNTaG93aW5nVGV4dEhpZ2hsaWdodDogZmFsc2UsXG4gIGlzU2hvd2luZ1RodW1ibmFpbDogZmFsc2UsXG4gIHNldEVycm9yTWVzc2FnZTogZXJyb3JNZXNzYWdlID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldEVycm9yTWVzc2FnZSgke2Vycm9yTWVzc2FnZX0pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxuICBzZXRJc1Nob3dpbmdPdXRsaW5lOiBpc1Nob3dpbmdPdXRsaW5lID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldElzU2hvd2luZ091dGxpbmUoJHtpc1Nob3dpbmdPdXRsaW5lfSlgLCAnVWlDb250ZXh0Jyk7XG4gIH0sXG4gIHNldElzTG9hZGluZzogaXNMb2FkaW5nID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldElzTG9hZGluZygke2lzTG9hZGluZ30pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxuICBzZXRJc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5OiBpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5ID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldElzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXkoJHtpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5fSlgLCAnVWlDb250ZXh0Jyk7XG4gIH0sXG4gIHNldElzU2hvd2luZ1RleHRIaWdobGlnaHQ6IGlzU2hvd2luZ1RleHRIaWdobGlnaHQgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0SXNTaG93aW5nVGV4dEhpZ2hsaWdodCgke2lzU2hvd2luZ1RleHRIaWdobGlnaHR9KWAsICdVaUNvbnRleHQnKTtcbiAgfSxcbiAgc2V0SXNTaG93aW5nVGh1bWJuYWlsOiBpc1Nob3dpbmdUaHVtYm5haWwgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0SXNTaG93aW5nVGh1bWJuYWlsKCR7aXNTaG93aW5nVGh1bWJuYWlsfSlgLCAnVWlDb250ZXh0Jyk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVVpQ29udGV4dFByb3BzKCk6IElVaUNvbnRleHQge1xuICBjb25zdCBbZXJyb3JNZXNzYWdlLCBzZXRFcnJvck1lc3NhZ2VdID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8c3RyaW5nPj4obnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcbiAgY29uc3QgW2lzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXksIHNldElzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXldID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbaXNTaG93aW5nT3V0bGluZSwgc2V0SXNTaG93aW5nT3V0bGluZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtpc1Nob3dpbmdUZXh0SGlnaGxpZ2h0LCBzZXRJc1Nob3dpbmdUZXh0SGlnaGxpZ2h0XSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2lzU2hvd2luZ1RodW1ibmFpbCwgc2V0SXNTaG93aW5nVGh1bWJuYWlsXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICByZXR1cm4ge1xuICAgIGVycm9yTWVzc2FnZSxcbiAgICBpc0xvYWRpbmcsXG4gICAgaXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheSxcbiAgICBpc1Nob3dpbmdPdXRsaW5lLFxuICAgIGlzU2hvd2luZ1RleHRIaWdobGlnaHQsXG4gICAgaXNTaG93aW5nVGh1bWJuYWlsLFxuICAgIHNldEVycm9yTWVzc2FnZSxcbiAgICBzZXRJc0xvYWRpbmcsXG4gICAgc2V0SXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheSxcbiAgICBzZXRJc1Nob3dpbmdPdXRsaW5lLFxuICAgIHNldElzU2hvd2luZ1RleHRIaWdobGlnaHQsXG4gICAgc2V0SXNTaG93aW5nVGh1bWJuYWlsLFxuICB9O1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoZXJyb3I6IGFueSk6IHN0cmluZyB7XG4gIGlmICghZXJyb3IpIHtcbiAgICByZXR1cm4gJ1Vua25vd24gZXJyb3InO1xuICB9XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvci5lcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3IuZXJyb3I7XG4gIH1cbiAgcmV0dXJuIGVycm9yLnRvU3RyaW5nKCk7XG59XG4iLCJpbXBvcnQgeyBwZGZqcyB9IGZyb20gJ3JlYWN0LXBkZic7XG5cbi8vIFNldCBQREZqcyB3b3JrZXIgc291cmNlIG9yIGVsc2UgUERGIHdpbGwgbm90IGxvYWQgd2hlbiB0aGlzIGxpYnJhcnkgaXMgaW1wb3J0ZWQgYXMgYSBwYWNrYWdlLlxuZXhwb3J0IGZ1bmN0aW9uIGluaXRQZGZXb3JrZXIoKTogdm9pZCB7XG4gIHBkZmpzLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gYC8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3BkZi5qcy8ke3BkZmpzLnZlcnNpb259L3BkZi53b3JrZXIubWluLmpzYDtcbn1cbiIsImV4cG9ydCBjb25zdCBSRU5ERVJfVFlQRSA9IHtcbiAgTVVMVElfQ0FOVkFTOiAnbXVsdGktY2FudmFzJyxcbiAgU0lOR0xFX0NBTlZBUzogJ3NpbmdsZS1jYW52YXMnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgUmVuZGVyVHlwZSA9IHR5cGVvZiBSRU5ERVJfVFlQRVtrZXlvZiB0eXBlb2YgUkVOREVSX1RZUEVdO1xuXG5leHBvcnQgdHlwZSBSZW5kZXJNb2RlID0gJ2NhbnZhcycgfCAnbm9uZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW5kZXJNb2RlKHJlbmRlclR5cGU6IFJlbmRlclR5cGUpOiBSZW5kZXJNb2RlIHtcbiAgc3dpdGNoIChyZW5kZXJUeXBlKSB7XG4gICAgY2FzZSBSRU5ERVJfVFlQRS5TSU5HTEVfQ0FOVkFTOlxuICAgICAgcmV0dXJuICdub25lJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdjYW52YXMnO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGFzc05hbWVTdWZmaXhGcm9tUmVuZGVyVHlwZShyZW5kZXJUeXBlOiBSZW5kZXJUeXBlKTogc3RyaW5nIHtcbiAgc3dpdGNoIChyZW5kZXJUeXBlKSB7XG4gICAgY2FzZSBSRU5ERVJfVFlQRS5TSU5HTEVfQ0FOVkFTOlxuICAgICAgcmV0dXJuICdzaW5nbGUtY2FudmFzJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdtdWx0aS1jYW52YXMnO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveCc7XG5cbi8vIERhdGEgZnJvbSByZWFjdC1wZGYvcGRmanMgdGhhdCB3ZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBpeGVsIHNpemUgb2YgdGhlIFBERidzIHBhZ2UocykuXG5leHBvcnQgaW50ZXJmYWNlIElQREZQYWdlUHJveHkge1xuICB1c2VyVW5pdDogbnVtYmVyOyAvLyB0aGUgZGVmYXVsdCBzaXplIG9mIHVuaXRzIGluIDEvNzJuZHMgb2YgYW4gaW5jaFxuICB2aWV3OiBBcnJheTxudW1iZXI+OyAvLyBmb3JtYXQ6IFsgdG9wIGxlZnQgeCBjb29yZGluYXRlLCB0b3AgbGVmdCB5IGNvb3JkaW5hdGUsIGJvdHRvbSByaWdodCB4LCBib3R0b20gcmlnaHQgeV1cbn1cblxuLy8gV2UgYXNzdW1lIDk2IERQSSBmb3IgZGlzcGxheVxuLy8gVE9ETzogVGhlcmUgYXJlIG1vcmUgYWNjdXJhdGUgd2F5cyB0byBkbyB0aGlzLCBidXQgdGhpcyBpcyB3aGF0IFNjaG9sYXJQaGkgZG9lcyBub3dcbmNvbnN0IERQSSA9IDk2O1xuXG4vLyBQREYgdW5pdHMgYXJlIGluIDEvNzJuZHMgb2YgYW4gaW5jaFxuY29uc3QgVVNFUl9VTklUX0RFTk9NSU5BVE9SID0gNzI7XG5cbi8qKlxuICogR2l2ZW4gYSBQREZQYWdlUHJveHksIGNhbGN1bGF0ZXMgdGhlIHNjcmVlbiBwaXhlbCBzaXplIG9mIHRoZSBQREYgcGFnZSBhdCAxMDAlIHNjYWxlXG4gKiBAcGFyYW0gcGFnZSBUaGUgUERGUGFnZVByb3h5IHRvIGNhbGN1bGF0ZSBzaXplIGZvclxuICogQHJldHVybnMgUGl4ZWwgc2l6ZSBvZiBhIHBhZ2UgYXQgMTAwJSBzY2FsZSBhc3N1bWluZyA5NkRQSSBkaXNwbGF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlUGFnZURpbWVuc2lvbnMocGFnZTogSVBERlBhZ2VQcm94eSk6IERpbWVuc2lvbnMge1xuICBjb25zdCBbbGVmdFB4LCB0b3BQeCwgcmlnaHRQeCwgYm90dG9tUHhdID0gcGFnZS52aWV3O1xuICBjb25zdCBQUEkgPSAocGFnZS51c2VyVW5pdCAvIFVTRVJfVU5JVF9ERU5PTUlOQVRPUikgKiBEUEk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IChib3R0b21QeCAtIHRvcFB4KSAqIFBQSSxcbiAgICB3aWR0aDogKHJpZ2h0UHggLSBsZWZ0UHgpICogUFBJLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgUGFnZVJlZmVyZW5jZSB9IGZyb20gJy4vcGFnZSc7XG5cbmV4cG9ydCB0eXBlIERlc3RpbmF0aW9uID0ge1xuICBkZXN0OiBzdHJpbmc7XG4gIHBhZ2VJbmRleDogbnVtYmVyO1xuICBwYWdlTnVtYmVyOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgdGhlIGRlZmluaXRpb24gb2YgdGhlIGZpcnN0IGl0ZW0gd2hlbiBEZXN0aW5hdGlvbiBpcyByZXR1cm5lZCBhcyBhbiBhcnJheS5cbiAqIEl0IGlzIGNyZWF0ZWQgYmFzZWQgb24gdGhlIHNhbWUgY2xhc3MgaW4gJ3JlYWN0LXBkZicgbGlicmFyeTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS93b2p0ZWttYWovcmVhY3QtcGRmL2Jsb2IvY2E0NDUzZjEyM2FmNTFlMmZhZWQzOWE4YTYyODAwOTAxMDMwNDU5YS9zcmMvUmVmLmpzXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWYgaW1wbGVtZW50cyBQYWdlUmVmZXJlbmNlIHtcbiAgbnVtOiBudW1iZXI7XG4gIGdlbjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHsgbnVtLCBnZW4gfTogUGFnZVJlZmVyZW5jZSkge1xuICAgIHRoaXMubnVtID0gbnVtO1xuICAgIHRoaXMuZ2VuID0gZ2VuO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZW4gIT09IDAgPyBgJHt0aGlzLm51bX1SJHt0aGlzLmdlbn1gIDogYCR7dGhpcy5udW19UmA7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERvY3VtZW50LCBEb2N1bWVudFByb3BzLCBwZGZqcyB9IGZyb20gJ3JlYWN0LXBkZic7XG5cbmltcG9ydCB7IERvY3VtZW50Q29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCB7IFNjcm9sbENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1Njcm9sbENvbnRleHQnO1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBVaUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1VpQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRFcnJvck1lc3NhZ2UgfSBmcm9tICcuLi91dGlscy9lcnJvck1lc3NhZ2UnO1xuaW1wb3J0IHsgaW5pdFBkZldvcmtlciB9IGZyb20gJy4uL3V0aWxzL3BkZldvcmtlcic7XG5pbXBvcnQgeyBnZXRSZW5kZXJNb2RlLCBSZW5kZXJUeXBlIH0gZnJvbSAnLi4vdXRpbHMvcmVhZGVyLXV0aWxzJztcbmltcG9ydCB7IGNvbXB1dGVQYWdlRGltZW5zaW9ucywgSVBERlBhZ2VQcm94eSB9IGZyb20gJy4uL3V0aWxzL3NjYWxlJztcbmltcG9ydCB7IHNjcm9sbFRvUG9zaXRpb24gfSBmcm9tICcuLi91dGlscy9zY3JvbGwnO1xuaW1wb3J0IHsgRGVzdGluYXRpb24sIFJlZiB9IGZyb20gJy4vdHlwZXMvZGVzdGluYXRpb24nO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJlbmRlclR5cGU6IFJlbmRlclR5cGU7XG59ICYgRG9jdW1lbnRQcm9wcztcblxuZXhwb3J0IGNvbnN0IERvY3VtZW50V3JhcHBlcjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHJlbmRlclR5cGUsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGluaXRQZGZXb3JrZXIoKTtcblxuICBjb25zdCB7IHBkZkRvY1Byb3h5LCBzZXROdW1QYWdlcywgc2V0TnVtUGFnZXNMb2FkZWQsIHNldFBhZ2VEaW1lbnNpb25zLCBzZXRQZGZEb2NQcm94eSB9ID1cbiAgICBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IHsgcmVzZXRTY3JvbGxPYnNlcnZlcnMsIHVwZGF0ZVNjcm9sbFBvc2l0aW9uIH0gPSBSZWFjdC51c2VDb250ZXh0KFNjcm9sbENvbnRleHQpO1xuICBjb25zdCB7IHJvdGF0aW9uLCBzY2FsZSB9ID0gUmVhY3QudXNlQ29udGV4dChUcmFuc2Zvcm1Db250ZXh0KTtcbiAgY29uc3QgeyBzZXRFcnJvck1lc3NhZ2UsIHNldElzTG9hZGluZyB9ID0gUmVhY3QudXNlQ29udGV4dChVaUNvbnRleHQpO1xuICBjb25zdCBbbGFzdFNjYWxlLCBzZXRMYXN0U2NhbGVdID0gUmVhY3QudXNlU3RhdGUoMSk7IC8vIGFzc3VtaW5nIHRoZSBzY2FsZSBkZWZhdWx0cyB0byAxMDAlXG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RQYWdlKHBkZkRvYzogcGRmanMuUERGRG9jdW1lbnRQcm94eSk6IFByb21pc2U8SVBERlBhZ2VQcm94eT4ge1xuICAgIC8vIGdldFBhZ2UgdXNlcyAxLWluZGV4ZWQgcGFnZU51bWJlciwgbm90IDAtaW5kZXhlZCBwYWdlSW5kZXhcbiAgICByZXR1cm4gcGRmRG9jLmdldFBhZ2UoMSk7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzKCk7XG4gIH0sIFtdKTtcblxuICAvLyBhZnRlciBzY2FsZSBjaGFuZ2VzLCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIHNvIHRoZSB1c2VyIHN0YXlzIGxvb2tpbmcgYXQgdGhlIHNhbWUgcG9zaXRpb24gb2YgdGhlIHBhcGVyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNjYWxlID09PSBsYXN0U2NhbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgem9vbU11bHRpcGxpZXIgPSBzY2FsZSAvIGxhc3RTY2FsZTtcbiAgICB1cGRhdGVTY3JvbGxQb3NpdGlvbih6b29tTXVsdGlwbGllcik7XG4gICAgc2V0TGFzdFNjYWxlKHNjYWxlKTtcbiAgfSwgW3NjYWxlLCB1cGRhdGVTY3JvbGxQb3NpdGlvbl0pO1xuXG4gIGNvbnN0IG9uUGRmTG9hZFN1Y2Nlc3MgPSBSZWFjdC51c2VDYWxsYmFjaygocGRmRG9jOiBwZGZqcy5QREZEb2N1bWVudFByb3h5KTogdm9pZCA9PiB7XG4gICAgc2V0TnVtUGFnZXNMb2FkZWQoMCk7XG4gICAgc2V0TnVtUGFnZXMocGRmRG9jLm51bVBhZ2VzKTtcbiAgICBnZXRGaXJzdFBhZ2UocGRmRG9jKVxuICAgICAgLnRoZW4ocGFnZSA9PiB7XG4gICAgICAgIHNldFBhZ2VEaW1lbnNpb25zKGNvbXB1dGVQYWdlRGltZW5zaW9ucyhwYWdlKSk7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZShudWxsKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBzZXRFcnJvck1lc3NhZ2UoZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICBpZiAoIXBkZkRvY1Byb3h5KSB7XG4gICAgICBzZXRQZGZEb2NQcm94eShwZGZEb2MpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IG9uUGRmTG9hZEVycm9yID0gUmVhY3QudXNlQ2FsbGJhY2soKGVycm9yOiB1bmtub3duKTogdm9pZCA9PiB7XG4gICAgc2V0RXJyb3JNZXNzYWdlKGdldEVycm9yTWVzc2FnZShlcnJvcikpO1xuICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBvbkl0ZW1DbGlja2VkID0gKHBhcmFtOiBEZXN0aW5hdGlvbik6IHZvaWQgPT4ge1xuICAgIGlmICghcGRmRG9jUHJveHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTY3JvbGwgdG8gdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSBpdGVtXG4gICAgcGRmRG9jUHJveHkuZ2V0RGVzdGluYXRpb24ocGFyYW0uZGVzdCkudGhlbihkZXN0QXJyYXkgPT4ge1xuICAgICAgaWYgKCFkZXN0QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbcmVmLCAsICwgYm90dG9tUG9pbnRzXSA9IGRlc3RBcnJheTtcbiAgICAgIHBkZkRvY1Byb3h5LmdldFBhZ2VJbmRleChuZXcgUmVmKHJlZikpLnRoZW4ocmVmSW5mbyA9PiB7XG4gICAgICAgIHNjcm9sbFRvUG9zaXRpb24ocGFyc2VJbnQocmVmSW5mby50b1N0cmluZygpKSwgMCwgYm90dG9tUG9pbnRzLCByb3RhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxEb2N1bWVudFxuICAgICAgb3B0aW9ucz17eyBjTWFwVXJsOiAnY21hcHMvJywgY01hcFBhY2tlZDogdHJ1ZSB9fVxuICAgICAgb25Mb2FkRXJyb3I9e29uUGRmTG9hZEVycm9yfVxuICAgICAgb25Mb2FkU3VjY2Vzcz17b25QZGZMb2FkU3VjY2Vzc31cbiAgICAgIGV4dGVybmFsTGlua1RhcmdldD1cIl9ibGFua1wiXG4gICAgICByZW5kZXJNb2RlPXtnZXRSZW5kZXJNb2RlKHJlbmRlclR5cGUpfVxuICAgICAgLy8gQHRzLWlnbm9yZTogdGhlIGFyZ3VtZW50cyBzaG91bGQgYmUgeyBkZXN0LCBwYWdlSW5kZXgsIHBhZ2VOdW1iZXIgfVxuICAgICAgLy8gQHR5cGVzL3JlYWN0LXBkZiBoYXNuJ3QgdXBkYXRlZCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9ibG9iL2Q3M2ViNjUyZTBiYThmODkzOTVhMGVmMmJhNjljZjFlNjQwY2U1YmUvdHlwZXMvcmVhY3QtcGRmL2Rpc3QvRG9jdW1lbnQuZC50cyNMNzJcbiAgICAgIG9uSXRlbUNsaWNrPXtvbkl0ZW1DbGlja2VkfVxuICAgICAgey4uLmV4dHJhUHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRG9jdW1lbnQ+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcGRmVXJsOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEhUTUwgYW5jaG9yIHRhZyBhbGxvd3MgeW91IHRvIGRvd25sb2FkIGEgZmlsZSBmcm9tIHRoZSBzYW1lIG9yaWdpbi5cbiAqIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGRvd25sb2FkIGEgZmlsZSBzZXJ2ZWQgZnJvbSBhIGRpZmZlcmVudCBvcmlnaW5cbiAqL1xuZXhwb3J0IGNvbnN0IERvd25sb2FkQnV0dG9uOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBwZGZVcmwsXG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IFtmZXRjaGluZywgc2V0RmV0Y2hpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGRvd25sb2FkID0gKCkgPT4ge1xuICAgIHNldEZldGNoaW5nKHRydWUpO1xuXG4gICAgZmV0Y2gocGRmVXJsKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYmxvYigpKVxuICAgICAgLnRoZW4oYmxvYiA9PiB7XG4gICAgICAgIHNldEZldGNoaW5nKGZhbHNlKTtcbiAgICAgICAgY29uc3QgYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGEuaHJlZiA9IGJsb2JVUkw7XG4gICAgICAgIGEuZG93bmxvYWQgPSBwZGZVcmwuc3BsaXQoJy8nKS5wb3AoKSB8fCBwZGZVcmw7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgIGEuY2xpY2soKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgZGlzYWJsZWQ9e2ZldGNoaW5nfVxuICAgICAgb25DbGljaz17KCkgPT4gZG93bmxvYWQoKX1cbiAgICAgIGFyaWEtbGFiZWw9XCJEb3dubG9hZCBQREZcIlxuICAgICAgY2xhc3NOYW1lPXtgcGRmLXJlYWRlcl9fZG93bmxvYWQtYnRuICR7Y2xhc3NOYW1lfWB9XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6ICdEb3dubG9hZCd9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlLCBjb21wdXRlUGFnZVN0eWxlIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgUHJvcHMgYXMgQm91bmRpbmdCb3hQcm9wcyB9IGZyb20gJy4vQm91bmRpbmdCb3gnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdEVsZW1lbnQ8Qm91bmRpbmdCb3hQcm9wcz4gfCBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8Qm91bmRpbmdCb3hQcm9wcz4+O1xuICBwYWdlSW5kZXg6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBIaWdobGlnaHRPdmVybGF5OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgcGFnZUluZGV4LFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuICBjb25zdCBtYXNrSWQgPSBgaGlnaGxpZ2h0LW92ZXJsYXktbWFzay0ke3BhZ2VJbmRleH1gO1xuXG4gIGNvbnN0IGdldFBhZ2VTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gY29tcHV0ZVBhZ2VTdHlsZShwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlKTtcbiAgfSwgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdKTtcblxuICBjb25zdCBnZXRVbm1hc2tlZEFyZWEgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICBib3VuZGluZ0JveGVzOlxuICAgICAgICB8IFJlYWN0LlJlYWN0RWxlbWVudDxCb3VuZGluZ0JveFByb3BzPlxuICAgICAgICB8IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudDxCb3VuZGluZ0JveFByb3BzPj5cbiAgICApID0+IHtcbiAgICAgIGNvbnN0IGJveGVzID0gQXJyYXkuaXNBcnJheShib3VuZGluZ0JveGVzKSA/IGJvdW5kaW5nQm94ZXMgOiBbYm91bmRpbmdCb3hlc107XG4gICAgICByZXR1cm4gYm94ZXMubWFwKChib3gsIGkpID0+IHtcbiAgICAgICAgY29uc3QgYm94U3R5bGUgPSBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShib3gucHJvcHMsIHBhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGUpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxyZWN0IHN0eWxlPXtib3hTdHlsZX0geD17Ym94U3R5bGUubGVmdH0geT17Ym94U3R5bGUudG9wfSBrZXk9e2l9IGZpbGw9XCJibGFja1wiPjwvcmVjdD5cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3BhZ2UtaGlnaGxpZ2h0LW92ZXJsYXlcIiBzdHlsZT17Z2V0UGFnZVN0eWxlKCl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIDxzdmcgY2xhc3NOYW1lPVwicGFnZS1tYXNrXCIgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfT5cbiAgICAgICAgPG1hc2sgaWQ9e21hc2tJZH0+XG4gICAgICAgICAgPHJlY3Qgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfSBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XG4gICAgICAgICAge2NoaWxkcmVuICYmIGdldFVubWFza2VkQXJlYShjaGlsZHJlbil9XG4gICAgICAgIDwvbWFzaz5cbiAgICAgICAgPHJlY3Qgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfSBmaWxsPVwid2hpdGVcIiBvcGFjaXR5PVwiMC42XCIgbWFzaz17YHVybCgjJHttYXNrSWR9KWB9PjwvcmVjdD5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgSWNvbkZsYWcgfSBmcm9tICcuLi9pY29uL0ljb25GbGFnJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuLi90eXBlcy9ib3VuZGluZ0JveCc7XG5cbmV4cG9ydCBjb25zdCBQT1NJVElPTiA9IHtcbiAgTEVGVDogJ0xFRlQnLFxuICBSSUdIVDogJ1JJR0hUJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFBvc2l0aW9uVHlwZSA9IHR5cGVvZiBQT1NJVElPTltrZXlvZiB0eXBlb2YgUE9TSVRJT05dO1xuXG50eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGZsYWdXaWR0aD86IG51bWJlcjsgLy8gaW4gcHhcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIG9yaWdpblRvcD86IG51bWJlcjsgLy8gaW4gcHhcbiAgcG9zaXRpb24/OiBQb3NpdGlvblR5cGU7XG4gIHRhaWxMZW5ndGg/OiBudW1iZXI7IC8vIGluIHB4XG4gIHRhaWxXaWRndGg/OiBudW1iZXI7IC8vIGluIHB4XG59O1xuXG5jb25zdCBERUZBVUxUX09SSUdJTl9UT1BfUFggPSAwO1xuY29uc3QgREVGQVVMVF9GTEFHX1dJRFRIX1BYID0gNzU7XG5jb25zdCBERUZBVUxUX0ZMQUdfSEVJR0hUX1BYID0gMjA7XG5jb25zdCBERUZBVUxUX1RBSUxfTEVOR1RIX1BYID0gNDA7XG5jb25zdCBERUZBVUxUX1RBSUxfV0lEVEhfUFggPSA3O1xuXG5leHBvcnQgY29uc3QgQXJyb3dGbGFnQmFzZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBsYWJlbCxcbiAgZmxhZ1dpZHRoLFxuICBvcmlnaW5Ub3AsXG4gIHBvc2l0aW9uID0gUE9TSVRJT04uTEVGVCxcbiAgdGFpbExlbmd0aCxcbiAgdGFpbFdpZGd0aCxcbiAgLi4uZXh0cmFQcm9wc1xufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBwYWdlRGltZW5zaW9ucyB9ID0gUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IHJvdGF0aW9uLCBzY2FsZSB9ID0gUmVhY3QudXNlQ29udGV4dChUcmFuc2Zvcm1Db250ZXh0KTtcbiAgLy8gZnVuY3Rpb24gZm9yIHNjYWxpbmcgYm91bmRpbmcgYm94ZXMgYmFzZWQgb24gY3VycmVudCBkb2N1bWVudCBzdGF0ZXNcbiAgY29uc3QgY29tcHV0ZVNpemUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoYm94OiBTaXplKTogU2l6ZSA9PiBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShib3gsIHBhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGUpLFxuICAgIFtwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlLCBvcmlnaW5Ub3BdXG4gICk7XG5cbiAgLy8gYm91bmRpbmcgYm94IG9mIHRoZSBmbGFnXG4gIGNvbnN0IGZsYWdTaXplID0ge1xuICAgIHRvcDogb3JpZ2luVG9wIHx8IERFRkFVTFRfT1JJR0lOX1RPUF9QWCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogREVGQVVMVF9GTEFHX0hFSUdIVF9QWCxcbiAgICB3aWR0aDogZmxhZ1dpZHRoIHx8IERFRkFVTFRfRkxBR19XSURUSF9QWCxcbiAgfTtcbiAgLy8gYm91bmRpbmcgYm94IG9mIHRoZSB0YWlsXG4gIGNvbnN0IHRhaWxTaXplID0ge1xuICAgIHRvcDogb3JpZ2luVG9wIHx8IERFRkFVTFRfT1JJR0lOX1RPUF9QWCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogdGFpbExlbmd0aCB8fCBERUZBVUxUX1RBSUxfTEVOR1RIX1BYLFxuICAgIHdpZHRoOiB0YWlsV2lkZ3RoIHx8IERFRkFVTFRfVEFJTF9XSURUSF9QWCxcbiAgfTtcblxuICBjb25zdCBjb21wdXRlZEZsYWdTaXplID0gY29tcHV0ZVNpemUoZmxhZ1NpemUpO1xuICBjb25zdCBjb21wdXRlZFRhaWxTaXplID0gY29tcHV0ZVNpemUodGFpbFNpemUpO1xuXG4gIGNvbnN0IHRhaWxQb3NpdGlvbiA9IHtcbiAgICB0b3A6IGNvbXB1dGVkVGFpbFNpemUudG9wLFxuICAgIGxlZnQ6IHBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUID8gLWNvbXB1dGVkVGFpbFNpemUud2lkdGggOiBwYWdlRGltZW5zaW9ucy53aWR0aCAqIHNjYWxlLFxuICAgIGhlaWdodDogY29tcHV0ZWRUYWlsU2l6ZS5oZWlnaHQsXG4gICAgd2lkdGg6IGNvbXB1dGVkVGFpbFNpemUud2lkdGgsXG4gIH07XG5cbiAgY29uc3QgcmVuZGVyRmxhZyA9ICgpID0+IHtcbiAgICBjb25zdCB7IHRvcCwgd2lkdGgsIGhlaWdodCB9ID0gY29tcHV0ZWRGbGFnU2l6ZTtcbiAgICBjb25zdCBmbGFnUG9zaXRpb24gPSB7XG4gICAgICB0b3AsXG4gICAgICBoZWlnaHQsXG4gICAgICB3aWR0aCxcbiAgICAgIGxlZnQ6XG4gICAgICAgIHBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUXG4gICAgICAgICAgPyAtY29tcHV0ZWRUYWlsU2l6ZS53aWR0aFxuICAgICAgICAgIDogdGFpbFBvc2l0aW9uLmxlZnQgKyB0YWlsUG9zaXRpb24ud2lkdGggLSB3aWR0aCArIDEsXG4gICAgfTtcbiAgICBjb25zdCBsYWJlbFBvc2l0aW9uID0gcG9zaXRpb24gPT09IFBPU0lUSU9OLkxFRlQgPyAnNDclJyA6ICc1MyUnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fYXJyb3ctZmxhZy1iYXNlX19mbGFnXCIgc3R5bGU9e2ZsYWdQb3NpdGlvbn0+XG4gICAgICAgIDxJY29uRmxhZyBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19hcnJvdy1mbGFnLWJhc2VfX2ZsYWctaWNvblwiIGhlYWRlclBvc2l0aW9uPXtwb3NpdGlvbn0+XG4gICAgICAgICAgPHRleHRcbiAgICAgICAgICAgIHg9e2xhYmVsUG9zaXRpb259XG4gICAgICAgICAgICB5PVwiNTQlXCJcbiAgICAgICAgICAgIGRvbWluYW50QmFzZWxpbmU9XCJtaWRkbGVcIlxuICAgICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19hcnJvdy1mbGFnLWJhc2VfX2ZsYWctbGFiZWxcIj5cbiAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICA8L3RleHQ+XG4gICAgICAgIDwvSWNvbkZsYWc+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BkZi1yZWFkZXJfX2Fycm93LWZsYWctYmFzZScsIGNsYXNzTmFtZSl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fYXJyb3ctZmxhZy1iYXNlX190YWlsXCIgc3R5bGU9e3RhaWxQb3NpdGlvbn0gLz5cbiAgICAgIHtsYWJlbCAmJiByZW5kZXJGbGFnKCl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBQT1NJVElPTiwgUG9zaXRpb25UeXBlIH0gZnJvbSAnLi4vbWFya2VyL0Fycm93RmxhZ0Jhc2UnO1xuXG50eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJQb3NpdGlvbj86IFBvc2l0aW9uVHlwZTtcbn07XG5cbmV4cG9ydCBjb25zdCBJY29uRmxhZzogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgaGVhZGVyUG9zaXRpb24gPSBQT1NJVElPTi5MRUZULFxufTogUHJvcHMpID0+IHtcbiAgaWYgKGhlYWRlclBvc2l0aW9uID09IFBPU0lUSU9OLkxFRlQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDc1IDIyXCIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICA8cGF0aCBkPVwiTTY0LjUyMDMgMjAuODMzMUw2NC41MiAyMC44MzM0QzY0LjA2NjkgMjEuMjUzNSA2My40NzQzIDIxLjQ5MSA2Mi44NTY1IDIxLjVIM0MyLjMzNjk2IDIxLjUgMS43MDEwNyAyMS4yMzY2IDEuMjMyMjMgMjAuNzY3OEMwLjc2MzM5MiAyMC4yOTg5IDAuNSAxOS42NjMgMC41IDE5VjNDMC41IDIuMzM2OTYgMC43NjMzOTIgMS43MDEwNyAxLjIzMjIzIDEuMjMyMjNDMS43MDEwNyAwLjc2MzM5MSAyLjMzNjk2IDAuNSAzIDAuNUg2Mi43NzY1QzYzLjM5NDMgMC41MDg5OTkgNjMuOTg2OSAwLjc0NjQ1NCA2NC40NCAxLjE2NjYyTDY0LjQ0MDMgMS4xNjY4OEw3My4wODAzIDkuMTY2ODhMNzMuMDgwMiA5LjE2Njk0TDczLjA4NjkgOS4xNzI4NEM3My4zNDM2IDkuNDAyMjQgNzMuNTUwMiA5LjY4MjIgNzMuNjkzNyA5Ljk5NTE4QzczLjgzNzIgMTAuMzA4MiA3My45MTQ1IDEwLjY0NzQgNzMuOTIwNyAxMC45OTE2QzczLjkyNyAxMS4zMzU5IDczLjg2MiAxMS42Nzc3IDczLjczIDExLjk5NTdDNzMuNTk4NiAxMi4zMTIzIDczLjQwMzUgMTIuNTk4NCA3My4xNTY4IDEyLjgzNjRDNzMuMTU1NyAxMi44Mzc0IDczLjE1NDYgMTIuODM4NSA3My4xNTM1IDEyLjgzOTVMNjQuNTIwMyAyMC44MzMxWlwiIC8+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvc3ZnPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmcgdmlld0JveD1cIjAgMCA3NSAyMlwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxwYXRoIGQ9XCJNOS45MDA2MSAxLjE2Njg4TDkuOTAwODggMS4xNjY2MkMxMC4zNTQgMC43NDY0NDcgMTAuOTQ2NiAwLjUwODk5MyAxMS41NjQ0IDAuNDk5OTk4TDcxLjQyMDkgMC41MDAwMDRDNzIuMDgzOSAwLjUwMDAwNCA3Mi43MTk4IDAuNzYzMzk1IDczLjE4ODcgMS4yMzIyM0M3My42NTc1IDEuNzAxMDcgNzMuOTIwOSAyLjMzNjk2IDczLjkyMDkgM0w3My45MjA5IDE5QzczLjkyMDkgMTkuNjYzIDczLjY1NzUgMjAuMjk4OSA3My4xODg3IDIwLjc2NzhDNzIuNzE5OCAyMS4yMzY2IDcyLjA4MzkgMjEuNSA3MS40MjA5IDIxLjVMMTEuNjQ0NCAyMS41QzExLjAyNjYgMjEuNDkxIDEwLjQzNCAyMS4yNTM1IDkuOTgwODggMjAuODMzNEw5Ljk4MDYxIDIwLjgzMzFMMS4zNDA2MSAxMi44MzMxTDEuMzQwNjYgMTIuODMzMUwxLjMzNDA1IDEyLjgyNzJDMS4wNzczMiAxMi41OTc3IDAuODcwNzI4IDEyLjMxNzggMC43MjcyMzUgMTIuMDA0OEMwLjU4Mzc0OSAxMS42OTE4IDAuNTA2NDQ4IDExLjM1MjYgMC41MDAxOTIgMTEuMDA4NEMwLjQ5MzkzNiAxMC42NjQxIDAuNTU4ODU0IDEwLjMyMjMgMC42OTA4NjYgMTAuMDA0M0MwLjgyMjMwNSA5LjY4NzczIDEuMDE3NDQgOS40MDE1NiAxLjI2NDE1IDkuMTYzNkMxLjI2NTIyIDkuMTYyNTYgMS4yNjYzMSA5LjE2MTUyIDEuMjY3MzggOS4xNjA0OEw5LjkwMDYxIDEuMTY2ODhaXCIgLz5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG4iLCIvLyBIZWlnaHQgYW5kIHdpZHRoIGFyZSBpbiBzY3JlZW4gcGl4ZWwgdW5pdHMgYXQgMTAwJSBzY2FsaW5nIG9mIHRoZSBwYWdlXG5leHBvcnQgdHlwZSBEaW1lbnNpb25zID0ge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbn07XG5cbi8vIFRvcCBhbmQgbGVmdCBhcmUgaW4gc2NyZWVuIHBpeGVsIHVuaXRzIGF0IDEwMCUgc2NhbGluZyBvZiB0aGUgcGFnZVxuZXhwb3J0IHR5cGUgT3JpZ2luID0ge1xuICB0b3A6IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgU2l6ZSA9IERpbWVuc2lvbnMgJiBPcmlnaW47XG5cbmV4cG9ydCB0eXBlIEJvdW5kaW5nQm94ID0ge1xuICBwYWdlOiBudW1iZXI7XG59ICYgU2l6ZTtcblxuLy8gUmF3IEJvdW5kaW5nQm94ZXMgdG9wLCBsZWZ0LCBoZWlnaHQsIGFuZCB3aWR0aCBhdHRyaWJ1dGVzIGFyZSBleHByZXNzZWQgYXMgYSByYXRpbyBvZiB0aGVcbi8vIHBhZ2UgaGVpZ2h0L3dpZHRoIGFuZCBuZWVkIHRvIGJlIHNjYWxlZCBhY2NvcmRpbmcgdG8gcGFnZSBzaXplIGJlZm9yZSB0aGV5IGNhbiBiZSByZW5kZXJlZFxuZXhwb3J0IHR5cGUgUmF3Qm91bmRpbmdCb3ggPSBCb3VuZGluZ0JveDtcblxuLy8gQ2FsY3VsYXRlIGEgYm91bmRpbmcgYm94J3MgcGl4ZWwgY29vcmRpbmF0ZXMgZnJvbSB0aGUgcmF3IGJvdW5kaW5nIGJveCdzIGNvb3JkaXRhdGUgcmF0aW9zIHNjYWxlZCB0byB0aGUgcGFnZSBzaXplXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVSYXdCb3VuZGluZ0JveChcbiAgYm91bmRpbmdCb3hSYXc6IFJhd0JvdW5kaW5nQm94LFxuICBwYWdlSGVpZ2h0OiBudW1iZXIsXG4gIHBhZ2VXaWR0aDogbnVtYmVyXG4pOiBCb3VuZGluZ0JveCB7XG4gIGNvbnN0IGJveFNjYWxlZDogQm91bmRpbmdCb3ggPSB7XG4gICAgcGFnZTogYm91bmRpbmdCb3hSYXcucGFnZSxcbiAgICB0b3A6IGJvdW5kaW5nQm94UmF3LnRvcCAqIHBhZ2VIZWlnaHQsXG4gICAgbGVmdDogYm91bmRpbmdCb3hSYXcubGVmdCAqIHBhZ2VXaWR0aCxcbiAgICBoZWlnaHQ6IGJvdW5kaW5nQm94UmF3LmhlaWdodCAqIHBhZ2VIZWlnaHQsXG4gICAgd2lkdGg6IGJvdW5kaW5nQm94UmF3LndpZHRoICogcGFnZVdpZHRoLFxuICB9O1xuXG4gIHJldHVybiBib3hTY2FsZWQ7XG59XG4iLCJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgQm91bmRpbmdCb3ggYXMgQm91bmRpbmdCb3hUeXBlLCBzY2FsZVJhd0JvdW5kaW5nQm94IH0gZnJvbSAnLi4vdHlwZXMvYm91bmRpbmdCb3gnO1xuaW1wb3J0IHsgQXJyb3dGbGFnQmFzZSwgUE9TSVRJT04sIFBvc2l0aW9uVHlwZSB9IGZyb20gJy4vQXJyb3dGbGFnQmFzZSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGJvdW5kaW5nQm94ZXM6IEFycmF5PEJvdW5kaW5nQm94VHlwZT47IC8vIGFsbCBib3VuZGluZyBib3hlcyBhcmUgZXhwZWN0ZWQgdG8gYmUgb24gdGhlIHNhbWUgcGFnZVxuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxuY29uc3QgQ0VOVEVSX0xJTkUgPSAwLjU7XG5jb25zdCBMSU5FX0hFSUdIVF9NVUxUSVBMSUVSID0gMS41O1xuXG5leHBvcnQgY29uc3QgQXJyb3dGbGFnOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBib3VuZGluZ0JveGVzLFxuICBjbGFzc05hbWUsXG4gIGxhYmVsLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IGNvbnZlcnRSYXRpb1RvUHggPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAocmF3Qm91bmRpbmdCb3g6IEJvdW5kaW5nQm94VHlwZSk6IEJvdW5kaW5nQm94VHlwZSA9PlxuICAgICAgc2NhbGVSYXdCb3VuZGluZ0JveChyYXdCb3VuZGluZ0JveCwgcGFnZURpbWVuc2lvbnMuaGVpZ2h0LCBwYWdlRGltZW5zaW9ucy53aWR0aCksXG4gICAgW3BhZ2VEaW1lbnNpb25zXVxuICApO1xuXG4gIGlmIChib3VuZGluZ0JveGVzLmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbDtcblxuICAvLyBJZiBhbnkgYm91bmRpbmcgYm94ZXMgc3BhbiBvdmVyIHRoZSBjZW50ZXIgbGluZSwgd2Uga25vdyB0aGF0IGVpdGhlciB0aGUgcGFwZXIgaXNcbiAgLy8gc2luZ2xlLWNvbHVtbiBvciBhIG1peCBvZiBzaW5nbGUtY29sdW1uIGFuZCB0d28tY29sdW1uLiBJbiBzdWNoIGNhc2UsIGJvdW5kaW5nXG4gIC8vIGJveGVzIHdpbGwgbm90IGJlIGRpdmlkZWQgc28gYXMgdG8gZ3VhcmFudGVlIG9ubHkgMSBmbGFnIGlzIHJlbmRlcmVkIG9uIHRoZSBsZWZ0IHNpZGUuXG4gIGNvbnN0IGhhc1dpZGVCb3ggPSBib3VuZGluZ0JveGVzLnNvbWUoXG4gICAgKHsgbGVmdCwgd2lkdGggfSkgPT4gbGVmdCA8IENFTlRFUl9MSU5FICYmIGxlZnQgKyB3aWR0aCA+PSBDRU5URVJfTElORVxuICApO1xuXG4gIGxldCBsZWZ0Qm91bmRpbmdCb3hlcyA9IGJvdW5kaW5nQm94ZXMsXG4gICAgcmlnaHRCb3VuZGluZ0JveGVzOiBCb3VuZGluZ0JveFR5cGVbXSA9IFtdO1xuICBpZiAoIWhhc1dpZGVCb3gpIHtcbiAgICBsZWZ0Qm91bmRpbmdCb3hlcyA9IGJvdW5kaW5nQm94ZXMuZmlsdGVyKCh7IGxlZnQgfSkgPT4gbGVmdCA8IENFTlRFUl9MSU5FKTtcbiAgICByaWdodEJvdW5kaW5nQm94ZXMgPSBib3VuZGluZ0JveGVzLmZpbHRlcigoeyBsZWZ0IH0pID0+IGxlZnQgPj0gQ0VOVEVSX0xJTkUpO1xuICB9XG5cbiAgLy8gVG8gaGFuZGxlIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHRoZSBwcmV2aW91cyBib3VuZGluZyBib3ggaXMgb24gdGhlIHJpZ2h0IHdoaWxlXG4gIC8vIHRoZSBsYXRlciBpcyBvbiB0aGUgbGVmdC4gSW4gc3VjaCBjYXNlLCB0aGVyZSBhcmUgb25seSAyIGJvdW5kaW5nIGJveGVzLlxuICAvLyBUaGUgdmVydGljYWwgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIGJveGVzIGlzIHVzZWQgdG8gZGlmZmVyZW50aWF0ZSB3aGV0aGVyIHRoaXMgY2FzZVxuICAvLyBoYXBwZW5zIG9uIGEgc2luZ2xlLWNvbHVtbiBwYXBlciBvciBhIHR3by1jb2x1bW4gcGFwZXIuIElmIGl0J3MgdGhlIHByZXZpb3VzLCB0aGVuXG4gIC8vIHRoZSB3aG9sZSBmbGFnIHNob3VsZCBhcHBlYXIgb24gdGhlIGxlZnQuIEJvdGggYm91bmRpbmcgYm94ZXMgd2lsbCBiZSBjYXRlZ29yaXplZFxuICAvLyBhcyBsZWZ0Qm91bmRpbmdCb3hlcy4gT3RoZXJ3aXNlLCB0aGUgdGFpbCB3cmFwcGluZyBzdGlsbCBhcHBsaWVzLlxuICBpZiAobGVmdEJvdW5kaW5nQm94ZXMubGVuZ3RoID09PSAxICYmIHJpZ2h0Qm91bmRpbmdCb3hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBJZiB0aGUgdmVydGljYWwgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gYm94ZXMgaXMgc21hbGxlciB0aGVuIDEuNSB0aW1lcyBsaW5lIGhlaWdodCxcbiAgICAvLyB0aGUgcGFwZXIgaXMgY2F0ZWdvcml6ZWQgYXMgc2luZ2xlLWNvbHVtbi4gQm90aCBib3VuZGluZyBib3hlcyBhcmUgc2V0IHRvIGxlZnRCb3VuZGluZ0JveGVzLlxuICAgIC8vIEFycm93RmxhZyB3aWxsIGFwcGVhciBvbiB0aGUgbGVmdFxuICAgIGlmIChcbiAgICAgIE1hdGguYWJzKHJpZ2h0Qm91bmRpbmdCb3hlc1swXS50b3AgLSBsZWZ0Qm91bmRpbmdCb3hlc1swXS50b3ApIDxcbiAgICAgIExJTkVfSEVJR0hUX01VTFRJUExJRVIgKiByaWdodEJvdW5kaW5nQm94ZXNbMF0uaGVpZ2h0XG4gICAgKSB7XG4gICAgICBsZWZ0Qm91bmRpbmdCb3hlcyA9IGJvdW5kaW5nQm94ZXM7XG4gICAgICByaWdodEJvdW5kaW5nQm94ZXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvLyBTb3J0IGJvdW5kaW5nIGJveGVzIGJ5IHRoZWlyIHRvcCBwb3NpdGlvbnNcbiAgbGVmdEJvdW5kaW5nQm94ZXMuc29ydCgoZmlyc3QsIHNlY29uZCkgPT4gZmlyc3QudG9wIC0gc2Vjb25kLnRvcCk7XG4gIHJpZ2h0Qm91bmRpbmdCb3hlcy5zb3J0KChmaXJzdCwgc2Vjb25kKSA9PiBmaXJzdC50b3AgLSBzZWNvbmQudG9wKTtcblxuICBjb25zdCByZW5kZXJBcnJvd0ZsYWdCYXNlID0gKFxuICAgIGJveGVzOiBCb3VuZGluZ0JveFR5cGVbXSxcbiAgICBwb3NpdGlvbjogUG9zaXRpb25UeXBlLFxuICAgIHNob3dMYWJlbDogYm9vbGVhblxuICApID0+IHtcbiAgICBpZiAoYm94ZXMubGVuZ3RoID09IDApIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgZmlyc3RCb3ggPSBjb252ZXJ0UmF0aW9Ub1B4KGJveGVzWzBdKSxcbiAgICAgIGxhc3RCb3ggPSBjb252ZXJ0UmF0aW9Ub1B4KGJveGVzW2JveGVzLmxlbmd0aCAtIDFdKTtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIGxhYmVsOiBzaG93TGFiZWwgPyBsYWJlbCA6IHVuZGVmaW5lZCxcbiAgICAgIHRhaWxMZW5ndGg6IGxhc3RCb3gudG9wICsgbGFzdEJveC5oZWlnaHQgLSBmaXJzdEJveC50b3AsXG4gICAgICBvcmlnaW5Ub3A6IGZpcnN0Qm94LnRvcCxcbiAgICAgIHBvc2l0aW9uLFxuICAgIH07XG5cbiAgICByZXR1cm4gPEFycm93RmxhZ0Jhc2Ugey4uLnByb3BzfSAvPjtcbiAgfTtcblxuICBjb25zdCBoYXNMZWZ0RmxhZyA9IGxlZnRCb3VuZGluZ0JveGVzLmxlbmd0aCA+IDA7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygncGRmLXJlYWRlcl9fYXJyb3ctZmxhZycsIGNsYXNzTmFtZSl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtyZW5kZXJBcnJvd0ZsYWdCYXNlKGxlZnRCb3VuZGluZ0JveGVzLCBQT1NJVElPTi5MRUZULCBoYXNMZWZ0RmxhZyl9XG4gICAgICB7cmVuZGVyQXJyb3dGbGFnQmFzZShyaWdodEJvdW5kaW5nQm94ZXMsIFBPU0lUSU9OLlJJR0hULCAhaGFzTGVmdEZsYWcpfVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTY3JvbGxDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7IE5vZGVEZXN0aW5hdGlvbiwgT3V0bGluZU5vZGUgfSBmcm9tICcuLi90eXBlcy9vdXRsaW5lJztcblxudHlwZSBQcm9wcyA9IHtcbiAgaXRlbXM/OiBBcnJheTxPdXRsaW5lTm9kZT47XG4gIG9uQ2xpY2s/OiAoZGVzdDogTm9kZURlc3RpbmF0aW9uKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IE91dGxpbmVJdGVtOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBpdGVtcywgb25DbGljayB9OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGlzT3V0bGluZVRhcmdldFZpc2libGUgfSA9IFJlYWN0LnVzZUNvbnRleHQoU2Nyb2xsQ29udGV4dCk7XG5cbiAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJJdGVtKGl0ZW06IE91dGxpbmVOb2RlKSB7XG4gICAgY29uc3QgY2xpY2tIYW5kbGVyID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGl0ZW0uZGVzdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIElmIGFuIGl0ZW0gaGFzIHN1YiB0aXRsZXMsIHJlbmRlciA8T3V0bGluZUl0ZW0gLz5cbiAgICByZXR1cm4gKFxuICAgICAgPGxpXG4gICAgICAgIGtleT17aXRlbS5kZXN0Py50b1N0cmluZygpIHx8IGl0ZW0udGl0bGV9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygncmVhZGVyX19vdXRsaW5lLWl0ZW0nLCB7XG4gICAgICAgICAgJ3JlYWRlcl9fb3V0bGluZS1pdGVtLS10YXJnZXQtdmlzaWJsZSc6IGlzT3V0bGluZVRhcmdldFZpc2libGUoaXRlbS5kZXN0KSxcbiAgICAgICAgfSl9PlxuICAgICAgICA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2NsaWNrSGFuZGxlcn0gZGF0YS10ZXN0LWlkPVwicmVhZGVyLW91dGxpbmUtaXRlbVwiPlxuICAgICAgICAgIHtpdGVtLnRpdGxlfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxPdXRsaW5lSXRlbSBpdGVtcz17aXRlbS5pdGVtc30gb25DbGljaz17b25DbGlja30gLz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiA8dWwgY2xhc3NOYW1lPVwicmVhZGVyX19vdXRsaW5lLWl0ZW1zXCI+e2l0ZW1zLm1hcChpdGVtID0+IHJlbmRlckl0ZW0oaXRlbSkpfTwvdWw+O1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnVpbGRPdXRsaW5lUG9zaXRpb25zLCBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBTY3JvbGxDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7IE5vZGVEZXN0aW5hdGlvbiwgT3V0bGluZU5vZGUgfSBmcm9tICcuLi90eXBlcy9vdXRsaW5lJztcbmltcG9ydCB7IE91dGxpbmVJdGVtIH0gZnJvbSAnLi9PdXRsaW5lSXRlbSc7XG5cbmV4cG9ydCBjb25zdCBPdXRsaW5lOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICh7IC4uLmV4dHJhUHJvcHMgfSkgPT4ge1xuICBjb25zdCB7IG91dGxpbmUsIHBkZkRvY1Byb3h5LCBzZXRPdXRsaW5lLCBzZXRPdXRsaW5lUG9zaXRpb25zIH0gPVxuICAgIFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgeyBzY3JvbGxUb091dGxpbmVUYXJnZXQsIHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzIH0gPSBSZWFjdC51c2VDb250ZXh0KFNjcm9sbENvbnRleHQpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG91dGxpbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXBkZkRvY1Byb3h5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGRmRG9jUHJveHlcbiAgICAgIC5nZXRPdXRsaW5lKClcbiAgICAgIC50aGVuKChvdXRsaW5lQXJyYXk6IEFycmF5PE91dGxpbmVOb2RlPikgPT4ge1xuICAgICAgICBzZXRPdXRsaW5lKG91dGxpbmVBcnJheSk7XG4gICAgICAgIHJldHVybiBidWlsZE91dGxpbmVQb3NpdGlvbnMocGRmRG9jUHJveHksIG91dGxpbmVBcnJheSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4ob3V0bGluZVBvc2l0aW9ucyA9PiB7XG4gICAgICAgIHNldE91dGxpbmVQb3NpdGlvbnMob3V0bGluZVBvc2l0aW9ucyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXNldFNjcm9sbE9ic2VydmVycygpO1xuICAgICAgfSk7XG4gIH0sIFtvdXRsaW5lXSk7XG5cbiAgY29uc3QgY2xpY2tIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soKGRlc3Q6IE5vZGVEZXN0aW5hdGlvbik6IHZvaWQgPT4ge1xuICAgIGlmICghZGVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzY3JvbGxUb091dGxpbmVUYXJnZXQoZGVzdCk7XG4gICAgcmV0dXJuO1xuICB9LCBbXSk7XG5cbiAgaWYgKCFwZGZEb2NQcm94eSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWRlcl9fb3V0bGluZVwiIHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHshIW91dGxpbmUgJiYgPE91dGxpbmVJdGVtIGl0ZW1zPXtvdXRsaW5lfSBvbkNsaWNrPXtjbGlja0hhbmRsZXJ9IC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBjb21wdXRlUGFnZVN0eWxlIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuL0JvdW5kaW5nQm94JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50PHR5cGVvZiBCb3VuZGluZ0JveD4gfCBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8dHlwZW9mIEJvdW5kaW5nQm94Pj47XG59O1xuXG5leHBvcnQgY29uc3QgT3ZlcmxheTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHsgY2hpbGRyZW4sIC4uLmV4dHJhUHJvcHMgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBwYWdlRGltZW5zaW9ucyB9ID0gUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IHJvdGF0aW9uLCBzY2FsZSB9ID0gUmVhY3QudXNlQ29udGV4dChUcmFuc2Zvcm1Db250ZXh0KTtcblxuICBjb25zdCBnZXRPdmVybGF5U3R5bGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGNvbXB1dGVQYWdlU3R5bGUocGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uLCBzY2FsZSk7XG4gIH0sIFtwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX292ZXJsYXlcIiBzdHlsZT17Z2V0T3ZlcmxheVN0eWxlKCl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvdXRpbHMnO1xuaW1wb3J0IHsgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZSB9IGZyb20gJy4vVmlzaWJsZUVudHJpZXNEZXRlY3Rvcic7XG5cbnR5cGUgVmlzaWJsZUVsZW1lbnQgPSBOdWxsYWJsZTxudW1iZXIgfCBzdHJpbmc+O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF4VmlzaWJsZUVsZW1lbnQoXG4gIHZpc2libGVFbGVtZW50czogTWFwPFZpc2libGVFbGVtZW50LCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPlxuKTogVmlzaWJsZUVsZW1lbnQge1xuICBsZXQgbWF4VmlzaWJsZUtleSA9IG51bGw7XG4gIGxldCBtYXhSYXRpbyA9IDA7XG4gIGZvciAoY29uc3QgW3Zpc2libGVLZXksIHsgcmF0aW8gfV0gb2YgdmlzaWJsZUVsZW1lbnRzKSB7XG4gICAgaWYgKG1heFJhdGlvIDwgcmF0aW8pIHtcbiAgICAgIG1heFZpc2libGVLZXkgPSB2aXNpYmxlS2V5O1xuICAgICAgbWF4UmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heFZpc2libGVLZXk7XG59XG4iLCJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgU2Nyb2xsQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvU2Nyb2xsQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRNYXhWaXNpYmxlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL01heFZpc2libGVFbGVtZW50JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbnR5cGUgVE9ET19fVElNRVIgPSBhbnk7XG5cbmNvbnN0IERFTEFZX1NDUk9MTF9USU1FX09VVF9NUyA9IDEwMDA7XG5cbmV4cG9ydCBjb25zdCBQYWdlTnVtYmVyQ29udHJvbDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHsgY2xhc3NOYW1lIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRlbGF5VGltZXJSZWYgPSBSZWFjdC51c2VSZWY8VE9ET19fVElNRVI+KCk7XG4gIGNvbnN0IHsgbnVtUGFnZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgeyBzY3JvbGxUb1BhZ2UsIHZpc2libGVQYWdlUmF0aW9zIH0gPSBSZWFjdC51c2VDb250ZXh0KFNjcm9sbENvbnRleHQpO1xuICBjb25zdCBbbWluUGFnZSwgc2V0TWluUGFnZV0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbdXNlcklucHV0LCBzZXRVc2VySW5wdXRdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPignMCcpO1xuXG4gIC8vIEluaXRpYWxpemUgcGFnZSBjb250cm9sIGVsZW1lbnRcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobnVtUGFnZXMgIT0gMCkge1xuICAgICAgc2V0TWluUGFnZSgxKTtcbiAgICB9XG4gIH0sIFtudW1QYWdlc10pO1xuXG4gIC8vIEV2ZXJ5dGltZSB3ZSBzY3JvbGwgdGhyb3VnaCB0aGUgcGFnZSB0aGlzIHVzZUVmZmVjdFxuICAvLyB3aWxsIHRyaWdnZXIgYW5kIHNldCBjdXJyZW50IHBhZ2UgYmFzZWQgb24gb3VyIGN1cnJlbnRcbiAgLy8gc2Nyb2xsIHBvc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZpc2libGVQYWdlUmF0aW9zLnNpemUgIT09IDApIHtcbiAgICAgIGNvbnN0IG1heFZpc2libGVQYWdlTnVtYmVyID0gZ2V0TWF4VmlzaWJsZUVsZW1lbnQodmlzaWJsZVBhZ2VSYXRpb3MpO1xuICAgICAgaWYgKG1heFZpc2libGVQYWdlTnVtYmVyKSB7XG4gICAgICAgIHNldFVzZXJJbnB1dChtYXhWaXNpYmxlUGFnZU51bWJlci50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFt2aXNpYmxlUGFnZVJhdGlvc10pO1xuXG4gIGNvbnN0IG9uUGFnZU51bWJlckNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAvLyBEZWNpbWFsIGNhc2VcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgc2V0VXNlcklucHV0KHBhcnNlSW50KHZhbHVlLCAxMCkudG9TdHJpbmcoKSk7XG4gICAgICB9XG5cbiAgICAgIHNldFVzZXJJbnB1dCh2YWx1ZSk7XG4gICAgICBpZiAoZGVsYXlUaW1lclJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWxheVRpbWVyUmVmLmN1cnJlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZnRlciB1c2VyIGlucHV0IHRoZSBwYWdlIHRoYXQgdGhleSB3YW50IHRvIHNjcm9sbCB0b1xuICAgICAgLy8gb3VyIHJlZiB3aWxsIHN0YXJ0IHNldHRpbmcgYSBkZWxheSBhcm91bmQgMXMgYmVmb3JlIHNjcm9sbFxuICAgICAgLy8gdG8gdGhlIHBvc2l0aW9uIHRoYXQgdXNlciBkZXNpcmVcbiAgICAgIGNvbnN0IG5ld1BhZ2VOdW1iZXIgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgaWYgKG5ld1BhZ2VOdW1iZXIgPj0gbWluUGFnZSAmJiBuZXdQYWdlTnVtYmVyIDw9IG51bVBhZ2VzKSB7XG4gICAgICAgIGRlbGF5VGltZXJSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHNjcm9sbFRvUGFnZSh7IHBhZ2VOdW1iZXI6IG5ld1BhZ2VOdW1iZXIgfSk7XG4gICAgICAgIH0sIERFTEFZX1NDUk9MTF9USU1FX09VVF9NUyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbbWluUGFnZSwgbnVtUGFnZXMsIHNjcm9sbFRvUGFnZV1cbiAgKTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChkZWxheVRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dChkZWxheVRpbWVyUmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICBjb25zdCBwYWdlTnVtYmVyID0gcGFyc2VJbnQodXNlcklucHV0LCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihwYWdlTnVtYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGF5VGltZXJSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2Nyb2xsVG9QYWdlKHsgcGFnZU51bWJlcjogcGFnZU51bWJlciB9KTtcbiAgICB9LCBERUxBWV9TQ1JPTExfVElNRV9PVVRfTVMpO1xuICB9LCBbdXNlcklucHV0LCBzY3JvbGxUb1BhZ2VdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdwZGYtcmVhZGVyX19wYWdlLW51bWJlci1jb250cm9sJywgY2xhc3NOYW1lKX0+XG4gICAgICA8aW5wdXRcbiAgICAgICAgYXJpYS1sYWJlbD1cIkN1cnJlbnQgUGFnZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3BhZ2UtbnVtYmVyLWNvbnRyb2xfX2N1cnJlbnQtcGFnZVwiXG4gICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICBuYW1lPVwiY3VycmVudFBhZ2VcIlxuICAgICAgICB2YWx1ZT17dXNlcklucHV0fVxuICAgICAgICBvbkNoYW5nZT17b25QYWdlTnVtYmVyQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XG4gICAgICAvPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fcGFnZS1udW1iZXItY29udHJvbF9fc2VwYXJhdG9yIFwiPi88L3NwYW4+XG4gICAgICA8c3BhbiBhcmlhLWxhYmVsPVwiVG90YWwgUGFnZXNcIiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19wYWdlLW51bWJlci1jb250cm9sX190b3RhbC1wYWdlc1wiPlxuICAgICAgICB7bnVtUGFnZXN9XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGRmanMgfSBmcm9tICdyZWFjdC1wZGYnO1xuXG5pbXBvcnQgeyBQYWdlTnVtYmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9wYWdlJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBsb2dQcm92aWRlcldhcm5pbmcgfSBmcm9tICcuLi91dGlscy9wcm92aWRlcic7XG5pbXBvcnQgeyBWaXNpYmxlRW50cnlEZXRhaWxUeXBlIH0gZnJvbSAnLi4vdXRpbHMvVmlzaWJsZUVudHJpZXNEZXRlY3Rvcic7XG5cbmV4cG9ydCB0eXBlIFJlbmRlclN0YXRlID0ge1xuICBwcm9taXNlOiBQcm9taXNlPHN0cmluZz47XG4gIG9iamVjdFVSTDogTnVsbGFibGU8c3RyaW5nPjtcbn07XG5cbmV4cG9ydCB0eXBlIFBhZ2VOdW1iZXJUb1JlbmRlclN0YXRlTWFwID0gTWFwPG51bWJlciwgUmVuZGVyU3RhdGU+O1xuXG5leHBvcnQgaW50ZXJmYWNlIElQYWdlUmVuZGVyQ29udGV4dCB7XG4gIHBhZ2VSZW5kZXJTdGF0ZXM6IFBhZ2VOdW1iZXJUb1JlbmRlclN0YXRlTWFwO1xuICBnZXRPYmplY3RVUkxGb3JQYWdlOiAocGFnZU51bWJlcjogUGFnZU51bWJlcikgPT4gTnVsbGFibGU8c3RyaW5nPjtcbiAgaXNCdWlsZGluZ09iamVjdFVSTEZvclBhZ2U6IChwYWdlTnVtYmVyOiBQYWdlTnVtYmVyKSA9PiBib29sZWFuO1xuICBpc0ZpbmlzaGVkQnVpbGRpbmdBbGxQYWdlc09iamVjdFVSTHM6ICgpID0+IGJvb2xlYW47XG4gIGJ1aWxkT2JqZWN0VVJMRm9yUGFnZTogKHBhZ2VOdW1iZXI6IFBhZ2VOdW1iZXIpID0+IFByb21pc2U8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGNvbnN0IFBhZ2VSZW5kZXJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJUGFnZVJlbmRlckNvbnRleHQ+KHtcbiAgcGFnZVJlbmRlclN0YXRlczogbmV3IE1hcCgpLFxuICBnZXRPYmplY3RVUkxGb3JQYWdlOiBhcmdzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGdldE9iamVjdFVSTEZvclBhZ2UoJHtKU09OLnN0cmluZ2lmeShhcmdzKX0pYCwgJ1BhZ2VSZW5kZXJDb250ZXh0Jyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlOiBhcmdzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlKCR7SlNPTi5zdHJpbmdpZnkoYXJncyl9KWAsICdQYWdlUmVuZGVyQ29udGV4dCcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNGaW5pc2hlZEJ1aWxkaW5nQWxsUGFnZXNPYmplY3RVUkxzOiAoKSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBpc0ZpbmlzaGVkQnVpbGRpbmdBbGxQYWdlc09iamVjdFVSTHMoKWAsICdQYWdlUmVuZGVyQ29udGV4dCcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgYnVpbGRPYmplY3RVUkxGb3JQYWdlOiBhcmdzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGJ1aWxkT2JqZWN0VVJMRm9yUGFnZSgke0pTT04uc3RyaW5naWZ5KGFyZ3MpfSlgLCAnUGFnZVJlbmRlckNvbnRleHQnKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFnZVJlbmRlckNvbnRleHRQcm9wcyh7XG4gIHBkZkRvY1Byb3h5LFxuICBwaXhlbFJhdGlvLFxuICBzY2FsZSxcbiAgdmlzaWJsZVBhZ2VSYXRpb3MsXG59OiB7XG4gIHBkZkRvY1Byb3h5PzogcGRmanMuUERGRG9jdW1lbnRQcm94eTtcbiAgcGl4ZWxSYXRpbzogbnVtYmVyO1xuICBzY2FsZTogbnVtYmVyO1xuICB2aXNpYmxlUGFnZVJhdGlvczogTWFwPG51bWJlciwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT47XG59KTogSVBhZ2VSZW5kZXJDb250ZXh0IHtcbiAgY29uc3QgW3BhZ2VSZW5kZXJTdGF0ZXMsIF9zZXRQYWdlUmVuZGVyU3RhdGVzXSA9IFJlYWN0LnVzZVN0YXRlPFBhZ2VOdW1iZXJUb1JlbmRlclN0YXRlTWFwPihcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICBPYmplY3QuZnJlZXplKG1hcCk7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgKTtcblxuICAvLyBCZWNhdXNlIHJlbmRlcmluZyBhIHBhZ2UgaXMgYXN5bmMsIHdlIHdpbGwgbG9zZSB0aGUgY3VycmVudCBwYWdlUmVuZGVyU3RhdGVzXG4gIC8vIFRoaXMgcmVmIHRyaWNrIGFsbG93cyB0aGUgbGF0ZXN0IHRvIGJlIGFjY2Vzc2libGUgd2hlbiB0aGUgb2JqZWN0VVJMIGlzIHJlYWR5XG4gIGNvbnN0IHBhZ2VSZW5kZXJTdGF0ZXNSZWYgPSBSZWFjdC51c2VSZWYocGFnZVJlbmRlclN0YXRlcyk7XG4gIGNvbnN0IHNldFBhZ2VSZW5kZXJTdGF0ZXMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAocGFnZVJlbmRlclN0YXRlczogUGFnZU51bWJlclRvUmVuZGVyU3RhdGVNYXApID0+IHtcbiAgICAgIHBhZ2VSZW5kZXJTdGF0ZXNSZWYuY3VycmVudCA9IHBhZ2VSZW5kZXJTdGF0ZXM7XG4gICAgICBfc2V0UGFnZVJlbmRlclN0YXRlcyhwYWdlUmVuZGVyU3RhdGVzKTtcbiAgICB9LFxuICAgIFtwYWdlUmVuZGVyU3RhdGVzUmVmXVxuICApO1xuXG4gIGNvbnN0IGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHsgcGFnZU51bWJlciwgcGFnZUluZGV4IH06IFBhZ2VOdW1iZXIpOiBib29sZWFuID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGFnZUluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYWdlTnVtYmVyID0gcGFnZUluZGV4ICsgMTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFnZU51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhdGUgPSBwYWdlUmVuZGVyU3RhdGVzLmdldChwYWdlTnVtYmVyKTtcbiAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFzdGF0ZS5vYmplY3RVUkw7XG4gICAgfSxcbiAgICBbcGFnZVJlbmRlclN0YXRlc11cbiAgKTtcblxuICBjb25zdCBpc0ZpbmlzaGVkQnVpbGRpbmdBbGxQYWdlc09iamVjdFVSTHMgPSBSZWFjdC51c2VDYWxsYmFjaygoKTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKCFwZGZEb2NQcm94eSkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IHBhZ2VOdW1iZXIgPSAxOyBwYWdlTnVtYmVyIDw9IHBkZkRvY1Byb3h5Lm51bVBhZ2VzOyBwYWdlTnVtYmVyKyspIHtcbiAgICAgIGlmICghcGFnZVJlbmRlclN0YXRlcy5nZXQocGFnZU51bWJlcik/Lm9iamVjdFVSTCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCBbcGRmRG9jUHJveHksIHBhZ2VSZW5kZXJTdGF0ZXNdKTtcblxuICBjb25zdCBnZXRPYmplY3RVUkxGb3JQYWdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHsgcGFnZU51bWJlciwgcGFnZUluZGV4IH06IFBhZ2VOdW1iZXIpOiBOdWxsYWJsZTxzdHJpbmc+ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGFnZUluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYWdlTnVtYmVyID0gcGFnZUluZGV4ICsgMTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFnZU51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZVJlbmRlclN0YXRlcy5nZXQocGFnZU51bWJlcik/Lm9iamVjdFVSTCB8fCBudWxsO1xuICAgIH0sXG4gICAgW3BhZ2VSZW5kZXJTdGF0ZXNdXG4gICk7XG5cbiAgY29uc3QgYnVpbGRPYmplY3RVUkxGb3JQYWdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHsgcGFnZU51bWJlciwgcGFnZUluZGV4IH06IFBhZ2VOdW1iZXIpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb3AgXCJwYWdlTnVtYmVyXCIgaXMgbm90IGEgbnVtYmVyJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXBkZkRvY1Byb3h5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGJ1aWxkIGEgcGFnZSB1bnRpbCBhIFwicGRmRG9jUHJveHlcIiBpcyBzZXQgb24gRG9jdW1lbnRDb250ZXh0Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IG5lZWQgdG8gc3RhcnQgYW5vdGhlciB0YXNrIGlmIGFscmVhZHkgcmVuZGVyZWRcbiAgICAgIGNvbnN0IGV4aXN0aW5nUHJvbWlzZSA9IHBhZ2VSZW5kZXJTdGF0ZXMuZ2V0KHBhZ2VOdW1iZXIpPy5wcm9taXNlO1xuICAgICAgaWYgKGV4aXN0aW5nUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdQcm9taXNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9taXNlID0gYnVpbGRQYWdlT2JqZWN0VVJMKHtcbiAgICAgICAgcGFnZU51bWJlcixcbiAgICAgICAgcGRmRG9jUHJveHksXG4gICAgICAgIHBpeGVsUmF0aW8sXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBwcm9taXNlVGltZXN0YW1wOiBmbHVzaFRpbWVzdGFtcCxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmVuZGVyU3RhdGU6IFJlbmRlclN0YXRlID0ge1xuICAgICAgICBwcm9taXNlLFxuICAgICAgICBvYmplY3RVUkw6IG51bGwsXG4gICAgICB9O1xuICAgICAgcHJvbWlzZS50aGVuKG9iamVjdFVSTCA9PiB7XG4gICAgICAgIGlmICghb2JqZWN0VVJMKSByZXR1cm47XG4gICAgICAgIHJlbmRlclN0YXRlLm9iamVjdFVSTCA9IG9iamVjdFVSTDtcbiAgICAgICAgY29uc3QgbmV3UGFnZVJlbmRlclN0YXRlcyA9IG5ldyBNYXAocGFnZVJlbmRlclN0YXRlc1JlZi5jdXJyZW50KTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShuZXdQYWdlUmVuZGVyU3RhdGVzKTtcbiAgICAgICAgc2V0UGFnZVJlbmRlclN0YXRlcyhuZXdQYWdlUmVuZGVyU3RhdGVzKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbmV3UGFnZVJlbmRlclN0YXRlcyA9IG5ldyBNYXAocGFnZVJlbmRlclN0YXRlc1JlZi5jdXJyZW50KTtcbiAgICAgIG5ld1BhZ2VSZW5kZXJTdGF0ZXMuc2V0KHBhZ2VOdW1iZXIsIHJlbmRlclN0YXRlKTtcbiAgICAgIE9iamVjdC5mcmVlemUobmV3UGFnZVJlbmRlclN0YXRlcyk7XG4gICAgICBzZXRQYWdlUmVuZGVyU3RhdGVzKG5ld1BhZ2VSZW5kZXJTdGF0ZXMpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcbiAgICBbcGFnZVJlbmRlclN0YXRlcywgcGRmRG9jUHJveHksIHNjYWxlXVxuICApO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdmlzaWJsZVBhZ2VzID0gWy4uLnZpc2libGVQYWdlUmF0aW9zLmtleXMoKV07XG4gICAgaWYgKCFwZGZEb2NQcm94eSB8fCBbLi4ucGFnZVJlbmRlclN0YXRlcy5rZXlzKCldLmxlbmd0aCA9PT0gcGRmRG9jUHJveHkubnVtUGFnZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcmlvcml0eVF1ZXVlID0gZ2V0UHJpb3JpdHlRdWV1ZSh2aXNpYmxlUGFnZXMsIHBkZkRvY1Byb3h5Lm51bVBhZ2VzKTtcbiAgICBmb3IgKGNvbnN0IHBhZ2VOdW1iZXIgb2YgcHJpb3JpdHlRdWV1ZSkge1xuICAgICAgYnVpbGRPYmplY3RVUkxGb3JQYWdlKHsgcGFnZU51bWJlciB9KTtcbiAgICB9XG4gIH0sIFtwYWdlUmVuZGVyU3RhdGVzLCBwZGZEb2NQcm94eSwgdmlzaWJsZVBhZ2VSYXRpb3NdKTtcblxuICAvLyBGbHVzaCBwYWdlIHJlbmRlciBzdGF0ZXMgd2hlbiBzY2FsZSBjaGFuZ2VzXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQ2xlYW4gbWVtb3J5IG9mIG9sZCBnZW5lcmF0ZWQgaW1hZ2VzXG4gICAgZm9yIChjb25zdCBbLCByZW5kZXJTdGF0ZV0gb2YgcGFnZVJlbmRlclN0YXRlc1JlZi5jdXJyZW50KSB7XG4gICAgICBpZiAocmVuZGVyU3RhdGUub2JqZWN0VVJMKSB7XG4gICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwocmVuZGVyU3RhdGUub2JqZWN0VVJMKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiBjdXJyZW50IGFzeW5jIHByb21pc2VzIGRvbnQgaGF2ZSB0aGlzIHRpbWVzdGFtcCwgdGhlbiB3ZSBmbHVzaCB0aGVtXG4gICAgZmx1c2hUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIC8vIENsZWFyIGFsbCBwYWdlIHJlbmRlciBzdGF0ZXMsIHNvIHBhZ2VzIGNhbiByZWJ1aWxkIGltYWdlc1xuICAgIGNvbnN0IG5ld1BhZ2VSZW5kZXJTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgT2JqZWN0LmZyZWV6ZShuZXdQYWdlUmVuZGVyU3RhdGVzKTtcbiAgICBzZXRQYWdlUmVuZGVyU3RhdGVzKG5ld1BhZ2VSZW5kZXJTdGF0ZXMpO1xuICB9LCBbc2NhbGUsIHBpeGVsUmF0aW9dKTtcblxuICByZXR1cm4ge1xuICAgIHBhZ2VSZW5kZXJTdGF0ZXMsXG4gICAgZ2V0T2JqZWN0VVJMRm9yUGFnZSxcbiAgICBpc0J1aWxkaW5nT2JqZWN0VVJMRm9yUGFnZSxcbiAgICBpc0ZpbmlzaGVkQnVpbGRpbmdBbGxQYWdlc09iamVjdFVSTHMsXG4gICAgYnVpbGRPYmplY3RVUkxGb3JQYWdlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmVpZ2hib3JpbmdQYWdlcyhwYWdlczogbnVtYmVyW10sIG51bVRvdGFsUGFnZXM6IG51bWJlcik6IG51bWJlcltdIHtcbiAgcmV0dXJuIHBhZ2VzLmxlbmd0aCA9PT0gMFxuICAgID8gW11cbiAgICA6IFtNYXRoLm1heCgxLCBwYWdlc1swXSAtIDEpLCBNYXRoLm1pbihudW1Ub3RhbFBhZ2VzLCBwYWdlc1twYWdlcy5sZW5ndGggLSAxXSArIDEpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByaW9yaXR5UXVldWUodmlzaWJsZVBhZ2VzOiBudW1iZXJbXSwgbnVtUGFnZXM6IG51bWJlcik6IG51bWJlcltdIHtcbiAgY29uc3QgdmlzaWJsZVBhZ2VzTmVpZ2hib3JzID0gZ2V0TmVpZ2hib3JpbmdQYWdlcyh2aXNpYmxlUGFnZXMsIG51bVBhZ2VzKTtcbiAgY29uc3QgYWxsUGFnZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBudW1QYWdlcyB9LCAoXywgaSkgPT4gaSArIDEpO1xuICBjb25zdCBwcmlvcml0eVF1ZXVlID0gbmV3IFNldChbLi4udmlzaWJsZVBhZ2VzLCAuLi52aXNpYmxlUGFnZXNOZWlnaGJvcnMsIC4uLmFsbFBhZ2VzXSk7IC8vIHB1dCBpbnRvIHNldCB0byByZW1vdmUgZHVwbGljYXRzXG4gIHJldHVybiBBcnJheS5mcm9tKHByaW9yaXR5UXVldWUpOyAvLyBjb252ZXJ0IHNldCB0byBhcnJheVxufVxuXG4vLyBUaGlzIGJvb3N0IGNhdXNlcyB0aGUgcmVuZGVyZWQgaW1hZ2UgdG8gYmUgc2NhbGVkIHVwIGJ5IHRoaXMgYW1vdW50XG5jb25zdCBTQ0FMRV9CT09TVCA9IDI7XG5cbi8vIEdlbmVyYXRlIGFuIG9iamVjdCB1cmwgZm9yIGEgZ2l2ZW4gcGFnZSwgcmVuZGVyZWQgaW4gYSBzaGFyZWQgY2FudmFzXG5hc3luYyBmdW5jdGlvbiBidWlsZFBhZ2VPYmplY3RVUkwoe1xuICBwYWdlTnVtYmVyLFxuICBwZGZEb2NQcm94eSxcbiAgcGl4ZWxSYXRpbyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDogbnVsbCkgfHwgMCxcbiAgc2NhbGUgPSAxLFxuICBpbWFnZVR5cGUgPSAnaW1hZ2UvcG5nJyxcbiAgaW1hZ2VRdWFsaXR5ID0gMS4wLFxuICBwcm9taXNlVGltZXN0YW1wLFxufToge1xuICBwYWdlTnVtYmVyOiBudW1iZXI7XG4gIHBkZkRvY1Byb3h5OiBwZGZqcy5QREZEb2N1bWVudFByb3h5O1xuICBwaXhlbFJhdGlvPzogbnVtYmVyO1xuICBzY2FsZT86IG51bWJlcjtcbiAgaW1hZ2VUeXBlPzogc3RyaW5nO1xuICBpbWFnZVF1YWxpdHk/OiBudW1iZXI7XG4gIHByb21pc2VUaW1lc3RhbXA6IG51bWJlcjtcbn0pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBwYWdlUHJveHkgPSBhd2FpdCBwZGZEb2NQcm94eS5nZXRQYWdlKHBhZ2VOdW1iZXIpO1xuXG4gIGNvbnN0IGJsb2I6IE51bGxhYmxlPEJsb2I+IHwgbnVtYmVyID0gYXdhaXQgdXNlUmVuZGVyQ2FudmFzKGFzeW5jIGNhbnZhcyA9PiB7XG4gICAgaWYgKHByb21pc2VUaW1lc3RhbXAgIT09IGZsdXNoVGltZXN0YW1wKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVRpbWVzdGFtcDsgLy8gZmx1c2ggc3RhbGUgcHJvbWlzZVxuICAgIH1cbiAgICAvLyBSZW5kZXIgcGFnZSBpbiBhIGNhbnZhc1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gcGFnZVByb3h5LmdldFZpZXdwb3J0KHsgc2NhbGU6IHNjYWxlICogcGl4ZWxSYXRpbyAqIFNDQUxFX0JPT1NUIH0pO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgY2FudmFzLndpZHRoID0gdmlld3BvcnQud2lkdGg7XG4gICAgY29uc3QgY2FudmFzQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmICghY2FudmFzQ29udGV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW52YXMgd2FzIHVuYWJsZSB0byBnZXQgYSBjb250ZXh0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyVGFzayA9IHBhZ2VQcm94eS5yZW5kZXIoe1xuICAgICAgY2FudmFzQ29udGV4dCxcbiAgICAgIHZpZXdwb3J0LFxuICAgICAgaW50ZW50OiAncHJpbnQnLCAvLyBpbW1lZGlhdGVseSByZW5kZXIgcGFnZXMgb24gaW5hY3RpdmUgcGFnZXNcbiAgICB9KTtcbiAgICBhd2FpdCByZW5kZXJUYXNrLnByb21pc2U7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTYpKTtcblxuICAgIC8vIEZldGNoIGEgYmxvYiBmb3IgYW4gaW1hZ2Ugb2YgdGhlIGNhbnZhc1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4gcmVzb2x2ZShibG9iKSwgaW1hZ2VUeXBlLCBpbWFnZVF1YWxpdHkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBibG9iID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvLyBDb252ZXJ0IGJsb2IgaW1hZ2UgdG8gb2JqZWN0IHVybFxuICBpZiAoIWJsb2IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgaW1hZ2UgZnJvbSBwYWdlJyk7XG4gIH1cbiAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59XG5cbmxldCByZW5kZXJDYW52YXM6IE51bGxhYmxlPEhUTUxDYW52YXNFbGVtZW50PiA9IG51bGw7XG5cbi8vIEdldCBvciBjcmVhdGUgYSBzaGFyZWQgY2FudmFzIGZvciByZW5kZXJpbmcgcGFnZXMgaW5cbmZ1bmN0aW9uIGdldFJlbmRlckNhbnZhcygpOiBIVE1MQ2FudmFzRWxlbWVudCB7XG4gIGlmICghcmVuZGVyQ2FudmFzKSB7XG4gICAgcmVuZGVyQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNhbnZhcztcbn1cblxubGV0IGZsdXNoVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5sZXQgbmV4dENhbnZhc1VzZTogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbi8vIFVzZSB0aGUgc2hhcmVkIGNhbnZhcyB0byByZW5kZXIgYSBwYWdlLCB1c2luZyBwcm9taXNlcyB0byBjcmVhdGUgYSBxdWV1ZVxuYXN5bmMgZnVuY3Rpb24gdXNlUmVuZGVyQ2FudmFzPFQ+KGNhbGxiYWNrOiAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIGxldCByZXNvbHZlID0gKF92YWx1ZTogVCB8IFByb21pc2VMaWtlPFQ+KSA9PiB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBsZXQgcmVqZWN0ID0gKF9yZWFzb246IGFueSkgPT4ge307XG4gIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZTxUPigoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgfSk7XG4gIG5leHRDYW52YXNVc2UgPSBuZXh0Q2FudmFzVXNlLnRoZW4oKCkgPT4gY2FsbGJhY2soZ2V0UmVuZGVyQ2FudmFzKCkpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KSk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb207XG4gIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgMTYpKTsgLy8gR2l2ZSBzb21lIHRpbWUgYmV0d2VlbiByZW5kZXJzXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICdyZWFjdC1wZGYnO1xuaW1wb3J0IHsgUmVuZGVyRnVuY3Rpb24gfSBmcm9tICdyZWFjdC1wZGYvZGlzdC9QYWdlJztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgUGFnZVJlbmRlckNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1BhZ2VSZW5kZXJDb250ZXh0JztcbmltcG9ydCB7IFRyYW5zZm9ybUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1RyYW5zZm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgVWlDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9VaUNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2xhc3NOYW1lU3VmZml4RnJvbVJlbmRlclR5cGUsIFJlbmRlclR5cGUgfSBmcm9tICcuLi91dGlscy9yZWFkZXItdXRpbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXggfSBmcm9tICcuLi91dGlscy9zY3JvbGwnO1xuaW1wb3J0IHsgY29tcHV0ZVBhZ2VTdHlsZSwgZ2V0UGFnZVdpZHRoIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgSGlnaGxpZ2h0T3ZlcmxheSB9IGZyb20gJy4vSGlnaGxpZ2h0T3ZlcmxheSc7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5JztcblxuLyoqXG4gKiBBIHN1YnNldCBvZiByZWFjdC1wZGYncyBQYWdlIGNvbXBvbmVudCBwcm9wcyBleHBvc2VkIGJ5IHRoaXMgd3JhcHBlclxuICovXG5leHBvcnQgdHlwZSBQYWdlUHJvcHMgPSB7XG4gIGVycm9yPzogc3RyaW5nIHwgUmVhY3QuUmVhY3RFbGVtZW50IHwgUmVuZGVyRnVuY3Rpb247XG4gIGxvYWRpbmc/OiBzdHJpbmcgfCBSZWFjdC5SZWFjdEVsZW1lbnQgfCBSZW5kZXJGdW5jdGlvbjtcbiAgbm9EYXRhPzogc3RyaW5nIHwgUmVhY3QuUmVhY3RFbGVtZW50IHwgUmVuZGVyRnVuY3Rpb247XG4gIHBhZ2VJbmRleDogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgbG9hZGluZ0NvbnRlbnRGb3JCdWlsZGluZ0ltYWdlPzogUmVhY3QuUmVhY3RFbGVtZW50O1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0RWxlbWVudDx0eXBlb2YgSGlnaGxpZ2h0T3ZlcmxheSB8IHR5cGVvZiBPdmVybGF5PjtcbiAgcmVuZGVyVHlwZTogUmVuZGVyVHlwZTtcbn0gJiBQYWdlUHJvcHM7XG5cbmV4cG9ydCBjb25zdCBQYWdlV3JhcHBlcjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGVycm9yLFxuICBsb2FkaW5nLFxuICBsb2FkaW5nQ29udGVudEZvckJ1aWxkaW5nSW1hZ2UsXG4gIG5vRGF0YSxcbiAgcGFnZUluZGV4LFxuICByZW5kZXJUeXBlLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHJvdGF0aW9uLCBzY2FsZSB9ID0gUmVhY3QudXNlQ29udGV4dChUcmFuc2Zvcm1Db250ZXh0KTtcbiAgY29uc3QgeyBwYWdlRGltZW5zaW9ucywgZ2V0T3V0bGluZVRhcmdldHMsIHNldE51bVBhZ2VzTG9hZGVkIH0gPVxuICAgIFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgeyBnZXRPYmplY3RVUkxGb3JQYWdlLCBpc0J1aWxkaW5nT2JqZWN0VVJMRm9yUGFnZSB9ID0gUmVhY3QudXNlQ29udGV4dChQYWdlUmVuZGVyQ29udGV4dCk7XG4gIGNvbnN0IHsgaXNMb2FkaW5nIH0gPSBSZWFjdC51c2VDb250ZXh0KFVpQ29udGV4dCk7XG5cbiAgY29uc3Qgb2JqZWN0VVJMRm9yUGFnZSA9IGdldE9iamVjdFVSTEZvclBhZ2UoeyBwYWdlSW5kZXggfSk7XG4gIGNvbnN0IGlzQnVpbGRpbmdQYWdlSW1hZ2UgPSBpc0J1aWxkaW5nT2JqZWN0VVJMRm9yUGFnZSh7IHBhZ2VJbmRleCB9KTtcblxuICAvLyBEb24ndCBkaXNwbGF5IHVudGlsIHdlIGhhdmUgcGFnZSBzaXplIGRhdGFcbiAgLy8gVE9ETzogSGFuZGxlIHRoaXMgbmljZXIgc28gd2UgZGlzcGxheSBlaXRoZXIgdGhlIGxvYWRpbmcgb3IgZXJyb3IgdHJlYXRtZW50XG4gIGlmICghcGFnZURpbWVuc2lvbnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGdldFBhZ2VTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gY29tcHV0ZVBhZ2VTdHlsZShwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlKTtcbiAgICBpZiAob2JqZWN0VVJMRm9yUGFnZSkge1xuICAgICAgc3R5bGVzLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHtvYmplY3RVUkxGb3JQYWdlfSlgO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LCBbcGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uLCBzY2FsZSwgb2JqZWN0VVJMRm9yUGFnZV0pO1xuXG4gIGNvbnN0IGdldFdpZHRoID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBnZXRQYWdlV2lkdGgocGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uKTtcbiAgfSwgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbl0pO1xuXG4gIGNvbnN0IG91dGxpbmVUYXJnZXRzID0gZ2V0T3V0bGluZVRhcmdldHMoe1xuICAgIHBhZ2VJbmRleCxcbiAgICBzY2FsZSxcbiAgICByb3RhdGlvbixcbiAgICBwYWdlRGltZW5zaW9ucyxcbiAgfSk7XG5cbiAgY29uc3QgbWFya1BhZ2VBc0xvYWRlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXROdW1QYWdlc0xvYWRlZChwcmV2TnVtUGFnZXNMb2FkZWQgPT4gcHJldk51bVBhZ2VzTG9hZGVkICsgMSk7XG4gIH0sIFtdKTtcblxuICAvLyBXaWR0aCBuZWVkcyB0byBiZSBzZXQgdG8gcHJldmVudCB0aGUgb3V0ZXJtb3N0IFBhZ2UgZGl2IGZyb20gZXh0ZW5kaW5nIHRvIGZpdCB0aGUgcGFyZW50LFxuICAvLyBhbmQgbWlzLWFsaWduaW5nIHRoZSB0ZXh0IGxheWVyLlxuICAvLyBUT0RPOiBDYW4gd2UgQ1NTIHRoaXMgdG8gYXV0by1zaHJpbms/XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgaWQ9e2dlbmVyYXRlUGFnZUlkRnJvbUluZGV4KHBhZ2VJbmRleCl9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXG4gICAgICAgICdwZGYtcmVhZGVyX19wYWdlJyxcbiAgICAgICAgeyAncGRmLXJlYWRlcl9fcGFnZS0taGFzLXBhZ2UtaW1hZ2UnOiBvYmplY3RVUkxGb3JQYWdlIH0sXG4gICAgICAgIHsgJ3BkZi1yZWFkZXJfX3BhZ2UtLW5vLXBhZ2UtaW1hZ2UnOiAhb2JqZWN0VVJMRm9yUGFnZSB9LFxuICAgICAgICBgcGRmLXJlYWRlcl9fcGFnZS0tcmVuZGVyLXR5cGUtJHtnZXRDbGFzc05hbWVTdWZmaXhGcm9tUmVuZGVyVHlwZShyZW5kZXJUeXBlKX1gLFxuICAgICAgICB7ICdwZGYtcmVhZGVyX19pcy1idWlsZGluZy1wYWdlLWltYWdlJzogaXNCdWlsZGluZ1BhZ2VJbWFnZSB9XG4gICAgICApfVxuICAgICAgZGF0YS1wYWdlLW51bWJlcj17cGFnZUluZGV4ICsgMX1cbiAgICAgIHN0eWxlPXtnZXRQYWdlU3R5bGUoKX1cbiAgICAgIHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHtpc0J1aWxkaW5nUGFnZUltYWdlICYmICFpc0xvYWRpbmcgJiYgKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdwZGYtcmVhZGVyX19wYWdlJywge1xuICAgICAgICAgICAgJ3BkZi1yZWFkZXJfX3BhZ2UtLWlzLWxvYWRpbmctaW1hZ2UnOiBpc0J1aWxkaW5nUGFnZUltYWdlLFxuICAgICAgICAgIH0pfT5cbiAgICAgICAgICB7bG9hZGluZ0NvbnRlbnRGb3JCdWlsZGluZ0ltYWdlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICA8UGFnZVxuICAgICAgICB3aWR0aD17Z2V0V2lkdGgoKX1cbiAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICBub0RhdGE9e25vRGF0YX1cbiAgICAgICAgcGFnZUluZGV4PXtwYWdlSW5kZXh9XG4gICAgICAgIHNjYWxlPXtzY2FsZX1cbiAgICAgICAgcm90YXRlPXtyb3RhdGlvbn1cbiAgICAgICAgcmVuZGVyQW5ub3RhdGlvbkxheWVyPXt0cnVlfVxuICAgICAgICBvbkdldFRleHRTdWNjZXNzPXttYXJrUGFnZUFzTG9hZGVkfVxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fcGFnZV9fb3V0bGluZS10YXJnZXRzXCI+XG4gICAgICAgIHtvdXRsaW5lVGFyZ2V0cy5tYXAoKHsgZGVzdCwgbGVmdFB4LCB0b3BQeCB9KSA9PiAoXG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGtleT17ZGVzdH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3BhZ2VfX291dGxpbmUtdGFyZ2V0XCJcbiAgICAgICAgICAgIGRhdGEtb3V0bGluZS10YXJnZXQtZGVzdD17ZGVzdH1cbiAgICAgICAgICAgIGRhdGEtdGVzdC1pZD1cInBkZi1yZWFkZXJfX3BhZ2VfX291dGxpbmUtdGFyZ2V0XCJcbiAgICAgICAgICAgIHN0eWxlPXt7IGxlZnQ6IGxlZnRQeCArICdweCcsIHRvcDogdG9wUHggKyAncHgnIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xufTtcblxuLyoqXG4gKiBIVE1MIGFuY2hvciB0YWcgYWxsb3dzIHlvdSB0byBkb3dubG9hZCBhIGZpbGUgZnJvbSB0aGUgc2FtZSBvcmlnaW4uXG4gKiBUaGlzIGlzIGEgd29ya2Fyb3VuZCB0byBkb3dubG9hZCBhIGZpbGUgc2VydmVkIGZyb20gYSBkaWZmZXJlbnQgb3JpZ2luXG4gKi9cbmV4cG9ydCBjb25zdCBQcmludEJ1dHRvbjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgLi4uZXh0cmFQcm9wc1xufTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBvbkNsaWNrPXsoKSA9PiBvbkNsaWNrUHJpbnQoKX1cbiAgICAgIGFyaWEtbGFiZWw9XCJQcmludCBQREZcIlxuICAgICAgY2xhc3NOYW1lPXtgcGRmLXJlYWRlcl9fcHJpbnQtYnRuICR7Y2xhc3NOYW1lfWB9XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6ICdQcmludCd9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gb25DbGlja1ByaW50KCk6IHZvaWQge1xuICB3aW5kb3cucHJpbnQoKTtcbn1cbiIsIi8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBtaW4gb3IgbWF4IGlmIHZhbHVlIGV4Y2VlZHMgdGhlIHJhbmdlLCBvdGhlcndpc2Vcbi8vIHRoZSBvcmlnaW5hbCB2YWx1ZSBpcyByZXR1cm5lZFxuZXhwb3J0IGNvbnN0IGJhbmRQYXNzRmlsdGVyID0gKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KTtcbn07XG4iLCJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYmFuZFBhc3NGaWx0ZXIgfSBmcm9tICcuLi91dGlscy91dGlsJztcblxuY29uc3QgREVGQVVMVF9NSU5fV0lEVEhfUFggPSAzMDA7XG5jb25zdCBERUZBVUxUX01BWF9XSURUSF9QWCA9IDcwMDtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIG1pbldpZHRoUHg/OiBudW1iZXI7XG4gIG1heFdpZHRoUHg/OiBudW1iZXI7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGhlYWRlcj86IHN0cmluZyB8IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgY29udGVudD86IHN0cmluZyB8IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgZm9vdGVyPzogc3RyaW5nIHwgUmVhY3QuUmVhY3RFbGVtZW50O1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xuICBkcmFnSGFuZGxlUG9zaXRpb24/OiBzdHJpbmc7XG4gIGNsb3NlQnV0dG9uPzogYm9vbGVhbiB8IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgb25DbG9zZT86ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgU2lkZVBhbmVsOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBtaW5XaWR0aFB4ID0gREVGQVVMVF9NSU5fV0lEVEhfUFgsXG4gIG1heFdpZHRoUHggPSBERUZBVUxUX01BWF9XSURUSF9QWCxcbiAgY2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgaGVhZGVyLFxuICBjb250ZW50LFxuICBmb290ZXIsXG4gIGRyYWdIYW5kbGVQb3NpdGlvbixcbiAgY2xvc2VCdXR0b24sXG4gIGlzVmlzaWJsZSA9IHRydWUsXG4gIG9uQ2xvc2UsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIC8vIFRoZSBvdmVybGF5IGlzIHVzZWQgdG8gY2F0Y2ggbW91c2UgdXAgZXZlbnRzIG92ZXIgaWZyYW1lIGNvbnRlbnRzXG4gIC8vIHNvIHRoZSBtb3VzZXVwIGV2ZW50cyB3aWxsIG5vdCBiZSBtaXNzZWQgaWYgdGhlIGNsaWNrIGlzIHJlbGVhc2VkIG92ZXJcbiAgLy8gdGhlIGlmcmFtZSBhbmQgdGhlIGV2ZW50IGxpc3RlbmVycyB3aWxsIGZhaWwgdG8gYmUgcmVtb3ZlZFxuICBjb25zdCBbaXNPdmVybGF5VmlzaWJsZSwgc2V0SXNPdmVybGF5VmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtwYW5lbFdpZHRoLCBzZXRQYW5lbFdpZHRoXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4obWluV2lkdGhQeCk7XG4gIGNvbnN0IHNpZGVQYW5lbFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGRyYWdIYW5kbGVSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHJlbmRlckNsb3NlQnV0dG9uID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgY2xvc2VCdXR0b24gPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19zaWRlLXBhbmVsLWNsb3NlLWJ1dHRvblwiIG9uQ2xpY2s9e29uQ2xvc2V9PlxuICAgICAgICAgIHhcbiAgICAgICAgPC9idXR0b24+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY2xvc2VCdXR0b247XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyRHJhZ0hhbmRsZSA9ICgpID0+IHtcbiAgICBjb25zdCBpc0RyYWdIYW5kbGVPbkxlZnQgPSBkcmFnSGFuZGxlUG9zaXRpb24gPT09ICdsZWZ0JztcbiAgICBjb25zdCBpc0RyYWdIYW5kbGVPblJpZ2h0ID0gZHJhZ0hhbmRsZVBvc2l0aW9uID09PSAncmlnaHQnO1xuICAgIGlmICghaXNEcmFnSGFuZGxlT25MZWZ0ICYmICFpc0RyYWdIYW5kbGVPblJpZ2h0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNlTW92ZSA9IChtb3VzZU1vdmVFdmVudDogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFzaWRlUGFuZWxSZWYgfHwgIXNpZGVQYW5lbFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3V2lkdGggPVxuICAgICAgICBkcmFnSGFuZGxlUG9zaXRpb24gPT09ICdsZWZ0J1xuICAgICAgICAgID8gc2lkZVBhbmVsUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgLSBtb3VzZU1vdmVFdmVudC5wYWdlWFxuICAgICAgICAgIDogbW91c2VNb3ZlRXZlbnQucGFnZVggLSBzaWRlUGFuZWxSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXG4gICAgICBzZXRQYW5lbFdpZHRoKGJhbmRQYXNzRmlsdGVyKG5ld1dpZHRoLCBtaW5XaWR0aFB4LCBtYXhXaWR0aFB4KSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uTW91c2VVcCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIC8vIGRyb3Agb3BhY2l0eSBzdHlsaW5nIG9uIGRyYWcgaGFuZGxlXG4gICAgICBpZiAoZHJhZ0hhbmRsZVJlZiAmJiBkcmFnSGFuZGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZHJhZ0hhbmRsZVJlZi5jdXJyZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgIHNldElzT3ZlcmxheVZpc2libGUoZmFsc2UpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uRHJhZ2dpbmdIYW5kbGUgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyBwcmV2ZW50IGZsYXNoaW5nIHdoZW4gdGhlIG1vdXNlIGhvdmVycyBvdXRzaWRlIHRoZSByZXNpemUgem9uZVxuICAgICAgaWYgKGRyYWdIYW5kbGVSZWYgJiYgZHJhZ0hhbmRsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGRyYWdIYW5kbGVSZWYuY3VycmVudC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgfVxuXG4gICAgICBzZXRJc092ZXJsYXlWaXNpYmxlKHRydWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXAsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25DaGFuZ2VQYW5lbFdpZHRoID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pik6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgbmV3V2lkdGggPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcbiAgICAgIHNldFBhbmVsV2lkdGgoYmFuZFBhc3NGaWx0ZXIobmV3V2lkdGgsIG1pbldpZHRoUHgsIG1heFdpZHRoUHgpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdwZGYtcmVhZGVyX19yZXNpemUtem9uZScsIHtcbiAgICAgICAgICAncGRmLXJlYWRlcl9fcmVzaXplLXpvbmUtLWxlZnQnOiBpc0RyYWdIYW5kbGVPbkxlZnQsXG4gICAgICAgICAgJ3BkZi1yZWFkZXJfX3Jlc2l6ZS16b25lLS1yaWdodCc6IGlzRHJhZ0hhbmRsZU9uUmlnaHQsXG4gICAgICAgIH0pfT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fZHJhZy1oYW5kbGVfX2Fzc2lzdGl2ZS1pbnB1dFwiXG4gICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICBtaW49e21pbldpZHRoUHh9XG4gICAgICAgICAgbWF4PXttYXhXaWR0aFB4fVxuICAgICAgICAgIHN0ZXA9XCI1XCJcbiAgICAgICAgICB2YWx1ZT17cGFuZWxXaWR0aH1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2VQYW5lbFdpZHRofVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgcmVmPXtkcmFnSGFuZGxlUmVmfVxuICAgICAgICAgIHJvbGU9XCJzbGlkZXJcIlxuICAgICAgICAgIGFyaWEtdmFsdWVub3c9e3BhbmVsV2lkdGh9XG4gICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgIG9uTW91c2VEb3duPXtvbkRyYWdnaW5nSGFuZGxlfVxuICAgICAgICAgIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX2RyYWctaGFuZGxlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19kcmFnLWhhbmRsZV9faW5uZXJcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICByZWY9e3NpZGVQYW5lbFJlZn1cbiAgICAgIHN0eWxlPXt7IHdpZHRoOiBwYW5lbFdpZHRoIH19XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXG4gICAgICAgICdwZGYtcmVhZGVyX19zaWRlLXBhbmVsJyxcbiAgICAgICAgeyAncGRmLXJlYWRlcl9fc2lkZS1wYW5lbC0taGlkZGVuJzogIWlzVmlzaWJsZSB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7cmVuZGVyRHJhZ0hhbmRsZSgpfVxuICAgICAge2Nsb3NlQnV0dG9uICYmIHJlbmRlckNsb3NlQnV0dG9uKCl9XG4gICAgICB7aGVhZGVyICYmIDxoMiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19zaWRlLXBhbmVsLXRpdGxlXCI+e2hlYWRlcn08L2gyPn1cbiAgICAgIHtjb250ZW50ICYmIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fc2lkZS1wYW5lbC1jb250ZW50XCI+e2NvbnRlbnR9PC9kaXY+fVxuICAgICAge2Zvb3RlciAmJiA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3NpZGUtcGFuZWwtZm9vdGVyXCI+e2Zvb3Rlcn08L2Rpdj59XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7aXNPdmVybGF5VmlzaWJsZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3NpZGUtcGFuZWwtb3ZlcmxheVwiIC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBQYWdlUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUGFnZVJlbmRlckNvbnRleHQnO1xuaW1wb3J0IHsgU2Nyb2xsQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvU2Nyb2xsQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRNYXhWaXNpYmxlRWxlbWVudCB9IGZyb20gJy4uLy4uL3V0aWxzL01heFZpc2libGVFbGVtZW50JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vdHlwZXMvdXRpbHMnO1xuXG50eXBlIFByb3BzID0ge1xuICBwYWdlTnVtYmVyOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgVGh1bWJuYWlsOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBwYWdlTnVtYmVyIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZ2V0T2JqZWN0VVJMRm9yUGFnZSB9ID0gUmVhY3QudXNlQ29udGV4dChQYWdlUmVuZGVyQ29udGV4dCk7XG4gIGNvbnN0IHsgaXNQYWdlVmlzaWJsZSwgc2Nyb2xsVG9QYWdlLCB2aXNpYmxlUGFnZVJhdGlvcyB9ID0gUmVhY3QudXNlQ29udGV4dChTY3JvbGxDb250ZXh0KTtcbiAgY29uc3QgW21heFZpc2libGVQYWdlTnVtYmVyLCBzZXRNYXhWaXNpYmxlUGFnZU51bWJlcl0gPSBSZWFjdC51c2VTdGF0ZTxOdWxsYWJsZTxzdHJpbmc+PihudWxsKTtcbiAgY29uc3Qgb2JqZWN0VVJMID0gZ2V0T2JqZWN0VVJMRm9yUGFnZSh7IHBhZ2VOdW1iZXIgfSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmlzaWJsZVBhZ2VSYXRpb3Muc2l6ZSAhPT0gMCkge1xuICAgICAgY29uc3QgbWF4ID0gZ2V0TWF4VmlzaWJsZUVsZW1lbnQodmlzaWJsZVBhZ2VSYXRpb3MpO1xuICAgICAgaWYgKG1heCkge1xuICAgICAgICBzZXRNYXhWaXNpYmxlUGFnZU51bWJlcihtYXgudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbdmlzaWJsZVBhZ2VSYXRpb3NdKTtcblxuICBjb25zdCBpc1RodW1ibmFpbFZpc2libGUgPVxuICAgIG1heFZpc2libGVQYWdlTnVtYmVyICYmXG4gICAgcGFyc2VJbnQobWF4VmlzaWJsZVBhZ2VOdW1iZXIpID09PSBwYWdlTnVtYmVyICYmXG4gICAgaXNQYWdlVmlzaWJsZSh7IHBhZ2VOdW1iZXIgfSk7XG5cbiAgY29uc3Qgb25DbGljayA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzY3JvbGxUb1BhZ2UoeyBwYWdlTnVtYmVyIH0pO1xuICAgIH0sXG4gICAgW3BhZ2VOdW1iZXIsIHNjcm9sbFRvUGFnZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxhXG4gICAgICBhcmlhLWxhYmVsPXtgc2Nyb2xsIHRvIHBhZ2UgJHtwYWdlTnVtYmVyfWB9XG4gICAgICBocmVmPXtgIyR7cGFnZU51bWJlcn1gfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhcbiAgICAgICAgJ3BkZi1yZWFkZXJfX3RodW1ibmFpbCcsXG4gICAgICAgIHsgJ3BkZi1yZWFkZXJfX3RodW1ibmFpbC0tbm8taW1hZ2UnOiAhb2JqZWN0VVJMIH0sXG4gICAgICAgIHsgJ3BkZi1yZWFkZXJfX3RodW1ibmFpbC0taXMtdmlzaWJsZSc6IGlzVGh1bWJuYWlsVmlzaWJsZSB9XG4gICAgICApfVxuICAgICAgZGF0YS1wYWdlLW51bWJlcj17cGFnZU51bWJlcn1cbiAgICAgIGRhdGEtdGVzdC1pZD1cInRodW1ibmFpbC1saW5rXCI+XG4gICAgICB7ISFvYmplY3RVUkwgJiYgPGltZyBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX190aHVtYm5haWwtaW1hZ2VcIiBzcmM9e29iamVjdFVSTH0gLz59XG4gICAgPC9hPlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgVGh1bWJuYWlsIH0gZnJvbSAnLi9UaHVtYm5haWwnO1xuXG50eXBlIFByb3BzID0gYW55O1xuXG5leHBvcnQgY29uc3QgVGh1bWJuYWlsTGlzdDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKCkgPT4ge1xuICBjb25zdCB7IG51bVBhZ2VzIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3RodW1ibmFpbC1saXN0LXdyYXBwZXJcIj5cbiAgICAgIDx1bCBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX190aHVtYm5haWwtbGlzdFwiPlxuICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogbnVtUGFnZXMgfSkubWFwKChfLCBwYWdlSW5kZXgpID0+IChcbiAgICAgICAgICA8bGkga2V5PXtwYWdlSW5kZXggKyAxfSBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX190aHVtYm5haWwtbGlzdF9faXRlbVwiPlxuICAgICAgICAgICAgPFRodW1ibmFpbCBwYWdlTnVtYmVyPXtwYWdlSW5kZXggKyAxfSAvPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJleHBvcnQgY29uc3QgUGVyY2VudEZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG4gIHN0eWxlOiAncGVyY2VudCcsXG4gIG1heGltdW1TaWduaWZpY2FudERpZ2l0czogMyxcbn0pO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IFBlcmNlbnRGb3JtYXR0ZXIgfSBmcm9tICcuLi91dGlscy9mb3JtYXQnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgb25ab29tPzogKHNjYWxlOiBudW1iZXIpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBNQVhfWk9PTV9JTl9TQ0FMRSA9IDUwMDtcblxuZXhwb3J0IGNvbnN0IFpvb21JbkJ1dHRvbjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgb25ab29tLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHNjYWxlLCBzZXRTY2FsZSwgem9vbUluY3JlbWVudFZhbHVlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuXG4gIGNvbnN0IGhhbmRsZVpvb21JbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgY29uc3QgbmV3U2NhbGVWYWx1ZSA9IHNjYWxlICsgem9vbUluY3JlbWVudFZhbHVlO1xuICAgICAgY29uc3Qgem9vbVNjYWxlID0gTnVtYmVyKFBlcmNlbnRGb3JtYXR0ZXIuZm9ybWF0KG5ld1NjYWxlVmFsdWUpLnJlcGxhY2UoJyUnLCAnJykpO1xuXG4gICAgICBpZiAoem9vbVNjYWxlIDw9IE1BWF9aT09NX0lOX1NDQUxFKSB7XG4gICAgICAgIGlmIChvblpvb20pIHtcbiAgICAgICAgICBvblpvb20obmV3U2NhbGVWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRTY2FsZShuZXdTY2FsZVZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzY2FsZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17YHJlYWRlcl9fem9vbS1idG4gem9vbS1pbiAke2NsYXNzTmFtZX1gfVxuICAgICAgb25DbGljaz17aGFuZGxlWm9vbUlufVxuICAgICAgey4uLmV4dHJhUHJvcHN9PlxuICAgICAge2NoaWxkcmVuID8gY2hpbGRyZW4gOiAnKyd9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IFBlcmNlbnRGb3JtYXR0ZXIgfSBmcm9tICcuLi91dGlscy9mb3JtYXQnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgb25ab29tPzogKHNjYWxlOiBudW1iZXIpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBNSU5fWk9PTV9PVVRfU0NBTEUgPSAyMDtcblxuZXhwb3J0IGNvbnN0IFpvb21PdXRCdXR0b246IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgb25ab29tLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHNjYWxlLCBzZXRTY2FsZSwgem9vbUluY3JlbWVudFZhbHVlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuXG4gIGNvbnN0IGhhbmRsZVpvb21PdXQgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZXZlbnQpOiB2b2lkID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnN0IG5ld1NjYWxlVmFsdWUgPSBzY2FsZSAtIHpvb21JbmNyZW1lbnRWYWx1ZTtcbiAgICAgIGNvbnN0IHpvb21TY2FsZSA9IE51bWJlcihQZXJjZW50Rm9ybWF0dGVyLmZvcm1hdChuZXdTY2FsZVZhbHVlKS5yZXBsYWNlKCclJywgJycpKTtcblxuICAgICAgaWYgKHpvb21TY2FsZSA+PSBNSU5fWk9PTV9PVVRfU0NBTEUpIHtcbiAgICAgICAgaWYgKG9uWm9vbSkge1xuICAgICAgICAgIG9uWm9vbShuZXdTY2FsZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRTY2FsZShuZXdTY2FsZVZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzY2FsZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17YHJlYWRlcl9fem9vbS1idG4gem9vbS1vdXQgJHtjbGFzc05hbWV9YH1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZVpvb21PdXR9XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6ICctJ31cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IERvY3VtZW50Q29udGV4dCwgdXNlRG9jdW1lbnRDb250ZXh0UHJvcHMgfSBmcm9tICcuL0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBQYWdlUmVuZGVyQ29udGV4dCwgdXNlUGFnZVJlbmRlckNvbnRleHRQcm9wcyB9IGZyb20gJy4vUGFnZVJlbmRlckNvbnRleHQnO1xuaW1wb3J0IHsgU2Nyb2xsQ29udGV4dCwgdXNlU2Nyb2xsQ29udGV4dFByb3BzIH0gZnJvbSAnLi9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7IFRyYW5zZm9ybUNvbnRleHQsIHVzZVRyYW5zZm9ybUNvbnRleHRQcm9wcyB9IGZyb20gJy4vVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBVaUNvbnRleHQsIHVzZVVpQ29udGV4dFByb3BzIH0gZnJvbSAnLi9VaUNvbnRleHQnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ+O1xufTtcblxuZXhwb3J0IGNvbnN0IENvbnRleHRQcm92aWRlcjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHsgY2hpbGRyZW4gfTogUHJvcHMpID0+IHtcbiAgY29uc3QgZG9jdW1lbnRQcm9wcyA9IHVzZURvY3VtZW50Q29udGV4dFByb3BzKCk7XG4gIGNvbnN0IHRyYW5zZm9ybVByb3BzID0gdXNlVHJhbnNmb3JtQ29udGV4dFByb3BzKCk7XG4gIGNvbnN0IHVpUHJvcHMgPSB1c2VVaUNvbnRleHRQcm9wcygpO1xuICBjb25zdCBzY3JvbGxQcm9wcyA9IHVzZVNjcm9sbENvbnRleHRQcm9wcygpO1xuICBjb25zdCBwYWdlUmVuZGVyUHJvcHMgPSB1c2VQYWdlUmVuZGVyQ29udGV4dFByb3BzKHtcbiAgICBwZGZEb2NQcm94eTogZG9jdW1lbnRQcm9wcy5wZGZEb2NQcm94eSxcbiAgICBwaXhlbFJhdGlvOiB0cmFuc2Zvcm1Qcm9wcy5waXhlbFJhdGlvLFxuICAgIHNjYWxlOiB0cmFuc2Zvcm1Qcm9wcy5zY2FsZSxcbiAgICB2aXNpYmxlUGFnZVJhdGlvczogc2Nyb2xsUHJvcHMudmlzaWJsZVBhZ2VSYXRpb3MsXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPERvY3VtZW50Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZG9jdW1lbnRQcm9wc30+XG4gICAgICA8VHJhbnNmb3JtQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dHJhbnNmb3JtUHJvcHN9PlxuICAgICAgICA8VWlDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1aVByb3BzfT5cbiAgICAgICAgICA8U2Nyb2xsQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17c2Nyb2xsUHJvcHN9PlxuICAgICAgICAgICAgPFBhZ2VSZW5kZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwYWdlUmVuZGVyUHJvcHN9PlxuICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICA8L1BhZ2VSZW5kZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgIDwvU2Nyb2xsQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgPC9VaUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L1RyYW5zZm9ybUNvbnRleHQuUHJvdmlkZXI+XG4gICAgPC9Eb2N1bWVudENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuIiwiLypcbiAqIFBERiBDb21wb25lbnQgTGlicmFyeSBleHBvcnRzXG4gKi9cblxuaW1wb3J0ICcuL2xlc3MvaW5kZXgubGVzcyc7XG5cbmltcG9ydCB7IEJvdW5kaW5nQm94LCBQcm9wcyBhcyBCb3VuZGluZ0JveFByb3BzIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9Cb3VuZGluZ0JveCc7XG5pbXBvcnQgeyBEb2N1bWVudFdyYXBwZXIsIFByb3BzIGFzIERvY3VtZW50V3JhcHBlclByb3BzIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9Eb2N1bWVudFdyYXBwZXInO1xuaW1wb3J0IHsgRG93bmxvYWRCdXR0b24sIFByb3BzIGFzIERvd25sb2FkQnV0dG9uUHJvcHMgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL0Rvd25sb2FkQnV0dG9uJztcbmltcG9ydCB7XG4gIEhpZ2hsaWdodE92ZXJsYXksXG4gIFByb3BzIGFzIEhpZ2hsaWdodE92ZXJsYXlQcm9wcyxcbn0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9IaWdobGlnaHRPdmVybGF5JztcbmltcG9ydCB7IEljb25GbGFnIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9pY29uL0ljb25GbGFnJztcbmltcG9ydCB7IEFycm93RmxhZyB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvbWFya2VyL0Fycm93RmxhZyc7XG5pbXBvcnQgeyBBcnJvd0ZsYWdCYXNlLCBQT1NJVElPTiwgUG9zaXRpb25UeXBlIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9tYXJrZXIvQXJyb3dGbGFnQmFzZSc7XG5pbXBvcnQgeyBPdXRsaW5lIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9vdXRsaW5lL091dGxpbmUnO1xuaW1wb3J0IHsgT3V0bGluZUl0ZW0gfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL291dGxpbmUvT3V0bGluZUl0ZW0nO1xuaW1wb3J0IHsgT3ZlcmxheSwgUHJvcHMgYXMgT3ZlcmxheVByb3BzIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9PdmVybGF5JztcbmltcG9ydCB7IFBhZ2VOdW1iZXJDb250cm9sIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9QYWdlTnVtYmVyQ29udHJvbCc7XG5pbXBvcnQgeyBQYWdlUHJvcHMsIFBhZ2VXcmFwcGVyLCBQcm9wcyBhcyBQYWdlV3JhcHBlclByb3BzIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9QYWdlV3JhcHBlcic7XG5pbXBvcnQgeyBQcmludEJ1dHRvbiwgUHJvcHMgYXMgUHJpbnRCdXR0b25Qcm9wcyB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvUHJpbnRCdXR0b24nO1xuaW1wb3J0IHsgUHJvcHMgYXMgU2lkZVBhbmVsUHJvcHMsIFNpZGVQYW5lbCB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvU2lkZVBhbmVsJztcbmltcG9ydCB7IFRodW1ibmFpbCB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvdGh1bWJuYWlscy9UaHVtYm5haWwnO1xuaW1wb3J0IHsgVGh1bWJuYWlsTGlzdCB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvdGh1bWJuYWlscy9UaHVtYm5haWxMaXN0JztcbmltcG9ydCB7XG4gIEJvdW5kaW5nQm94IGFzIEJvdW5kaW5nQm94VHlwZSxcbiAgRGltZW5zaW9ucyxcbiAgT3JpZ2luLFxuICBSYXdCb3VuZGluZ0JveCxcbiAgc2NhbGVSYXdCb3VuZGluZ0JveCxcbiAgU2l6ZSxcbn0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveCc7XG5pbXBvcnQgeyBOb2RlRGVzdGluYXRpb24sIE91dGxpbmVOb2RlIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90eXBlcy9vdXRsaW5lJztcbmltcG9ydCB7IFBhZ2VQcm9wZXJ0aWVzLCBQYWdlUmVmZXJlbmNlIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90eXBlcy9wYWdlJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBab29tSW5CdXR0b24gfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL1pvb21JbkJ1dHRvbic7XG5pbXBvcnQgeyBab29tT3V0QnV0dG9uIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9ab29tT3V0QnV0dG9uJztcbmltcG9ydCB7IENvbnRleHRQcm92aWRlciwgUHJvcHMgYXMgQ29udGV4dFByb3ZpZGVyUHJvcHMgfSBmcm9tICcuL3NyYy9jb250ZXh0L0NvbnRleHRQcm92aWRlcic7XG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQsIElEb2N1bWVudENvbnRleHQgfSBmcm9tICcuL3NyYy9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBJUGFnZVJlbmRlckNvbnRleHQsIFBhZ2VSZW5kZXJDb250ZXh0IH0gZnJvbSAnLi9zcmMvY29udGV4dC9QYWdlUmVuZGVyQ29udGV4dCc7XG5pbXBvcnQgeyBJU2Nyb2xsQ29udGV4dCwgU2Nyb2xsQ29udGV4dCB9IGZyb20gJy4vc3JjL2NvbnRleHQvU2Nyb2xsQ29udGV4dCc7XG5pbXBvcnQge1xuICBERUZBVUxUX1pPT01fU0NBTEUsXG4gIElUcmFuc2Zvcm1Db250ZXh0LFxuICBUcmFuc2Zvcm1Db250ZXh0LFxufSBmcm9tICcuL3NyYy9jb250ZXh0L1RyYW5zZm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgSVVpQ29udGV4dCwgVWlDb250ZXh0IH0gZnJvbSAnLi9zcmMvY29udGV4dC9VaUNvbnRleHQnO1xuaW1wb3J0IHsgUGVyY2VudEZvcm1hdHRlciB9IGZyb20gJy4vc3JjL3V0aWxzL2Zvcm1hdCc7XG5pbXBvcnQgeyBSRU5ERVJfVFlQRSB9IGZyb20gJy4vc3JjL3V0aWxzL3JlYWRlci11dGlscyc7XG5pbXBvcnQge1xuICBpc1NpZGV3YXlzLFxuICBQYWdlUm90YXRpb24sXG4gIHJvdGF0ZUNsb2Nrd2lzZSxcbiAgcm90YXRlQ291bnRlckNsb2Nrd2lzZSxcbn0gZnJvbSAnLi9zcmMvdXRpbHMvcm90YXRlJztcbmltcG9ydCB7IGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4LCBzY3JvbGxUb0lkLCBzY3JvbGxUb1BkZlBhZ2VJbmRleCB9IGZyb20gJy4vc3JjL3V0aWxzL3Njcm9sbCc7XG5pbXBvcnQge1xuICBjb21wdXRlQm91bmRpbmdCb3hTdHlsZSxcbiAgY29tcHV0ZVBhZ2VTdHlsZSxcbiAgZ2V0UGFnZUhlaWdodCxcbiAgZ2V0UGFnZVdpZHRoLFxufSBmcm9tICcuL3NyYy91dGlscy9zdHlsZSc7XG5cbmV4cG9ydCB0eXBlIHtcbiAgQm91bmRpbmdCb3hQcm9wcyxcbiAgQm91bmRpbmdCb3hUeXBlLFxuICBDb250ZXh0UHJvdmlkZXJQcm9wcyxcbiAgRGltZW5zaW9ucyxcbiAgRG9jdW1lbnRXcmFwcGVyUHJvcHMsXG4gIERvd25sb2FkQnV0dG9uUHJvcHMsXG4gIEhpZ2hsaWdodE92ZXJsYXlQcm9wcyxcbiAgSURvY3VtZW50Q29udGV4dCxcbiAgSVBhZ2VSZW5kZXJDb250ZXh0LFxuICBJU2Nyb2xsQ29udGV4dCxcbiAgSVRyYW5zZm9ybUNvbnRleHQsXG4gIElVaUNvbnRleHQsXG4gIE5vZGVEZXN0aW5hdGlvbixcbiAgTnVsbGFibGUsXG4gIE9yaWdpbixcbiAgT3V0bGluZU5vZGUsXG4gIE92ZXJsYXlQcm9wcyxcbiAgUGFnZVByb3BlcnRpZXMsXG4gIFBhZ2VQcm9wcyxcbiAgUGFnZVJlZmVyZW5jZSxcbiAgUGFnZVJvdGF0aW9uLFxuICBQYWdlV3JhcHBlclByb3BzLFxuICBQb3NpdGlvblR5cGUsXG4gIFByaW50QnV0dG9uUHJvcHMsXG4gIFJhd0JvdW5kaW5nQm94LFxuICBTaWRlUGFuZWxQcm9wcyxcbiAgU2l6ZSxcbn07XG5cbmV4cG9ydCB7XG4gIEFycm93RmxhZyxcbiAgQXJyb3dGbGFnQmFzZSxcbiAgQm91bmRpbmdCb3gsXG4gIGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlLFxuICBjb21wdXRlUGFnZVN0eWxlLFxuICBDb250ZXh0UHJvdmlkZXIsXG4gIERFRkFVTFRfWk9PTV9TQ0FMRSxcbiAgRG9jdW1lbnRDb250ZXh0LFxuICBEb2N1bWVudFdyYXBwZXIsXG4gIERvd25sb2FkQnV0dG9uLFxuICBnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleCxcbiAgZ2V0UGFnZUhlaWdodCxcbiAgZ2V0UGFnZVdpZHRoLFxuICBIaWdobGlnaHRPdmVybGF5LFxuICBJY29uRmxhZyxcbiAgaXNTaWRld2F5cyxcbiAgT3V0bGluZSxcbiAgT3V0bGluZUl0ZW0sXG4gIE92ZXJsYXksXG4gIFBhZ2VOdW1iZXJDb250cm9sLFxuICBQYWdlUmVuZGVyQ29udGV4dCxcbiAgUGFnZVdyYXBwZXIsXG4gIFBlcmNlbnRGb3JtYXR0ZXIsXG4gIFBPU0lUSU9OLFxuICBQcmludEJ1dHRvbixcbiAgUkVOREVSX1RZUEUsXG4gIHJvdGF0ZUNsb2Nrd2lzZSxcbiAgcm90YXRlQ291bnRlckNsb2Nrd2lzZSxcbiAgc2NhbGVSYXdCb3VuZGluZ0JveCxcbiAgU2Nyb2xsQ29udGV4dCxcbiAgc2Nyb2xsVG9JZCxcbiAgc2Nyb2xsVG9QZGZQYWdlSW5kZXgsXG4gIFNpZGVQYW5lbCxcbiAgVGh1bWJuYWlsLFxuICBUaHVtYm5haWxMaXN0LFxuICBUcmFuc2Zvcm1Db250ZXh0LFxuICBVaUNvbnRleHQsXG4gIFpvb21JbkJ1dHRvbixcbiAgWm9vbU91dEJ1dHRvbixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQm91bmRpbmdCb3gsXG4gIGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlLFxuICBjb21wdXRlUGFnZVN0eWxlLFxuICBDb250ZXh0UHJvdmlkZXIsXG4gIERFRkFVTFRfWk9PTV9TQ0FMRSxcbiAgRG9jdW1lbnRDb250ZXh0LFxuICBEb2N1bWVudFdyYXBwZXIsXG4gIERvd25sb2FkQnV0dG9uLFxuICBBcnJvd0ZsYWcsXG4gIEFycm93RmxhZ0Jhc2UsXG4gIFByaW50QnV0dG9uLFxuICBnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleCxcbiAgZ2V0UGFnZUhlaWdodCxcbiAgZ2V0UGFnZVdpZHRoLFxuICBIaWdobGlnaHRPdmVybGF5LFxuICBJY29uRmxhZyxcbiAgaXNTaWRld2F5cyxcbiAgT3V0bGluZSxcbiAgT3V0bGluZUl0ZW0sXG4gIE92ZXJsYXksXG4gIFBhZ2VOdW1iZXJDb250cm9sLFxuICBQYWdlUmVuZGVyQ29udGV4dCxcbiAgUGFnZVJvdGF0aW9uLFxuICBQYWdlV3JhcHBlcixcbiAgUE9TSVRJT04sXG4gIFNpZGVQYW5lbCxcbiAgUGVyY2VudEZvcm1hdHRlcixcbiAgUkVOREVSX1RZUEUsXG4gIHJvdGF0ZUNsb2Nrd2lzZSxcbiAgcm90YXRlQ291bnRlckNsb2Nrd2lzZSxcbiAgc2NhbGVSYXdCb3VuZGluZ0JveCxcbiAgc2Nyb2xsVG9JZCxcbiAgc2Nyb2xsVG9QZGZQYWdlSW5kZXgsXG4gIFRodW1ibmFpbCxcbiAgVGh1bWJuYWlsTGlzdCxcbiAgU2Nyb2xsQ29udGV4dCxcbiAgVHJhbnNmb3JtQ29udGV4dCxcbiAgVWlDb250ZXh0LFxuICBab29tSW5CdXR0b24sXG4gIFpvb21PdXRCdXR0b24sXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///224\n')},323:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__323__},888:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__888__}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U);var __webpack_exports__=__webpack_require__(224);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));