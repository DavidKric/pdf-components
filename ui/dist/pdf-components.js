(()=>{"use strict";var __webpack_modules__={220:()=>{eval('\n// UNUSED EXPORTS: BoundingBox, ContextProvider, DocumentContext, DocumentWrapper, HighlightOverlay, Overlay, PageRotation, PageWrapper, TransformContext, UiContext, computeBoundingBoxStyle, computePageDimensions, computePageStyle, generatePageId, getErrorMessage, getPageHeight, getPageWidth, isSideways, logProviderWarning, rotateClockwise, rotateCounterClockwise, scrollTo, scrollToPdfPage\n\n;// CONCATENATED MODULE: external "classnames"\nconst external_classnames_namespaceObject = require("classnames");\n;// CONCATENATED MODULE: external "react"\nconst external_react_namespaceObject = require("react");\n;// CONCATENATED MODULE: ./library/utils/provider.ts\nfunction logProviderWarning(functionName, providerName) {\n    console.warn(`Unable to call ${functionName}. The ${providerName} Provider may not be set up correctly.`);\n}\n\n;// CONCATENATED MODULE: ./library/context/DocumentContext.ts\n\n\nconst DocumentContext_DocumentContext = external_react_namespaceObject.createContext({\n    numPages: 0,\n    pageDimensions: { height: 0, width: 0 },\n    setNumPages: numPages => {\n        logProviderWarning(`setNumPages(${numPages})`, \'DocumentContext\');\n    },\n    setPageDimensions: pageDimensions => {\n        logProviderWarning(`setPageDimensions(${pageDimensions})`, \'DocumentContext\');\n    },\n});\n\n;// CONCATENATED MODULE: ./library/utils/rotate.ts\nvar rotate_PageRotation;\n(function (PageRotation) {\n    PageRotation[PageRotation["Rotate0"] = 0] = "Rotate0";\n    PageRotation[PageRotation["Rotate90"] = 90] = "Rotate90";\n    PageRotation[PageRotation["Rotate180"] = 180] = "Rotate180";\n    PageRotation[PageRotation["Rotate270"] = 270] = "Rotate270";\n})(rotate_PageRotation || (rotate_PageRotation = {}));\nfunction rotateClockwise(rotation) {\n    switch (rotation) {\n        case rotate_PageRotation.Rotate0:\n            return rotate_PageRotation.Rotate90;\n        case rotate_PageRotation.Rotate90:\n            return rotate_PageRotation.Rotate180;\n        case rotate_PageRotation.Rotate180:\n            return rotate_PageRotation.Rotate270;\n        default:\n            return rotate_PageRotation.Rotate0;\n    }\n}\nfunction rotateCounterClockwise(rotation) {\n    switch (rotation) {\n        case rotate_PageRotation.Rotate0:\n            return rotate_PageRotation.Rotate270;\n        case rotate_PageRotation.Rotate90:\n            return rotate_PageRotation.Rotate0;\n        case rotate_PageRotation.Rotate180:\n            return rotate_PageRotation.Rotate90;\n        default:\n            return rotate_PageRotation.Rotate180;\n    }\n}\n/**\n * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,\n * e.g. whether the page "is rotated sideways."\n */\nfunction rotate_isSideways(rotation) {\n    return rotation === rotate_PageRotation.Rotate90 || rotation === rotate_PageRotation.Rotate270;\n}\n\n;// CONCATENATED MODULE: ./library/context/TransformContext.ts\n\n\n\nconst TransformContext_TransformContext = external_react_namespaceObject.createContext({\n    rotation: rotate_PageRotation.Rotate0,\n    scale: 1,\n    setRotation: rotation => {\n        logProviderWarning(`setRotation(${rotation})`, \'TransformContext\');\n    },\n    setScale: scale => {\n        logProviderWarning(`setScale(${scale})`, \'TransformContext\');\n    },\n});\n\n;// CONCATENATED MODULE: ./library/utils/style.ts\n\n// Computes the style for a bounding box, accounting for page roation and page scaling/zoom\nfunction style_computeBoundingBoxStyle(boundingBoxSize, pageDimensions, rotation, scale) {\n    const { top, left, height, width } = boundingBoxSize;\n    switch (rotation) {\n        case PageRotation.Rotate90:\n            return {\n                top: left * scale,\n                left: (pageDimensions.height - height - top) * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        case PageRotation.Rotate180:\n            return {\n                top: (pageDimensions.height - height - top) * scale,\n                left: (pageDimensions.width - width - left) * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n        case PageRotation.Rotate270:\n            return {\n                top: (pageDimensions.width - width - left) * scale,\n                left: top * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        default:\n            return {\n                top: top * scale,\n                left: left * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n    }\n}\n// Compute the style for a page, accounting for page rotation and page scaling/zoom\nfunction style_computePageStyle(pageDimensions, rotation, scale) {\n    return {\n        height: getPageHeight(pageDimensions, rotation) * scale,\n        width: style_getPageWidth(pageDimensions, rotation) * scale,\n        left: 0,\n        top: 0,\n    };\n}\n// Get page height accounting for page rotation- if the page is rotated on its side, its width becomes its height\nfunction getPageHeight(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.width : pageDimensions.height;\n}\n// Get page width accounting for page rotation- if the page is rotated on its side, its height becomes its width\nfunction style_getPageWidth(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.height : pageDimensions.width;\n}\n\n;// CONCATENATED MODULE: ./library/components/BoundingBox.tsx\n\n\n\n\n\nconst BoundingBox = ({ top, left, height, width, className, id, isHighlighted, onClick, }) => {\n    const { pageDimensions } = React.useContext(DocumentContext);\n    const { rotation, scale } = React.useContext(TransformContext);\n    const boxSize = { top, left, height, width };\n    const componentClassName = classNames(\'reader__page-overlay__bounding-box\', isHighlighted === true ? \'reader__page-overlay__bounding-box-highlighted\' : \'\', className);\n    const getBoundingBoxStyle = React.useCallback(() => {\n        return computeBoundingBoxStyle(boxSize, pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    return (React.createElement("div", { id: id, className: componentClassName, style: getBoundingBoxStyle(), onClick: onClick }));\n};\n\n;// CONCATENATED MODULE: external "react-pdf/dist/esm/entry.webpack"\nconst entry_webpack_namespaceObject = require("react-pdf/dist/esm/entry.webpack");\n;// CONCATENATED MODULE: ./library/context/UiContext.ts\n\n\nconst UiContext_UiContext = external_react_namespaceObject.createContext({\n    errorMessage: null,\n    isLoading: false,\n    isShowingHighlightOverlay: false,\n    isShowingOutline: false,\n    isShowingTextHighlight: false,\n    setErrorMessage: errorMessage => {\n        logProviderWarning(`setErrorMessage(${errorMessage})`, \'UiContext\');\n    },\n    setIsShowingOutline: isShowingOutline => {\n        logProviderWarning(`setIsShowingOutline(${isShowingOutline})`, \'UiContext\');\n    },\n    setIsLoading: isLoading => {\n        logProviderWarning(`setIsLoading(${isLoading})`, \'UiContext\');\n    },\n    setIsShowingHighlightOverlay: isShowingHighlightOverlay => {\n        logProviderWarning(`setIsShowingHighlightOverlay(${isShowingHighlightOverlay})`, \'UiContext\');\n    },\n    setIsShowingTextHighlight: isShowingTextHighlight => {\n        logProviderWarning(`setIsShowingTextHighlight(${isShowingTextHighlight})`, \'UiContext\');\n    },\n});\n\n;// CONCATENATED MODULE: ./library/components/DocumentWrapper.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\nconst DocumentWrapper = (_a) => {\n    var { children } = _a, rest = __rest(_a, ["children"]);\n    const { setNumPages, setPageDimensions } = React.useContext(DocumentContext);\n    const { setErrorMessage, setIsLoading } = React.useContext(UiContext);\n    function getFirstPage(pdfDoc) {\n        // getPage uses 1-indexed pageNumber, not 0-indexed pageIndex\n        return pdfDoc.getPage(1);\n    }\n    const onPdfLoadSuccess = React.useCallback((pdfDoc) => {\n        setNumPages(pdfDoc.numPages);\n        getFirstPage(pdfDoc)\n            .then(page => {\n            setPageDimensions(computePageDimensions(page));\n            setErrorMessage(null);\n        })\n            .catch(error => {\n            setErrorMessage(getErrorMessage(error));\n        })\n            .finally(() => {\n            setIsLoading(false);\n        });\n    }, []);\n    const onPdfLoadError = React.useCallback((error) => {\n        setErrorMessage(getErrorMessage(error));\n        setIsLoading(false);\n    }, []);\n    return (React.createElement(Document, Object.assign({ options: { cMapUrl: \'cmaps/\', cMapPacked: true }, onLoadError: onPdfLoadError, onLoadSuccess: onPdfLoadSuccess }, rest), children));\n};\n\n;// CONCATENATED MODULE: ./library/components/HighlightOverlay.tsx\n\n\n\n\nconst HighlightOverlay = ({ children, pageIndex, }) => {\n    const { pageDimensions } = React.useContext(DocumentContext);\n    const { rotation, scale } = React.useContext(TransformContext);\n    const maskId = `highlight-overlay-mask-${pageIndex}`;\n    const getPageStyle = React.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    const getUnmaskedArea = React.useCallback((boundingBoxes) => {\n        const boxes = Array.isArray(boundingBoxes) ? boundingBoxes : [boundingBoxes];\n        return boxes.map((box, i) => {\n            const boxStyle = computeBoundingBoxStyle(box.props, pageDimensions, rotation, scale);\n            return (React.createElement("rect", { style: boxStyle, x: boxStyle.left, y: boxStyle.top, key: i, fill: "black" }));\n        });\n    }, [pageDimensions, rotation, scale]);\n    return (React.createElement("div", { className: "reader__page-highlight-overlay", style: getPageStyle() },\n        React.createElement("svg", { className: "page-mask", style: getPageStyle() },\n            React.createElement("mask", { id: maskId },\n                React.createElement("rect", { style: getPageStyle(), fill: "white" }),\n                children && getUnmaskedArea(children)),\n            React.createElement("rect", { style: getPageStyle(), fill: "white", opacity: "0.6", mask: `url(#${maskId})` }))));\n};\n\n;// CONCATENATED MODULE: ./library/components/Overlay.tsx\n\n\n\n\nconst Overlay = ({ children }) => {\n    const { pageDimensions } = React.useContext(DocumentContext);\n    const { rotation, scale } = React.useContext(TransformContext);\n    const getOverlayStyle = React.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    return (React.createElement("div", { className: "reader__page-overlay", style: getOverlayStyle() }, children));\n};\n\n;// CONCATENATED MODULE: ./library/components/PageWrapper.tsx\n\n\n\n\n\n\nconst PageWrapper = ({ children, error, loading, noData, pageIndex, }) => {\n    const { rotation, scale } = React.useContext(TransformContext);\n    const { pageDimensions } = React.useContext(DocumentContext);\n    // Don\'t display until we have page size data\n    // TODO: Handle this nicer so we display either the loading or error treatment\n    if (!pageDimensions) {\n        return null;\n    }\n    const onClick = React.useCallback((e) => {\n        console.log(e);\n    }, []);\n    const getWidth = React.useCallback(() => {\n        return getPageWidth(pageDimensions, rotation);\n    }, [pageDimensions, rotation]);\n    const getPageStyle = React.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    // Width needs to be set to prevent the outermost Page div from extending to fit the parent,\n    // and mis-aligning the text layer.\n    // TODO: Can we CSS this to auto-shrink?\n    return (React.createElement("div", { id: generatePageId(pageIndex), className: "reader__page", style: getPageStyle() },\n        children,\n        React.createElement(Page, { width: getWidth(), error: error, loading: loading, noData: noData, pageIndex: pageIndex, scale: scale, onClick: onClick, rotate: rotation, renderAnnotationLayer: false })));\n};\n\n;// CONCATENATED MODULE: ./library/context/ContextProvider.tsx\n\n\n\n\n\nfunction useDocumentContextProps() {\n    const [numPages, setNumPages] = React.useState(0);\n    const [pageDimensions, setPageDimensions] = React.useState({ height: 0, width: 0 });\n    return {\n        numPages,\n        pageDimensions: pageDimensions,\n        setNumPages,\n        setPageDimensions: setPageDimensions,\n    };\n}\nfunction useTransformContextProps() {\n    const [rotation, setRotation] = React.useState(PageRotation.Rotate0);\n    const [scale, setScale] = React.useState(1.0);\n    return {\n        rotation,\n        scale,\n        setRotation,\n        setScale,\n    };\n}\nfunction useUiContextProps() {\n    const [errorMessage, setErrorMessage] = React.useState(null);\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [isShowingHighlightOverlay, setIsShowingHighlightOverlay] = React.useState(false);\n    const [isShowingOutline, setIsShowingOutline] = React.useState(false);\n    const [isShowingTextHighlight, setIsShowingTextHighlight] = React.useState(false);\n    return {\n        errorMessage,\n        isLoading,\n        isShowingHighlightOverlay,\n        isShowingOutline,\n        isShowingTextHighlight,\n        setErrorMessage,\n        setIsLoading,\n        setIsShowingHighlightOverlay,\n        setIsShowingOutline,\n        setIsShowingTextHighlight,\n    };\n}\nconst ContextProvider = ({ children }) => {\n    const documentProps = useDocumentContextProps();\n    const transformProps = useTransformContextProps();\n    const uiProps = useUiContextProps();\n    return (React.createElement(DocumentContext.Provider, { value: documentProps },\n        React.createElement(TransformContext.Provider, { value: transformProps },\n            React.createElement(UiContext.Provider, { value: uiProps }, children))));\n};\n\n;// CONCATENATED MODULE: ./library/index.js\n/*\n * PDF Component Library exports\n */\n\n// Components\n\n\n\n\n\n\n// Context providers\n\n\n\n\n\n// Utils\n\n\n\n\n\n\n\n// Data types\n\n\n// Styles\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///220\n')}},__webpack_exports__={};__webpack_modules__[220]()})();